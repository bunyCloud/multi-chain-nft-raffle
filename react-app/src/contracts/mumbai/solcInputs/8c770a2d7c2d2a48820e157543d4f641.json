{
  "language": "Solidity",
  "sources": {
    "contracts/AuctionBuny.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol';\n\ncontract AuctionBuny is ERC721URIStorage {\n  string public Name;\n  string public Symbol;\n\n  constructor() ERC721('The Auction BUNY', 'BUNY') {\n    Name = name();\n    Symbol = symbol();\n  }\n\n  struct BUNY {\n    string name;\n    string tokenURI;\n    string des;\n    uint uid;\n    uint price;\n    address payable creator;\n    address payable owner;\n    bool onauction;\n  }\n\n  struct Auction {\n    uint initivalue;\n    uint finalvalue;\n    uint endtime;\n    uint nid;\n    address payable provider;\n    address payable receiver;\n    bool on;\n    bool mark;\n  }\n\n  struct history {\n    uint num;\n  }\n\n  //BUNY Uid\n  uint public itemUid;\n  //Auction Uid\n  uint public auctionUid;\n  //index\n  mapping(uint => history) public hislen;\n  //mapping\n  mapping(uint => BUNY) public marketBoard;\n  //mapping\n  mapping(uint => Auction) public auctions;\n  //mapping\n  mapping(uint => address[]) public Historys;\n\n  //BUNY\n  function createNFT(string memory _name, string memory _tokenURI, string memory _des, uint _price) external {\n    address payable sender = payable(msg.sender);\n    //BUNY\n    _safeMint((msg.sender), itemUid);\n    //uid和uri一一对应\n    _setTokenURI(itemUid, _tokenURI);\n    //NFT对象\n    BUNY memory newNFT = BUNY(_name, _tokenURI, _des, itemUid, _price, sender, sender, false);\n    //FT加入市场\n    marketBoard[itemUid] = newNFT;\n    //\n    Historys[itemUid].push(sender);\n    //Index\n    hislen[itemUid].num++;\n    //增加 uid + 1\n    itemUid++;\n    emit NftMinted((msg.sender), itemUid);\n  }\n\n  //\n  function getURI(uint _id) public view returns (string memory) {\n    string memory thisURI = tokenURI(_id);\n    return thisURI;\n  }\n\n  //\n  function getOwner(uint _id) public view returns (address) {\n    return ownerOf(_id);\n  }\n\n  //\n  function getHislen(uint _id) public view returns (uint) {\n    return hislen[_id].num;\n  }\n\n  event NftMinted(address owner, uint itemUid);\n\n  // Events that will be emitted on changes.\n  event HighestBidIncreased(address bidder, uint _auction, uint amount);\n  // The auction has ended.\n  event AuctionEnded(address winner, uint amount);\n  // The auction has success.\n  event AuctionComplete(address from, address to);\n  event AuctionCreated(uint _uid, uint _time, uint _value);\n  /// The auction has already ended.\n  error AuctionAlreadyEnded();\n  /// There is already a higher or equal bid.\n  error BidNotHighEnough(uint highestBid);\n  /// The auction has not ended yet.\n  error AuctionNotYetEnded();\n  /// The function auctionEnd has already been called.\n  error AuctionEndAlreadyCalled();\n  /// Poor\n  error Poor();\n  /// Wrong\n  error Wrong();\n  /// Not Yours\n  error NotYours();\n\n  function createAuction(uint _uid, uint _value, uint _time) external {\n    if (!_exists(_uid)) revert Wrong();\n    if (msg.sender != ownerOf(_uid)) revert NotYours();\n\n    address payable x = payable(msg.sender);\n\n    marketBoard[_uid].onauction = true;\n\n    Auction memory newAuction = Auction(_value, _value, block.timestamp + _time, _uid, x, x, true, false);\n    auctions[_uid] = newAuction;\n\n    emit AuctionCreated(_uid, block.timestamp + _time, _value);\n  }\n\n  function Bid(uint _id, uint price) external {\n    if (auctions[_id].on == false) revert AuctionAlreadyEnded();\n    //\n    if (block.timestamp > auctions[_id].endtime) revert AuctionAlreadyEnded();\n    //\n    if (price > msg.sender.balance) revert Poor();\n    //\n    if (price <= auctions[_id].finalvalue) revert BidNotHighEnough(auctions[_id].finalvalue);\n    //\n    auctions[_id].finalvalue = price;\n    auctions[_id].provider = auctions[_id].receiver;\n    auctions[_id].receiver = payable(msg.sender);\n    emit HighestBidIncreased(msg.sender, _id, price);\n  }\n\n  function claim(uint _id) public payable {\n    if (block.timestamp < auctions[_id].endtime) revert AuctionNotYetEnded();\n    if (auctions[_id].receiver != msg.sender) revert NotYours();\n    address payable sender = payable(msg.sender);\n    Historys[_id].push(msg.sender);\n    hislen[_id].num++;\n    address t = marketBoard[_id].owner;\n    marketBoard[_id].owner = sender;\n    marketBoard[_id].onauction = false;\n    marketBoard[_id].price = auctions[_id].finalvalue;\n\n    payable(ownerOf(_id)).transfer(msg.value);\n    _transfer(ownerOf(_id), msg.sender, _id);\n    // uint vv = auctions[_id].finalvalue;\n    // payable(ownerOf(_id)).transfer(vv);\n    emit AuctionComplete(t, msg.sender);\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\n     * the storage mapping.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/TheBunyProjectNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n/* Imports */\r\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\r\nimport '@openzeppelin/contracts/utils/Counters.sol';\r\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol';\r\n\r\n\r\ncontract TheBunyProjectNFT is ERC721URIStorage {\r\n  /* State Variables */\r\n\r\n  using Counters for Counters.Counter;\r\n  Counters.Counter private s_tokenIds;\r\n  address s_marketplaceAddress;\r\n\r\n  event tokenMinted(uint256 indexed tokenId);\r\n\r\n  constructor(address _marketplaceAddress) ERC721('The Buny Project 2023', 'mBUNY') {\r\n    s_marketplaceAddress = _marketplaceAddress;\r\n  }\r\n\r\n  /*  Logics */\r\n\r\n  function mintToken(string memory _tokenURI) external returns (uint) {\r\n    s_tokenIds.increment();\r\n    uint256 newTokenId = s_tokenIds.current();\r\n\r\n    _mint(msg.sender, newTokenId);\r\n    emit tokenMinted(newTokenId);\r\n    _setTokenURI(newTokenId, _tokenURI);\r\n\r\n    setApprovalForAll(s_marketplaceAddress, true);\r\n    return newTokenId;\r\n  }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "contracts/TheBunyProjectMarketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n/* Imports */\r\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\r\nimport '@openzeppelin/contracts/utils/Counters.sol';\r\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\r\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol';\r\nimport '@openzeppelin/contracts/access/Ownable.sol';\r\n/* Errors */\r\nerror NFTMarketplace__ItemPriceIsLessThenZero();\r\nerror NFTMarketplace__ItemPriceNotMet();\r\nerror NFTMarketplace__YouAreNotOwnerOfThisItem();\r\n\r\ncontract TheBunyProjectMarketplace is ReentrancyGuard {\r\n  /* State Variables */\r\n\r\n  using Counters for Counters.Counter;\r\n  Counters.Counter private s_nftIds;\r\n  Counters.Counter private s_nftSold; // To count how many nfts are sold\r\n\r\n  address payable private owner;\r\n  uint256 listingPrice = 0.025 ether; // This is the base price every seller has to pay for every listing.\r\n\r\n  /* Constructor */\r\n  constructor() {\r\n    owner = payable(msg.sender);\r\n  }\r\n\r\n  /* Structs */\r\n\r\n  struct Item {\r\n    uint itemId;\r\n    address nftContract;\r\n    uint256 tokenId;\r\n    address payable seller;\r\n    address payable owner;\r\n    uint256 price;\r\n    bool sold;\r\n  }\r\n\r\n  /* Mappings */\r\n  mapping(uint256 => Item) private Items; // Main Mapping of all Items with tokenId\r\n\r\n  /* Events */\r\n  event ItemList(uint indexed itemId, address indexed nftAddress, uint256 indexed tokenId, address seller, address owner, uint256 price, bool sold);\r\n\r\n  event ItemBought(address indexed nftAddress, uint256 indexed tokenId, address seller, address owner, uint256 price, bool sold);\r\n\r\n   event ItemPriceUpdate(uint indexed itemId,  uint256 price);\r\n\r\n      // Only the owner of the contract may call\r\n    modifier onlyOwner() {\r\n        require(\r\n            msg.sender == owner,\r\n            \"Only the contract owner may call this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n  // event ItemResell(\r\n  //     address indexed nftAddress,\r\n  //     uint256 indexed tokenId,\r\n  //     address seller,\r\n  //     address owner,\r\n  //     uint256 price,\r\n  //     bool sold\r\n  // );\r\n\r\n  /* Logics */\r\n\r\n  function getListingPrice() external view returns (uint256) {\r\n    return listingPrice;\r\n  }\r\n\r\n  // Get all Listed Items\r\n  function getAllListedItems() external view returns (Item[] memory) {\r\n    uint itemCount = s_nftIds.current();\r\n    uint unSoldItemsCount = s_nftIds.current() - s_nftSold.current();\r\n    uint currentIndex = 0;\r\n\r\n    Item[] memory items = new Item[](unSoldItemsCount);\r\n    for (uint i = 0; i < itemCount; i++) {\r\n      if (Items[i + 1].owner == address(0)) {\r\n        uint currentId = Items[i + 1].itemId;\r\n        Item storage currentItem = Items[currentId];\r\n        items[currentIndex] = currentItem;\r\n        currentIndex += 1;\r\n      }\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  // Get Items of the owner who have purchased the items;\r\n  function getOwnerListedItems() external view returns (Item[] memory) {\r\n    uint totalListedItems = s_nftIds.current();\r\n    uint itemCount = 0;\r\n    uint currentIndex = 0;\r\n\r\n    for (uint256 i = 0; i < totalListedItems; i++) {\r\n      if (Items[i + 1].owner == msg.sender) {\r\n        itemCount += 1;\r\n      }\r\n    }\r\n\r\n    Item[] memory items = new Item[](itemCount);\r\n    for (uint i = 0; i < totalListedItems; i++) {\r\n      if (Items[i + 1].owner == msg.sender) {\r\n        uint currentId = Items[i + 1].itemId;\r\n        Item storage currentItem = Items[currentId];\r\n        items[currentIndex] = currentItem;\r\n        currentIndex += 1;\r\n      }\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  // Get Items of the seller who have listed items;\r\n  function getSellerListedItems() external view returns (Item[] memory) {\r\n    uint totalListedItems = s_nftIds.current();\r\n    uint itemCount = 0;\r\n    uint currentIndex = 0;\r\n\r\n    for (uint256 i = 0; i < totalListedItems; i++) {\r\n      if (Items[i + 1].seller == msg.sender) {\r\n        itemCount += 1;\r\n      }\r\n    }\r\n\r\n    Item[] memory items = new Item[](itemCount);\r\n    for (uint i = 0; i < totalListedItems; i++) {\r\n      if (Items[i + 1].seller == msg.sender) {\r\n        uint currentId = Items[i + 1].itemId;\r\n        Item storage currentItem = Items[currentId];\r\n        items[currentIndex] = currentItem;\r\n        currentIndex += 1;\r\n      }\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  function getSpecificItem(uint256 _itemId) external view returns (Item memory) {\r\n    return Items[_itemId];\r\n  }\r\n\r\n  // List a item;\r\n  function listItem(address _nftAddress, uint256 _tokenId, uint256 _price) public payable nonReentrant {\r\n    if (_price < 0) {\r\n      revert NFTMarketplace__ItemPriceIsLessThenZero();\r\n    }\r\n\r\n    s_nftIds.increment();\r\n    uint newNftId = s_nftIds.current();\r\n\r\n    Items[newNftId] = Item(newNftId, _nftAddress, _tokenId, payable(msg.sender), payable(address(0)), _price, false);\r\n\r\n    IERC721(_nftAddress).transferFrom(msg.sender, address(this), _tokenId);\r\n\r\n    emit ItemList(newNftId, _nftAddress, _tokenId, msg.sender, address(0), _price, false);\r\n  }\r\n\r\n  // Update Price\r\n  function updateItemPrice(uint256 _itemId, uint256 _price) external {\r\n    if (msg.sender != Items[_itemId].seller) {\r\n      revert NFTMarketplace__YouAreNotOwnerOfThisItem();\r\n    }\r\n\r\n    if (_price <= 0) {\r\n      revert NFTMarketplace__ItemPriceIsLessThenZero();\r\n    }\r\n\r\n    Items[_itemId].price = _price;\r\n    emit ItemPriceUpdate(_itemId,  _price);\r\n  }\r\n\r\n  // Buy Item\r\n  function buyItem(address _nftAddress, uint256 _itemId) external payable nonReentrant {\r\n    uint256 price = Items[_itemId].price;\r\n    uint256 tokenId = Items[_itemId].tokenId;\r\n    address payable seller = Items[_itemId].seller;\r\n    if (msg.value != price) {\r\n      revert NFTMarketplace__ItemPriceNotMet();\r\n    }\r\n\r\n    // Items[_itemId].seller.transfer(msg.value);\r\n    seller.transfer(msg.value);\r\n    IERC721(_nftAddress).transferFrom(address(this), msg.sender, tokenId);\r\n    Items[_itemId].owner = payable(msg.sender);\r\n    Items[_itemId].sold = true;\r\n    s_nftSold.increment();\r\n\r\n    emit ItemBought(_nftAddress, tokenId, address(0), msg.sender, price, true);\r\n    payable(owner).transfer(listingPrice);\r\n  }\r\n\r\n  // Resell\r\n  function resellItem(address _nftAddress, uint256 _tokenId, uint256 _price) public payable {\r\n    if (Items[_tokenId].owner != msg.sender) {\r\n      revert NFTMarketplace__YouAreNotOwnerOfThisItem();\r\n    }\r\n    if (msg.value != listingPrice) {\r\n      revert NFTMarketplace__ItemPriceNotMet();\r\n    }\r\n    Items[_tokenId].sold = false;\r\n    Items[_tokenId].price = _price;\r\n    Items[_tokenId].seller = payable(msg.sender);\r\n    Items[_tokenId].owner = payable(address(this));\r\n    s_nftSold.decrement();\r\n\r\n    IERC721(_nftAddress).transferFrom(msg.sender, address(this), _tokenId);\r\n  }\r\n\r\n  function getContractBalance(address ContractAddress) public view returns (uint) {\r\n    return ContractAddress.balance;\r\n  }\r\n\r\n  \r\n  // PAYMENT FUNCTIONS\r\n    function checkBalance() public view onlyOwner returns (uint256 amount) {\r\n        amount = address(this).balance;\r\n        return amount;\r\n    }\r\n\r\n    // Withdraw contract balance\r\n    function withdraw() public onlyOwner {\r\n        (bool sent, ) = msg.sender.call{value: checkBalance()}(\"\");\r\n        require(sent, \"There was a problem while withdrawing\");\r\n    }\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/TheBUNYnft.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.0 <0.9.0;\n\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\nimport '@openzeppelin/contracts/utils/Counters.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\n//import \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\n\ncontract TheBUNY is ERC721, Ownable {\n  using Strings for uint256;\n  using Counters for Counters.Counter;\n  Counters.Counter private supply;\n  uint256 public cost = 0.001 ether;\n  uint256 public maxSupply = 1111;\n  uint256 public maxMintAmountPerTx = 5;\n  string public baseURI = 'https://buni.mypinata.cloud/ipfs/QmPif7uYfrKC9QhxPQmPbKzfZWAjpyAbBWQEGm8Y9cMzzT/';\n  address contractAddress;\n  bool public paused = false;\n\n  constructor(address marketplaceAddress) ERC721('The BUNY Project', 'BUNY') {\n    contractAddress = marketplaceAddress;\n  }\n\n  mapping(bytes32 => bool) public forSale;\n  mapping(bytes32 => uint256) public uriToTokenId;\n\n  modifier mintCompliance(uint256 _mintAmount) {\n    require(_mintAmount > 0 && _mintAmount <= maxMintAmountPerTx, 'Nope Nope!');\n    require(supply.current() + _mintAmount <= maxSupply, 'Max supply is 5 per wallet');\n    _;\n  }\n\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n    require(_exists(tokenId), 'ERC721AMetadata: URI query for nonexistant token');\n\n    string memory currentBaseURI = _baseURI();\n    return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), '.json')) : '';\n  }\n\n  function _baseURI() internal view virtual override returns (string memory) {\n    return baseURI;\n  }\n\n  function setBaseURI(string memory _newBaseURI) public onlyOwner {\n    baseURI = _newBaseURI;\n  }\n\n  function totalSupply() public view returns (uint256) {\n    return supply.current();\n  }\n\n  function mint(uint256 _mintAmount) public payable mintCompliance(_mintAmount) {\n    require(!paused, \"I'm in time out!\");\n    require(msg.value >= cost * _mintAmount, 'I pity the fool!');\n\n    _mintLoop(msg.sender, _mintAmount);\n  }\n\n  function mintForAddress(uint256 _mintAmount, address _receiver) public mintCompliance(_mintAmount) onlyOwner {\n    _mintLoop(_receiver, _mintAmount);\n  }\n\n  function OwnerOfToken(address _owner) public view returns (uint256[] memory) {\n    uint256 ownerTokenCount = balanceOf(_owner);\n    uint256[] memory ownedTokenIds = new uint256[](ownerTokenCount);\n    uint256 currentTokenId = 1;\n    uint256 ownedTokenIndex = 0;\n\n    while (ownedTokenIndex < ownerTokenCount && currentTokenId <= maxSupply) {\n      address currentTokenOwner = ownerOf(currentTokenId);\n\n      if (currentTokenOwner == _owner) {\n        ownedTokenIds[ownedTokenIndex] = currentTokenId;\n\n        ownedTokenIndex++;\n      }\n\n      currentTokenId++;\n    }\n\n    return ownedTokenIds;\n  }\n\n  function setCost(uint256 _cost) public onlyOwner {\n    cost = _cost;\n  }\n\n  function setPaused(bool _state) public onlyOwner {\n    paused = _state;\n  }\n\n  function withdraw() public onlyOwner {\n    // 20% tax to the king\n    // =============================================================================\n    (bool hs, ) = payable(0x8406A51A0E1B5F52Ff61226773e6328e5Da5d964).call{ value: (address(this).balance * 20) / 100 }('');\n    require(hs);\n    // =============================================================================\n\n    // Remaining balance sent to Buny Bank\n    // =============================================================================\n    (bool os, ) = payable(owner()).call{ value: address(this).balance }('');\n    require(os);\n    // =============================================================================\n  }\n\n  function _mintLoop(address _receiver, uint256 _mintAmount) internal {\n    for (uint256 i = 0; i < _mintAmount; i++) {\n      supply.increment();\n      _safeMint(_receiver, supply.current());\n    }\n  }\n}\n"
    },
    "contracts/TheBUNY.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.0 <0.9.0;\n\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\nimport '@openzeppelin/contracts/utils/Counters.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\n//import \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\n\ncontract TheBUNY is ERC721, Ownable {\n  using Strings for uint256;\n  using Counters for Counters.Counter;\n  Counters.Counter private supply;\n  uint256 public cost = 0.001 ether;\n  uint256 public maxSupply = 1111;\n  uint256 public maxMintAmountPerTx = 5;\n  string public baseURI = 'https://buni.mypinata.cloud/ipfs/QmPif7uYfrKC9QhxPQmPbKzfZWAjpyAbBWQEGm8Y9cMzzT/';\n  address contractAddress;\n  bool public paused = false;\n\n  constructor(address marketplaceAddress) ERC721('The BUNY Project', 'BUNY') {\n    contractAddress = marketplaceAddress;\n  }\n\n  mapping(bytes32 => bool) public forSale;\n  mapping(bytes32 => uint256) public uriToTokenId;\n\n  modifier mintCompliance(uint256 _mintAmount) {\n    require(_mintAmount > 0 && _mintAmount <= maxMintAmountPerTx, 'Nope Nope!');\n    require(supply.current() + _mintAmount <= maxSupply, 'Max supply is 5 per wallet');\n    _;\n  }\n\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n    require(_exists(tokenId), 'ERC721AMetadata: URI query for nonexistant token');\n\n    string memory currentBaseURI = _baseURI();\n    return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), '.json')) : '';\n  }\n\n  function _baseURI() internal view virtual override returns (string memory) {\n    return baseURI;\n  }\n\n  function setBaseURI(string memory _newBaseURI) public onlyOwner {\n    baseURI = _newBaseURI;\n  }\n\n  function totalSupply() public view returns (uint256) {\n    return supply.current();\n  }\n\n  function mint(uint256 _mintAmount) public payable mintCompliance(_mintAmount) {\n    require(!paused, \"I'm in time out!\");\n    require(msg.value >= cost * _mintAmount, 'I pity the fool!');\n\n    _mintLoop(msg.sender, _mintAmount);\n  }\n\n  function mintForAddress(uint256 _mintAmount, address _receiver) public mintCompliance(_mintAmount) onlyOwner {\n    _mintLoop(_receiver, _mintAmount);\n  }\n\n  function OwnerOfToken(address _owner) public view returns (uint256[] memory) {\n    uint256 ownerTokenCount = balanceOf(_owner);\n    uint256[] memory ownedTokenIds = new uint256[](ownerTokenCount);\n    uint256 currentTokenId = 1;\n    uint256 ownedTokenIndex = 0;\n\n    while (ownedTokenIndex < ownerTokenCount && currentTokenId <= maxSupply) {\n      address currentTokenOwner = ownerOf(currentTokenId);\n\n      if (currentTokenOwner == _owner) {\n        ownedTokenIds[ownedTokenIndex] = currentTokenId;\n\n        ownedTokenIndex++;\n      }\n\n      currentTokenId++;\n    }\n\n    return ownedTokenIds;\n  }\n\n  function setCost(uint256 _cost) public onlyOwner {\n    cost = _cost;\n  }\n\n  function setPaused(bool _state) public onlyOwner {\n    paused = _state;\n  }\n\n  function withdraw() public onlyOwner {\n    // 20% tax to the king\n    // =============================================================================\n    (bool hs, ) = payable(0x8406A51A0E1B5F52Ff61226773e6328e5Da5d964).call{ value: (address(this).balance * 20) / 100 }('');\n    require(hs);\n    // =============================================================================\n\n    // Remaining balance sent to Buny Bank\n    // =============================================================================\n    (bool os, ) = payable(owner()).call{ value: address(this).balance }('');\n    require(os);\n    // =============================================================================\n  }\n\n  function _mintLoop(address _receiver, uint256 _mintAmount) internal {\n    for (uint256 i = 0; i < _mintAmount; i++) {\n      supply.increment();\n      _safeMint(_receiver, supply.current());\n    }\n  }\n}\n"
    },
    "contracts/TBunyNft.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n/* Imports */\r\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\r\nimport '@openzeppelin/contracts/utils/Counters.sol';\r\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol';\r\n\r\n\r\ncontract TBunyNft is ERC721URIStorage {\r\n  /* State Variables */\r\n\r\n  using Counters for Counters.Counter;\r\n  Counters.Counter private s_tokenIds;\r\n  address s_marketplaceAddress;\r\n\r\n  event tokenMinted(uint256 indexed tokenId);\r\n\r\n  constructor(address _marketplaceAddress) ERC721('The Buny Project', 'TBUNY') {\r\n    s_marketplaceAddress = _marketplaceAddress;\r\n  }\r\n\r\n  /*  Logics */\r\n\r\n  function mintToken(string memory _tokenURI) external returns (uint) {\r\n    s_tokenIds.increment();\r\n    uint256 newTokenId = s_tokenIds.current();\r\n\r\n    _mint(msg.sender, newTokenId);\r\n    emit tokenMinted(newTokenId);\r\n    _setTokenURI(newTokenId, _tokenURI);\r\n\r\n    setApprovalForAll(s_marketplaceAddress, true);\r\n    return newTokenId;\r\n  }\r\n}\r\n"
    },
    "contracts/TBunyMarketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n/* Imports */\r\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\r\nimport '@openzeppelin/contracts/utils/Counters.sol';\r\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\r\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol';\r\nimport '@openzeppelin/contracts/access/Ownable.sol';\r\n/* Errors */\r\nerror NFTMarketplace__ItemPriceIsLessThenZero();\r\nerror NFTMarketplace__ItemPriceNotMet();\r\nerror NFTMarketplace__YouAreNotOwnerOfThisItem();\r\n\r\ncontract TBunyMarketplace is ReentrancyGuard {\r\n  /* State Variables */\r\n\r\n  using Counters for Counters.Counter;\r\n  Counters.Counter private s_nftIds;\r\n  Counters.Counter public s_nftSold; // To count how many nfts are sold\r\n\r\n  address payable private owner;\r\n  uint256 listingPrice = 0.025 ether; // This is the base price every seller has to pay for every listing.\r\n\r\n  /* Constructor */\r\n  constructor() {\r\n    owner = payable(msg.sender);\r\n  }\r\n\r\n  /* Structs */\r\n\r\n  struct Item {\r\n    uint itemId;\r\n    address nftContract;\r\n    uint256 tokenId;\r\n    address payable seller;\r\n    address payable owner;\r\n    uint256 price;\r\n    bool sold;\r\n  }\r\n\r\n  /* Mappings */\r\n  mapping(uint256 => Item) private Items; // Main Mapping of all Items with tokenId\r\n\r\n  /* Events */\r\n  event ItemList(uint indexed itemId, address indexed nftAddress, uint256 indexed tokenId, address seller, address owner, uint256 price, bool sold);\r\n\r\n  event ItemBought(address indexed nftAddress, uint256 indexed tokenId, address seller, address owner, uint256 price, bool sold);\r\n\r\n   event ItemPriceUpdate(uint indexed itemId,  uint256 price);\r\n\r\n      // Only the owner of the contract may call\r\n    modifier onlyOwner() {\r\n        require(\r\n            msg.sender == owner,\r\n            \"Only the contract owner may call this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n  // event ItemResell(\r\n  //     address indexed nftAddress,\r\n  //     uint256 indexed tokenId,\r\n  //     address seller,\r\n  //     address owner,\r\n  //     uint256 price,\r\n  //     bool sold\r\n  // );\r\n\r\n  /* Logics */\r\n\r\n  function getListingPrice() external view returns (uint256) {\r\n    return listingPrice;\r\n  }\r\n\r\n  // Get all Listed Items\r\n  function getAllListedItems() external view returns (Item[] memory) {\r\n    uint itemCount = s_nftIds.current();\r\n    uint unSoldItemsCount = s_nftIds.current() - s_nftSold.current();\r\n    uint currentIndex = 0;\r\n\r\n    Item[] memory items = new Item[](unSoldItemsCount);\r\n    for (uint i = 0; i < itemCount; i++) {\r\n      if (Items[i + 1].owner == address(0)) {\r\n        uint currentId = Items[i + 1].itemId;\r\n        Item storage currentItem = Items[currentId];\r\n        items[currentIndex] = currentItem;\r\n        currentIndex += 1;\r\n      }\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  // Get Items of the owner who have purchased the items;\r\n  function getOwnerListedItems() external view returns (Item[] memory) {\r\n    uint totalListedItems = s_nftIds.current();\r\n    uint itemCount = 0;\r\n    uint currentIndex = 0;\r\n\r\n    for (uint256 i = 0; i < totalListedItems; i++) {\r\n      if (Items[i + 1].owner == msg.sender) {\r\n        itemCount += 1;\r\n      }\r\n    }\r\n\r\n    Item[] memory items = new Item[](itemCount);\r\n    for (uint i = 0; i < totalListedItems; i++) {\r\n      if (Items[i + 1].owner == msg.sender) {\r\n        uint currentId = Items[i + 1].itemId;\r\n        Item storage currentItem = Items[currentId];\r\n        items[currentIndex] = currentItem;\r\n        currentIndex += 1;\r\n      }\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  // Get Items of the seller who have listed items;\r\n  function getSellerListedItems() external view returns (Item[] memory) {\r\n    uint totalListedItems = s_nftIds.current();\r\n    uint itemCount = 0;\r\n    uint currentIndex = 0;\r\n\r\n    for (uint256 i = 0; i < totalListedItems; i++) {\r\n      if (Items[i + 1].seller == msg.sender) {\r\n        itemCount += 1;\r\n      }\r\n    }\r\n\r\n    Item[] memory items = new Item[](itemCount);\r\n    for (uint i = 0; i < totalListedItems; i++) {\r\n      if (Items[i + 1].seller == msg.sender) {\r\n        uint currentId = Items[i + 1].itemId;\r\n        Item storage currentItem = Items[currentId];\r\n        items[currentIndex] = currentItem;\r\n        currentIndex += 1;\r\n      }\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  function getSpecificItem(uint256 _itemId) external view returns (Item memory) {\r\n    return Items[_itemId];\r\n  }\r\n\r\n  // List a item;\r\n  function listItem(address _nftAddress, uint256 _tokenId, uint256 _price) public payable nonReentrant {\r\n    if (_price < 0) {\r\n      revert NFTMarketplace__ItemPriceIsLessThenZero();\r\n    }\r\n\r\n    s_nftIds.increment();\r\n    uint newNftId = s_nftIds.current();\r\n\r\n    Items[newNftId] = Item(newNftId, _nftAddress, _tokenId, payable(msg.sender), payable(address(0)), _price, false);\r\n\r\n    IERC721(_nftAddress).transferFrom(msg.sender, address(this), _tokenId);\r\n\r\n    emit ItemList(newNftId, _nftAddress, _tokenId, msg.sender, address(0), _price, false);\r\n  }\r\n\r\n  // Update Price\r\n  function updateItemPrice(uint256 _itemId, uint256 _price) external {\r\n    if (msg.sender != Items[_itemId].seller) {\r\n      revert NFTMarketplace__YouAreNotOwnerOfThisItem();\r\n    }\r\n\r\n    if (_price <= 0) {\r\n      revert NFTMarketplace__ItemPriceIsLessThenZero();\r\n    }\r\n\r\n    Items[_itemId].price = _price;\r\n    emit ItemPriceUpdate(_itemId,  _price);\r\n  }\r\n\r\n  // Buy Item\r\n  function buyItem(address _nftAddress, uint256 _itemId) external payable nonReentrant {\r\n    uint256 price = Items[_itemId].price;\r\n    uint256 tokenId = Items[_itemId].tokenId;\r\n    address payable seller = Items[_itemId].seller;\r\n    if (msg.value != price) {\r\n      revert NFTMarketplace__ItemPriceNotMet();\r\n    }\r\n\r\n    // Items[_itemId].seller.transfer(msg.value);\r\n    seller.transfer(msg.value);\r\n    IERC721(_nftAddress).transferFrom(address(this), msg.sender, tokenId);\r\n    Items[_itemId].owner = payable(msg.sender);\r\n    Items[_itemId].sold = true;\r\n    s_nftSold.increment();\r\n\r\n    emit ItemBought(_nftAddress, tokenId, address(0), msg.sender, price, true);\r\n    payable(owner).transfer(listingPrice);\r\n  }\r\n\r\n  // Resell\r\n  function resellItem(address _nftAddress, uint256 _tokenId, uint256 _price) public payable {\r\n    if (Items[_tokenId].owner != msg.sender) {\r\n      revert NFTMarketplace__YouAreNotOwnerOfThisItem();\r\n    }\r\n    if (msg.value != listingPrice) {\r\n      revert NFTMarketplace__ItemPriceNotMet();\r\n    }\r\n    Items[_tokenId].sold = false;\r\n    Items[_tokenId].price = _price;\r\n    Items[_tokenId].seller = payable(msg.sender);\r\n    Items[_tokenId].owner = payable(address(this));\r\n    s_nftSold.decrement();\r\n\r\n    IERC721(_nftAddress).transferFrom(msg.sender, address(this), _tokenId);\r\n  }\r\n\r\n  function getContractBalance(address ContractAddress) public view returns (uint) {\r\n    return ContractAddress.balance;\r\n  }\r\n\r\n  \r\n  // PAYMENT FUNCTIONS\r\n    function checkBalance() public view onlyOwner returns (uint256 amount) {\r\n        amount = address(this).balance;\r\n        return amount;\r\n    }\r\n\r\n    // Withdraw contract balance\r\n    function withdraw() public onlyOwner {\r\n        (bool sent, ) = msg.sender.call{value: checkBalance()}(\"\");\r\n        require(sent, \"There was a problem while withdrawing\");\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/NFTMarket.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport '@openzeppelin/contracts/utils/Counters.sol';\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\n\ncontract NFTMarket is ReentrancyGuard {\n  using Counters for Counters.Counter;\n  Counters.Counter private _itemIds;\n  Counters.Counter private _itemsSold;\n\n  address public owner;\n\n  constructor() {\n    owner = msg.sender;\n  }\n\n  struct MarketItem {\n    uint itemId;\n    address nftContract;\n    uint256 tokenId;\n    address payable seller;\n    address payable owner;\n    uint256 price;\n    bool sold;\n  }\n\n  mapping(uint256 => MarketItem) private idToMarketItem;\n\n  event MarketItemCreated(uint indexed itemId, address indexed nftContract, uint256 indexed tokenId, address seller, address owner, uint256 price, bool sold);\n\n  event MarketItemSold(uint indexed itemId, address owner);\n\n  function createMarketItem(address nftContract, uint256 tokenId, uint256 price) public payable nonReentrant {\n    require(price > 0, 'Price must be greater than 0');\n\n    _itemIds.increment();\n    uint256 itemId = _itemIds.current();\n\n    idToMarketItem[itemId] = MarketItem(itemId, nftContract, tokenId, payable(msg.sender), payable(address(0)), price, false);\n\n    IERC721(nftContract).transferFrom(msg.sender, address(this), tokenId);\n\n    emit MarketItemCreated(itemId, nftContract, tokenId, msg.sender, address(0), price, false);\n  }\n\n  function createMarketSale(address nftContract, uint256 itemId) public payable nonReentrant {\n    uint price = idToMarketItem[itemId].price;\n    uint tokenId = idToMarketItem[itemId].tokenId;\n    bool sold = idToMarketItem[itemId].sold;\n    require(msg.value == price, 'Please submit the asking price in order to complete the purchase');\n    require(sold != true, 'This Sale has alredy finnished');\n    emit MarketItemSold(itemId, msg.sender);\n\n    idToMarketItem[itemId].seller.transfer(msg.value);\n    IERC721(nftContract).transferFrom(address(this), msg.sender, tokenId);\n    idToMarketItem[itemId].owner = payable(msg.sender);\n    _itemsSold.increment();\n    idToMarketItem[itemId].sold = true;\n  }\n\n  function fetchMarketItems() public view returns (MarketItem[] memory) {\n    uint itemCount = _itemIds.current();\n    uint unsoldItemCount = _itemIds.current() - _itemsSold.current();\n    uint currentIndex = 0;\n\n    MarketItem[] memory items = new MarketItem[](unsoldItemCount);\n    for (uint i = 0; i < itemCount; i++) {\n      if (idToMarketItem[i + 1].owner == address(0)) {\n        uint currentId = i + 1;\n        MarketItem storage currentItem = idToMarketItem[currentId];\n        items[currentIndex] = currentItem;\n        currentIndex += 1;\n      }\n    }\n    return items;\n  }\n}\n"
    },
    "contracts/NFT3DMarket.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\n/* Imports */\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\nimport '@openzeppelin/contracts/utils/Counters.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\n/* Errors */\nerror NFTMarketplace__ItemPriceIsLessThenZero();\nerror NFTMarketplace__ItemPriceNotMet();\nerror NFTMarketplace__YouAreNotOwnerOfThisItem();\n\ncontract NFT3DMarket is ReentrancyGuard {\n  /* State Variables */\n\n  using Counters for Counters.Counter;\n  Counters.Counter private s_nftIds;\n  Counters.Counter private s_nftSold; // To count how many nfts are sold\n\n  address payable private owner;\n  uint256 listingPrice = 0.025 ether; // This is the base price every seller has to pay for every listing.\n\n  /* Constructor */\n  constructor() {\n    owner = payable(msg.sender);\n  }\n\n  /* Structs */\n\n  struct Item {\n    uint itemId;\n    address nftContract;\n    uint256 tokenId;\n    address payable seller;\n    address payable owner;\n    uint256 price;\n    bool sold;\n  }\n\n  /* Mappings */\n  mapping(uint256 => Item) private Items; // Main Mapping of all Items with tokenId\n\n  /* Events */\n  event ItemList(uint indexed itemId, address indexed nftAddress, uint256 indexed tokenId, address seller, address owner, uint256 price, bool sold);\n\n  event ItemBought(address indexed nftAddress, uint256 indexed tokenId, address seller, address owner, uint256 price, bool sold);\n\n  // event ItemPriceUpdate (\n  //     address indexed nftAddress,\n  //     uint256 tokenId\n  // )\n\n  // event ItemResell(\n  //     address indexed nftAddress,\n  //     uint256 indexed tokenId,\n  //     address seller,\n  //     address owner,\n  //     uint256 price,\n  //     bool sold\n  // );\n\n  /* Logics */\n\n  function getListingPrice() external view returns (uint256) {\n    return listingPrice;\n  }\n\n  // Get all Listed Items\n  function getAllListedItems() external view returns (Item[] memory) {\n    uint itemCount = s_nftIds.current();\n    uint unSoldItemsCount = s_nftIds.current() - s_nftSold.current();\n    uint currentIndex = 0;\n\n    Item[] memory items = new Item[](unSoldItemsCount);\n    for (uint i = 0; i < itemCount; i++) {\n      if (Items[i + 1].owner == address(0)) {\n        uint currentId = Items[i + 1].itemId;\n        Item storage currentItem = Items[currentId];\n        items[currentIndex] = currentItem;\n        currentIndex += 1;\n      }\n    }\n\n    return items;\n  }\n\n  // Get Items of the owner who have purchased the items;\n  function getOwnerListedItems() external view returns (Item[] memory) {\n    uint totalListedItems = s_nftIds.current();\n    uint itemCount = 0;\n    uint currentIndex = 0;\n\n    for (uint256 i = 0; i < totalListedItems; i++) {\n      if (Items[i + 1].owner == msg.sender) {\n        itemCount += 1;\n      }\n    }\n\n    Item[] memory items = new Item[](itemCount);\n    for (uint i = 0; i < totalListedItems; i++) {\n      if (Items[i + 1].owner == msg.sender) {\n        uint currentId = Items[i + 1].itemId;\n        Item storage currentItem = Items[currentId];\n        items[currentIndex] = currentItem;\n        currentIndex += 1;\n      }\n    }\n\n    return items;\n  }\n\n  // Get Items of the seller who have listed items;\n  function getSellerListedItems() external view returns (Item[] memory) {\n    uint totalListedItems = s_nftIds.current();\n    uint itemCount = 0;\n    uint currentIndex = 0;\n\n    for (uint256 i = 0; i < totalListedItems; i++) {\n      if (Items[i + 1].seller == msg.sender) {\n        itemCount += 1;\n      }\n    }\n\n    Item[] memory items = new Item[](itemCount);\n    for (uint i = 0; i < totalListedItems; i++) {\n      if (Items[i + 1].seller == msg.sender) {\n        uint currentId = Items[i + 1].itemId;\n        Item storage currentItem = Items[currentId];\n        items[currentIndex] = currentItem;\n        currentIndex += 1;\n      }\n    }\n\n    return items;\n  }\n\n  function getSpecificItem(uint256 _itemId) external view returns (Item memory) {\n    return Items[_itemId];\n  }\n\n  // List a item;\n  function listItem(address _nftAddress, uint256 _tokenId, uint256 _price) public payable nonReentrant {\n    if (_price < 0) {\n      revert NFTMarketplace__ItemPriceIsLessThenZero();\n    }\n\n    s_nftIds.increment();\n    uint newNftId = s_nftIds.current();\n\n    Items[newNftId] = Item(newNftId, _nftAddress, _tokenId, payable(msg.sender), payable(address(0)), _price, false);\n\n    IERC721(_nftAddress).transferFrom(msg.sender, address(this), _tokenId);\n\n    emit ItemList(newNftId, _nftAddress, _tokenId, msg.sender, address(0), _price, false);\n  }\n\n  // Update Price\n  function updateItemPrice(uint256 _itemId, uint256 _price) external {\n    if (msg.sender != Items[_itemId].seller) {\n      revert NFTMarketplace__YouAreNotOwnerOfThisItem();\n    }\n\n    if (_price <= 0) {\n      revert NFTMarketplace__ItemPriceIsLessThenZero();\n    }\n\n    Items[_itemId].price = _price;\n  }\n\n  // Buy Item\n  function buyItem(address _nftAddress, uint256 _itemId) external payable nonReentrant {\n    uint256 price = Items[_itemId].price;\n    uint256 tokenId = Items[_itemId].tokenId;\n    address payable seller = Items[_itemId].seller;\n    if (msg.value != price) {\n      revert NFTMarketplace__ItemPriceNotMet();\n    }\n\n    // Items[_itemId].seller.transfer(msg.value);\n    seller.transfer(msg.value);\n    IERC721(_nftAddress).transferFrom(address(this), msg.sender, tokenId);\n    Items[_itemId].owner = payable(msg.sender);\n    Items[_itemId].sold = true;\n    s_nftSold.increment();\n\n    emit ItemBought(_nftAddress, tokenId, address(0), msg.sender, price, true);\n    payable(owner).transfer(listingPrice);\n  }\n\n  // Resell\n  function resellItem(address _nftAddress, uint256 _tokenId, uint256 _price) public payable {\n    if (Items[_tokenId].owner != msg.sender) {\n      revert NFTMarketplace__YouAreNotOwnerOfThisItem();\n    }\n    if (msg.value != listingPrice) {\n      revert NFTMarketplace__ItemPriceNotMet();\n    }\n    Items[_tokenId].sold = false;\n    Items[_tokenId].price = _price;\n    Items[_tokenId].seller = payable(msg.sender);\n    Items[_tokenId].owner = payable(address(this));\n    s_nftSold.decrement();\n\n    IERC721(_nftAddress).transferFrom(msg.sender, address(this), _tokenId);\n  }\n\n  function getContractBalance(address ContractAddress) public view returns (uint) {\n    return ContractAddress.balance;\n  }\n}\n"
    },
    "contracts/BunyAuctionFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport '@openzeppelin/contracts/security/Pausable.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport './SafePayment.sol';\n\ncontract BunyAuctionFactory is Ownable, Pausable, ReentrancyGuard, SafePayment {\n  event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);\n  event AuctionBid(uint256 tokenId, uint256 bid, address bidder);\n  event AuctionFinish(uint256 tokenId, uint256 price, address winner);\n  event AuctionCancelled(uint256 tokenId);\n\n  IERC721 public nftContract;\n  uint256 private immutable _auctionFee;\n  address private immutable _projectTreasury;\n  mapping(uint256 => Auction) private _tokenIdAuction;\n\n  struct Auction {\n    uint128 startingPrice;\n    uint128 endingPrice;\n    uint64 duration;\n    address seller;\n    uint64 startedAt;\n    address lastBidder;\n    uint256 lastBid;\n  }\n\n  constructor(address projectTreasury, uint256 auctionFee) {\n    require(auctionFee <= 0, 'auctionFee too high');\n    _projectTreasury = projectTreasury;\n    _auctionFee = auctionFee;\n  }\n\n  function setNFTContract(IERC721 nonFungibleContract) external onlyOwner {\n    require(address(nftContract) == address(0), 'NFT Contract already set');\n    require(nonFungibleContract.supportsInterface(type(IERC721).interfaceId), 'Non NFT contract');\n    nftContract = nonFungibleContract;\n  }\n\n  function _isAuction(Auction storage _auction) internal view returns (bool) {\n    return (_auction.startedAt > 0);\n  }\n\n  function _isAuctionOpen(Auction storage _auction) internal view returns (bool) {\n    return (_auction.startedAt > 0 && _auction.startedAt + _auction.duration > block.timestamp);\n  }\n\n  function _isAuctionFinish(Auction storage _auction) internal view returns (bool) {\n    return (_auction.startedAt > 0 && _auction.startedAt + _auction.duration <= block.timestamp);\n  }\n\n  function pause() public onlyOwner {\n    _pause();\n  }\n\n  function unpause() public onlyOwner {\n    _unpause();\n  }\n\n  function createAuction(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration) external whenNotPaused {\n    /* solhint-disable reason-string */\n    // Check Overflow\n    require(startingPrice == uint256(uint128(startingPrice)));\n    require(endingPrice == uint256(uint128(endingPrice)));\n    require(duration == uint256(uint64(duration)));\n    require(endingPrice > startingPrice);\n    require(duration >= 1 minutes);\n    /* solhint-disable reason-string */\n    require(_tokenIdAuction[tokenId].startedAt == 0, 'Running Auction');\n\n    address nftOwner = nftContract.ownerOf(tokenId);\n    require(msg.sender == owner() || msg.sender == nftOwner, 'Not Authorized');\n\n    // Escrow NFT\n    nftContract.transferFrom(nftOwner, address(this), tokenId);\n\n    Auction memory auction = Auction(uint128(startingPrice), uint128(endingPrice), uint64(duration), nftOwner, uint64(block.timestamp), address(0), 0);\n    _tokenIdAuction[tokenId] = auction;\n\n    emit AuctionCreated(uint256(tokenId), uint256(auction.startingPrice), uint256(auction.endingPrice), uint256(auction.duration));\n  }\n\n  function bid(uint256 tokenId) external payable whenNotPaused nonReentrant {\n    Auction storage auction = _tokenIdAuction[tokenId];\n    require(_isAuctionOpen(auction), 'Auction not open');\n\n    // TODO Close Auction on endingPrice reached\n    require(auction.lastBid < auction.endingPrice, 'endingPrice reached');\n\n    require(msg.value > auction.startingPrice, 'bid bellow min price');\n    require(msg.value > auction.lastBid, 'bid bellow last bid');\n    // TODO control max bid\n    // require(msg.value < auction.lastBid + maxBid, \"bid too high\");\n\n    uint256 newBid = msg.value;\n    if (newBid > auction.endingPrice) {\n      safeSendETH(msg.sender, newBid - auction.endingPrice);\n      newBid = auction.endingPrice;\n    }\n\n    if (auction.lastBid > 0) {\n      safeSendETH(auction.lastBidder, auction.lastBid);\n    }\n    auction.lastBidder = msg.sender;\n    auction.lastBid = newBid;\n\n    emit AuctionBid(tokenId, newBid, msg.sender);\n  }\n\n  function cancelAuction(uint256 tokenId) external whenNotPaused nonReentrant {\n    Auction storage auction = _tokenIdAuction[tokenId];\n    require(_isAuctionOpen(auction), 'Auction not open');\n    require(msg.sender == auction.seller, 'Only seller can cancel');\n\n    if (auction.lastBid > 0) {\n      safeSendETH(auction.lastBidder, auction.lastBid);\n    }\n    nftContract.transferFrom(address(this), auction.seller, tokenId);\n\n    delete _tokenIdAuction[tokenId];\n    emit AuctionCancelled(tokenId);\n  }\n\n  function cancelAuctionWhenPaused(uint256 tokenId) external whenPaused onlyOwner {\n    Auction storage auction = _tokenIdAuction[tokenId];\n    require(_isAuction(auction), 'Not Auction');\n\n    if (auction.lastBid > 0) {\n      safeSendETH(auction.lastBidder, auction.lastBid);\n    }\n    nftContract.transferFrom(address(this), auction.seller, tokenId);\n\n    delete _tokenIdAuction[tokenId];\n    emit AuctionCancelled(tokenId);\n  }\n\n  function finishAuction(uint256 tokenId) external whenNotPaused nonReentrant {\n    Auction storage auction = _tokenIdAuction[tokenId];\n    require(_isAuctionFinish(auction) || auction.lastBid == auction.endingPrice, 'Auction not finish');\n\n    if (auction.lastBid == 0) {\n      nftContract.transferFrom(address(this), auction.seller, tokenId);\n      emit AuctionFinish(tokenId, 0, auction.seller);\n    } else {\n      nftContract.transferFrom(address(this), auction.lastBidder, tokenId);\n      uint256 treasuryFee = (auction.lastBid * _auctionFee) / 10000;\n      uint256 sellerProceeds = auction.lastBid - treasuryFee;\n      safeSendETH(_projectTreasury, treasuryFee);\n      safeSendETH(auction.seller, sellerProceeds);\n      emit AuctionFinish(tokenId, auction.lastBid, auction.lastBidder);\n    }\n    delete _tokenIdAuction[tokenId];\n  }\n\n  function withdrawUnclaimed(address to) external whenPaused onlyOwner returns (bool) {\n    return getUnclaimed(to);\n  }\n\n  function getAuction(\n    uint256 tokenId\n  )\n    external\n    view\n    returns (address seller, uint256 startingPrice, uint256 endingPrice, uint256 duration, uint256 startedAt, uint256 lastBid, address lastBidder)\n  {\n    Auction storage auction = _tokenIdAuction[tokenId];\n    require(_isAuction(auction), 'Not Auction');\n    return (auction.seller, auction.startingPrice, auction.endingPrice, auction.duration, auction.startedAt, auction.lastBid, auction.lastBidder);\n  }\n\n  function getlastBid(uint256 tokenId) external view returns (uint256) {\n    Auction storage auction = _tokenIdAuction[tokenId];\n    require(_isAuction(auction), 'Not Auction');\n    return auction.lastBid;\n  }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/SafePayment.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nabstract contract SafePayment {\n  event FailedPayment(address to, uint256 amount);\n\n  uint256 private constant GAS_LIMIT = 3_000;\n  bool private _payLock = false;\n  uint256 private _unclaimed;\n\n  function safeSendETH(address to, uint256 amount) internal returns (bool success) {\n    require(!_payLock); // solhint-disable-line reason-string\n    _payLock = true;\n    // solhint-disable-next-line avoid-low-level-calls\n    (success, ) = payable(to).call{ value: amount, gas: GAS_LIMIT }('');\n    if (!success) {\n      _unclaimed += amount;\n      emit FailedPayment(to, amount);\n    }\n    _payLock = false;\n  }\n\n  function getUnclaimed(address to) internal returns (bool success) {\n    // solhint-disable-next-line avoid-low-level-calls\n    (success, ) = payable(to).call{ value: _unclaimed }('');\n    if (success) {\n      _unclaimed = 0;\n    }\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/TestERC20Token.sol": {
      "content": "// SPDX-License-Identifier: WTFPL\n\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n// Used in the tests only - see MultiSigWalletTest.js\ncontract TestERC20Token is ERC20 {\n    constructor(address account, uint256 initialSupply) public ERC20(\"TestERC20Token\", \"TEST\") {\n        _mint(account, initialSupply);\n    }\n}"
    },
    "contracts/ERC2981PerToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\n\nimport './ERC2981Base.sol';\n\n/// @dev This is a contract used to add ERC2981 support to ERC721 and 1155\nabstract contract ERC2981PerToken is ERC2981Base {\n  mapping(uint256 => RoyaltyInfo) internal _royalties;\n\n  /// @dev Sets token royalties\n  /// @param tokenId the token id fir which we register the royalties\n  /// @param recipient recipient of the royalties\n  /// @param value percentage (using 2 decimals - 10000 = 100, 0 = 0)\n  function _setTokenRoyalty(uint256 tokenId, address recipient, uint256 value) internal {\n    require(value <= 10000, 'ERC2981Royalties: Too high');\n    _royalties[tokenId] = RoyaltyInfo(recipient, uint24(value));\n  }\n\n  /// @inheritdoc\tIERC2981Royalties\n  function royaltyInfo(uint256 tokenId, uint256 value) external view override returns (address receiver, uint256 royaltyAmount) {\n    RoyaltyInfo memory royalties = _royalties[tokenId];\n    receiver = royalties.recipient;\n    royaltyAmount = (value * royalties.amount) / 10000;\n  }\n}\n"
    },
    "contracts/ERC2981Base.sol": {
      "content": "pragma solidity ^0.8.1;\n\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\n\nimport './IERC2981Royalties.sol';\n\n/// @dev This is a contract used to add ERC2981 support to ERC721 and 1155\nabstract contract ERC2981Base is ERC165, IERC2981Royalties {\n  struct RoyaltyInfo {\n    address recipient;\n    uint24 amount;\n  }\n\n  /// @inheritdoc\tERC165\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return interfaceId == type(IERC2981Royalties).interfaceId || super.supportsInterface(interfaceId);\n  }\n}\n"
    },
    "contracts/IERC2981Royalties.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\n/// @title IERC2981Royalties\n/// @dev Interface for the ERC2981 - Token Royalty standard\ninterface IERC2981Royalties {\n  /// @notice Called with the sale price to determine how much royalty\n  //          is owed and to whom.\n  /// @param _tokenId - the NFT asset queried for royalty information\n  /// @param _value - the sale price of the NFT asset specified by _tokenId\n  /// @return _receiver - address of who should be sent the royalty payment\n  /// @return _royaltyAmount - the royalty payment amount for value sale price\n  function royaltyInfo(uint256 _tokenId, uint256 _value) external view returns (address _receiver, uint256 _royaltyAmount);\n}\n"
    },
    "contracts/RandomTokenIdV3.sol": {
      "content": "\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.11;\r\n \r\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\r\nimport './Randomness.sol';\r\nimport './SlothVDF.sol';\r\n \r\ncontract RandomTokenIdv1 is ERC721  {\r\n    \r\n    using Randomness for Randomness.RNG;\r\n     \r\n    Randomness.RNG private _rng;\r\n\r\n   uint256 public editionSize = 0;\r\n    uint16[100] public ids;\r\n    uint16 private index;\r\n    uint256 public randomNumber = 0;\r\n     mapping(address => uint256) public seeds;\r\n    uint256 public prime = 432211379112113246928842014508850435796007;\r\n    uint256 public iterations = 1000;\r\n \r\n    constructor() ERC721('RandomIdv1', 'RNDMv1') {}\r\n \r\n     function mint(address[] calldata _to, uint256 proof) external {\r\n        require(SlothVDF.verify(proof, seeds[msg.sender], prime, iterations), 'Invalid proof');\r\n \r\n        uint256 _randomness = proof;\r\n        uint256 _random;\r\n        for (uint256 i = 0; i < _to.length; i++) {\r\n            (_randomness, _random) = _rng.getRandom(_randomness);\r\n            _safeMint(_to[i], _pickRandomUniqueId(_random));\r\n        }\r\n    }\r\n \r\n    function _pickRandomUniqueId(uint256 random) private returns (uint256 id) {\r\n        uint256 len = ids.length - index++;\r\n        require(len > 0, 'no ids left');\r\n        uint256 randomIndex = random % len;\r\n        id = ids[randomIndex] != 0 ? ids[randomIndex] : randomIndex;\r\n        ids[randomIndex] = uint16(ids[len - 1] == 0 ? len - 1 : ids[len - 1]);\r\n        ids[len - 1] = 0;\r\n    }\r\n       //seed is generated using sender address\r\n    function createSeed() external payable returns(uint) {\r\n        // commit funds\r\n                seeds[msg.sender] = uint256(keccak256(abi.encodePacked(msg.sender, block.timestamp, blockhash(block.number - 1))));\r\n                    }\r\n \r\n    function prove(uint256 proof) external returns(uint) {\r\n        // see if the proof is valid for the seed associated with the address\r\n        require(SlothVDF.verify(proof, seeds[msg.sender], prime, iterations), 'Invalid proof');\r\n \r\n        // use the proof as a provable random number\r\n         randomNumber = proof;\r\n    }\r\n}"
    },
    "contracts/Randomness.sol": {
      "content": "\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.11;\r\n \r\nlibrary Randomness {\r\n \r\n    // memory struct for rand\r\n    struct RNG {\r\n        uint256 seed;\r\n        uint256 nonce;\r\n    }\r\n \r\n    /// @dev get a random number\r\n    function getRandom(RNG storage _rng) external returns (uint256 randomness, uint256 random) {\r\n        return _getRandom(_rng, 0, 2**256 - 1, _rng.seed);\r\n    }\r\n \r\n    /// @dev get a random number\r\n    function getRandom(RNG storage _rng, uint256 _randomness) external returns (uint256 randomness, uint256 random) {\r\n        return _getRandom(_rng, _randomness, 2**256 - 1, _rng.seed);\r\n    }\r\n \r\n    /// @dev get a random number passing in a custom seed\r\n    function getRandom(\r\n        RNG storage _rng,\r\n        uint256 _randomness,\r\n        uint256 _seed\r\n    ) external returns (uint256 randomness, uint256 random) {\r\n        return _getRandom(_rng, _randomness, 2**256 - 1, _seed);\r\n    }\r\n \r\n    /// @dev get a random number in range (0, _max)\r\n    function getRandomRange(\r\n        RNG storage _rng,\r\n        uint256 _max\r\n    ) external returns (uint256 randomness, uint256 random) {\r\n        return _getRandom(_rng, 0, _max, _rng.seed);\r\n    }\r\n \r\n    /// @dev get a random number in range (0, _max)\r\n    function getRandomRange(\r\n        RNG storage _rng,\r\n        uint256 _randomness,\r\n        uint256 _max\r\n    ) external returns (uint256 randomness, uint256 random) {\r\n        return _getRandom(_rng, _randomness, _max, _rng.seed);\r\n    }\r\n \r\n    /// @dev get a random number in range (0, _max) passing in a custom seed\r\n    function getRandomRange(\r\n        RNG storage _rng,\r\n        uint256 _randomness,\r\n        uint256 _max,\r\n        uint256 _seed\r\n    ) external returns (uint256 randomness, uint256 random) {\r\n        return _getRandom(_rng, _randomness, _max, _seed);\r\n    }\r\n \r\n    /// @dev fullfill a random number request for the given inputs, incrementing the nonce, and returning the random number\r\n    function _getRandom(\r\n        RNG storage _rng,\r\n        uint256 _randomness,\r\n        uint256 _max,\r\n        uint256 _seed\r\n    ) internal returns (uint256 randomness, uint256 random) {\r\n        // if the randomness is zero, we need to fill it\r\n        if (_randomness <= 0) {\r\n            // increment the nonce in case we roll over\r\n            _randomness = uint256(\r\n                keccak256(\r\n                    abi.encodePacked(_seed, _rng.nonce++, block.timestamp, msg.sender, blockhash(block.number - 1))\r\n                )\r\n            );\r\n        }\r\n        // mod to the requested range\r\n        random = _randomness % _max;\r\n        // shift bits to the right to get a new random number\r\n        randomness = _randomness >>= 4;\r\n    }\r\n}"
    },
    "contracts/SlothVDF.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// https://eprint.iacr.org/2015/366.pdf\r\n \r\npragma solidity ^0.8.11;\r\n \r\nlibrary SlothVDF {\r\n \r\n    /// @dev pow(base, exponent, modulus)\r\n    /// @param base base\r\n    /// @param exponent exponent\r\n    /// @param modulus modulus\r\n    function bexmod(\r\n        uint256 base,\r\n        uint256 exponent,\r\n        uint256 modulus\r\n    ) internal pure returns (uint256) {\r\n        uint256 _result = 1;\r\n        uint256 _base = base;\r\n        for (; exponent > 0; exponent >>= 1) {\r\n            if (exponent & 1 == 1) {\r\n                _result = mulmod(_result, _base, modulus);\r\n            }\r\n \r\n            _base = mulmod(_base, _base, modulus);\r\n        }\r\n        return _result;\r\n    }\r\n \r\n    /// @dev compute sloth starting from seed, over prime, for iterations\r\n    /// @param _seed seed\r\n    /// @param _prime prime\r\n    /// @param _iterations number of iterations\r\n    /// @return sloth result\r\n    function compute(\r\n        uint256 _seed,\r\n        uint256 _prime,\r\n        uint256 _iterations\r\n    ) internal pure returns (uint256) {\r\n        uint256 _exponent = (_prime + 1) >> 2;\r\n        _seed %= _prime;\r\n        for (uint256 i; i < _iterations; ++i) {\r\n            _seed = bexmod(_seed, _exponent, _prime);\r\n        }\r\n        return _seed;\r\n    }\r\n     \r\n    /// @dev verify sloth result proof, starting from seed, over prime, for iterations\r\n    /// @param _proof result\r\n    /// @param _seed seed\r\n    /// @param _prime prime\r\n    /// @param _iterations number of iterations\r\n    /// @return true if y is a quadratic residue modulo p\r\n    function verify(\r\n        uint256 _proof,\r\n        uint256 _seed,\r\n        uint256 _prime,\r\n        uint256 _iterations\r\n    ) internal pure returns (bool) {\r\n        for (uint256 i; i < _iterations; ++i) {\r\n            _proof = mulmod(_proof, _proof, _prime);\r\n        }\r\n        _seed %= _prime;\r\n        if (_seed == _proof) return true;\r\n        if (_prime - _seed == _proof) return true;\r\n        return false;\r\n    }\r\n}"
    },
    "contracts/RandomVDF.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.11;\r\n \r\nimport './SlothVDF.sol';\r\n \r\ncontract RandomVDFv1  {\r\n     \r\n    // large prime\r\n    uint256 public prime = 432211379112113246928842014508850435796007;\r\n    // adjust for block finality\r\n    uint256 public iterations = 1000;\r\n    // increment nonce to increase entropy\r\n    uint256 private nonce;\r\n    // address -> vdf seed\r\n    mapping(address => uint256) public seeds;\r\n \r\n    function createSeed() external payable {\r\n        // commit funds/tokens/etc here\r\n        // create a pseudo random seed as the input\r\n        seeds[msg.sender] = uint256(keccak256(abi.encodePacked(msg.sender, nonce++, block.timestamp, blockhash(block.number - 1))));\r\n    }\r\n \r\n    function prove(uint256 proof) external {\r\n        // see if the proof is valid for the seed associated with the address\r\n        require(SlothVDF.verify(proof, seeds[msg.sender], prime, iterations), 'Invalid proof');\r\n \r\n        // use the proof as a provable random number\r\n        uint256 _random = proof;\r\n    }\r\n}"
    },
    "contracts/RaffleNft.sol": {
      "content": "//bunyNFt\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.11;\r\n\r\nimport { ERC721Upgradeable } from '@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol';\r\nimport {  IERC165Upgradeable } from '@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol';\r\nimport { OwnableUpgradeable } from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\r\nimport { CountersUpgradeable } from '@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol';\r\nimport { AddressUpgradeable } from '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\r\nimport { SharedNFTLogic } from './SharedNFTLogic.sol';\r\nimport { IEditionSingleMintable } from './IEditionSingleMintable.sol';\r\nimport \"./SlothVDF.sol\";\r\n\r\ncontract RaffleNft is ERC721Upgradeable, IEditionSingleMintable,  OwnableUpgradeable {\r\n  using CountersUpgradeable for CountersUpgradeable.Counter;\r\n  SharedNFTLogic private immutable sharedNFTLogic;\r\n  CountersUpgradeable.Counter private atEditionId;\r\n  event RaffleStarted(address minter, uint256 startTime);\r\n  event EditionSold(uint256 price, address owner);\r\n  event WinnerPicked(address payable winner, uint256 prize, uint256 winningNumber);\r\n  string public description;\r\n  string public animationUrl;\r\n  string public imageUrl;\r\n  uint256 public editionSize;\r\n  mapping(address => bool) allowedMinters;\r\n  uint256 public salePrice;\r\n  uint256 public minPlayers;\r\n  bool public active = false;\r\n  uint256 public startTime;\r\n  uint256 public EntryCount = 0;\r\n  address payable[] public players;\r\n  address payable[] public RaffleWinner;\r\n  uint256 public prime = 0;\r\n  uint256 public iterations = 0;\r\n  uint256 private nonce = 0;\r\n  uint256 public randomNumber = 0;\r\n  uint256 public winningNumber = 0;\r\n    Entry[] private entry;\r\n\r\n  // Mapping to retrieve Array index from address or name\r\n  mapping(address => uint256) private addressToIndex;\r\n  mapping(string => uint256) private playerToIndex;\r\n\r\n  // address -> random number seed\r\n  mapping(address => uint256) public seed;\r\n\r\n  struct Entry {\r\n    address player;\r\n    uint256 EntryNumber;\r\n  }\r\n\r\n  constructor( SharedNFTLogic _sharedNFTLogic) {\r\n    sharedNFTLogic = _sharedNFTLogic;\r\n      \r\n       }\r\n\r\n  function initialize(\r\n    address _owner,\r\n    string memory _name,\r\n    string memory _symbol,\r\n    string memory _description,\r\n    string memory _animationUrl,\r\n    string memory _imageUrl,\r\n    uint256 _editionSize,\r\n    uint256 _salePrice,\r\n    uint256 _minPlayers,\r\n    uint256 _prime,\r\n    uint256 _iterations\r\n\r\n  ) public initializer {\r\n    __ERC721_init(_name, _symbol);\r\n    __Ownable_init();\r\n    // Set ownership to original sender of contract call\r\n    transferOwnership(_owner);\r\n    description = _description;\r\n    animationUrl = _animationUrl;\r\n    imageUrl = _imageUrl;\r\n    editionSize = _editionSize;\r\n    salePrice = _salePrice;\r\n    minPlayers = _minPlayers;\r\n    prime = _prime;\r\n    iterations = _iterations;\r\n    atEditionId.increment();\r\n  }\r\n\r\n  /// @dev returns the number of minted tokens within the edition\r\n  function totalSupply() public view returns (uint256) {\r\n    return atEditionId.current() - 1;\r\n  }\r\n\r\n  \r\n // return balance in wei\r\n    function getBalance() public view returns(uint){\r\n        return address(this).balance;\r\n    }\r\n    // return prize balance\r\n     function getPrize() public view returns(uint){\r\n        return address(this).balance * 90 / 100;\r\n    }\r\n\r\n    function houseFee() public view returns(uint) {\r\n        return address(this).balance * 10 / 100;\r\n    }\r\n\r\n\r\n\r\n        //seed is generated using sender address\r\n    function createSeed() external payable returns(uint256) {\r\n        // commit funds\r\n                seed[msg.sender] = uint256(keccak256(abi.encodePacked(msg.sender, nonce++, block.timestamp, blockhash(block.number - 1))));\r\n                \r\n    }\r\n \r\n    function prove(uint256 proof) external returns(uint) {\r\n        // see if the proof is valid for the seed associated with the address\r\n        require(SlothVDF.verify(proof, seed[msg.sender], prime, iterations), 'Invalid proof');\r\n \r\n        // use the proof as a provable random number\r\n         randomNumber = proof;\r\n    }\r\n\r\n    // provable random number used as seed to generate additional random number\r\n    function random() internal view returns(uint){\r\n       return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, randomNumber)));\r\n    }\r\n    // array of player addresses\r\n     function getPlayers() public view returns(address payable[] memory) {\r\n        return players;\r\n    }\r\n\r\n     function readAllEntries() public view  returns (Entry[] memory) {\r\n    Entry[] memory result = new Entry[](EntryCount);\r\n    for (uint256 i = 0; i < EntryCount; i++) {\r\n      result[i] = entry[i];\r\n    }\r\n    return result;\r\n  }\r\n  \r\n\r\n    function pickWinner() external payable returns(uint256){\r\n        require (players.length >= minPlayers, \"Define minimum player number\");\r\n        require (totalSupply() >= editionSize, \"Raffle must complete before picking winner\");\r\n        uint r = random();\r\n        address payable winner;\r\n        uint index = r % editionSize;\r\n        winner = players[index]; \r\n        uint winnerPrize = getPrize();\r\n        winner.transfer(getPrize());\r\n        players = new address payable[](0);\r\n        withdraw();\r\n        RaffleWinner.push(payable(winner));\r\n        winningNumber = index;\r\n        emit WinnerPicked(winner, winnerPrize, winningNumber);\r\n        return winningNumber;\r\n\r\n    }\r\n\r\n\r\n  function getWinner() public view returns(address payable[] memory) {\r\n        return RaffleWinner;\r\n    }\r\n\r\n\r\n\r\n  function purchase() external payable returns (uint256) {\r\n    require(active, \"Raffle has not started. Owner must setApprovedMinter\");\r\n    require(msg.value == salePrice, \"No soup for you!\");\r\n    address[] memory toMint = new address[](1);\r\n    toMint[0] = msg.sender;\r\n    players.push(payable(msg.sender));\r\n    EntryCount ++;\r\n    Entry memory x = Entry(msg.sender, EntryCount);\r\n    entry.push(x);\r\n    emit EditionSold(salePrice, msg.sender);\r\n    return _mintEditions(toMint);\r\n  }\r\n\r\n\r\n  function _isAllowedToMint() internal view returns (bool) {\r\n    if (owner() == msg.sender) {\r\n      return true;\r\n    }\r\n    if (allowedMinters[address(0x0)]) {\r\n      return true;\r\n    }\r\n    return allowedMinters[msg.sender];\r\n  }\r\n\r\n  function mintEdition(address to) external override returns (uint256) {\r\n    require(_isAllowedToMint(), 'Needs to be an allowed minter');\r\n    address[] memory toMint = new address[](1);\r\n    toMint[0] = to;\r\n    return _mintEditions(toMint);\r\n  }\r\n\r\n  function mintEditions(address[] memory recipients) external override returns (uint256) {\r\n    require(_isAllowedToMint(), 'Needs to be an allowed minter');\r\n    return _mintEditions(recipients);\r\n  }\r\n\r\n  function owner() public view override(OwnableUpgradeable, IEditionSingleMintable) returns (address) {\r\n    return super.owner();\r\n  }\r\n  // enable/disable raffle\r\n  function disableRaffle() public onlyOwner {\r\n     active = false;\r\n  }\r\n  // helper function starts raffle once setApprovedMinter. \r\n  function enableRaffle() public onlyOwner {\r\n      active = true;\r\n    }\r\n  // set contract address as Approved minter\r\n  // set active state to false\r\n  // log and emit current time\r\n  function setApprovedMinter(address minter, bool allowed) public onlyOwner {\r\n    allowedMinters[minter] = allowed;\r\n    enableRaffle();\r\n    startTime = block.timestamp;\r\n    emit RaffleStarted(minter, startTime);\r\n  }\r\n\r\n  /// Returns the number of editions allowed to mint (max_uint256 when open edition)\r\n  function numberCanMint() public view override returns (uint256) {\r\n    // Return max int if open edition\r\n    if (editionSize == 0) {\r\n      return type(uint256).max;\r\n    }\r\n    // atEditionId is one-indexed hence the need to remove one here\r\n    return editionSize + 1 - atEditionId.current();\r\n  }\r\n\r\n  /**\r\n      @dev Private function to mint als without any access checks.\r\n           Called by the public edition minting functions.\r\n     */\r\n  function _mintEditions(address[] memory recipients) internal returns (uint256) {\r\n    uint256 startAt = atEditionId.current();\r\n    uint256 endAt = startAt + recipients.length - 1;\r\n    require(editionSize == 0 || endAt <= editionSize, 'Sold out');\r\n    while (atEditionId.current() <= endAt) {\r\n      _mint(recipients[atEditionId.current() - startAt], atEditionId.current());\r\n      atEditionId.increment();\r\n    }\r\n    return atEditionId.current();\r\n  }\r\n\r\n \r\n      function withdraw() internal onlyOwner {\r\n    // No need for gas limit to trusted address.\r\n    AddressUpgradeable.sendValue(payable(owner()), address(this).balance * 20 / 100);\r\n  }\r\n\r\n\r\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\r\n    require(_exists(tokenId), 'No token');\r\n\r\n    return sharedNFTLogic.createMetadataEdition(name(), description, imageUrl, animationUrl, tokenId, editionSize);\r\n  }\r\n\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/SharedNFTLogic.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.7;\n\nimport { StringsUpgradeable } from '@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol';\nimport { Base64 } from 'base64-sol/base64.sol';\nimport { IPublicSharedMetadata } from './IPublicSharedMetadata.sol';\n\n/// Shared NFT logic for rendering metadata associated with editions\n/// @dev Can safely be used for generic base64Encode and numberToString functions\ncontract SharedNFTLogic is IPublicSharedMetadata {\n  /// @param unencoded bytes to base64-encode\n  function base64Encode(bytes memory unencoded) public pure override returns (string memory) {\n    return Base64.encode(unencoded);\n  }\n\n  /// Proxy to openzeppelin's toString function\n  /// @param value number to return as a string\n  function numberToString(uint256 value) public pure override returns (string memory) {\n    return StringsUpgradeable.toString(value);\n  }\n\n  /// Generate edition metadata from storage information as base64-json blob\n  /// Combines the media data and metadata\n  /// @param name Name of NFT in metadata\n  /// @param description Description of NFT in metadata\n  /// @param imageUrl URL of image to render for edition\n  /// @param animationUrl URL of animation to render for edition\n  /// @param tokenOfEdition Token ID for specific token\n  /// @param editionSize Size of entire edition to show\n  function createMetadataEdition(\n    string memory name,\n    string memory description,\n    string memory imageUrl,\n    string memory animationUrl,\n    uint256 tokenOfEdition,\n    uint256 editionSize\n  ) external pure returns (string memory) {\n    string memory _tokenMediaData = tokenMediaData(imageUrl, animationUrl, tokenOfEdition);\n    bytes memory json = createMetadataJSON(name, description, _tokenMediaData, tokenOfEdition, editionSize);\n    return encodeMetadataJSON(json);\n  }\n\n  /// Function to create the metadata json string for the nft edition\n  /// @param name Name of NFT in metadata\n  /// @param description Description of NFT in metadata\n  /// @param mediaData Data for media to include in json object\n  /// @param tokenOfEdition Token ID for specific token\n  /// @param editionSize Size of entire edition to show\n  function createMetadataJSON(\n    string memory name,\n    string memory description,\n    string memory mediaData,\n    uint256 tokenOfEdition,\n    uint256 editionSize\n  ) public pure returns (bytes memory) {\n    bytes memory editionSizeText;\n    if (editionSize > 0) {\n      editionSizeText = abi.encodePacked('/', numberToString(editionSize));\n    }\n    return\n      abi.encodePacked(\n        '{\"name\": \"',\n        name,\n        ' ',\n        numberToString(tokenOfEdition),\n        editionSizeText,\n        '\", \"',\n        'description\": \"',\n        description,\n        '\", \"',\n        mediaData,\n        'properties\": {\"number\": ',\n        numberToString(tokenOfEdition),\n        ', \"name\": \"',\n        name,\n        '\"}}'\n      );\n  }\n\n  /// Encodes the argument json bytes into base64-data uri format\n  /// @param json Raw json to base64 and turn into a data-uri\n  function encodeMetadataJSON(bytes memory json) public pure override returns (string memory) {\n    return string(abi.encodePacked('data:application/json;base64,', base64Encode(json)));\n  }\n\n  /// Generates edition metadata from storage information as base64-json blob\n  /// Combines the media data and metadata\n  /// @param imageUrl URL of image to render for edition\n  /// @param animationUrl URL of animation to render for edition\n  function tokenMediaData(string memory imageUrl, string memory animationUrl, uint256 tokenOfEdition) public pure returns (string memory) {\n    bool hasImage = bytes(imageUrl).length > 0;\n    bool hasAnimation = bytes(animationUrl).length > 0;\n    if (hasImage && hasAnimation) {\n      return\n        string(\n          abi.encodePacked(\n            'image\": \"',\n            imageUrl,\n            '?id=',\n            numberToString(tokenOfEdition),\n            '\", \"animation_url\": \"',\n            animationUrl,\n            '?id=',\n            numberToString(tokenOfEdition),\n            '\", \"'\n          )\n        );\n    }\n    if (hasImage) {\n      return string(abi.encodePacked('image\": \"', imageUrl, '?id=', numberToString(tokenOfEdition), '\", \"'));\n    }\n    if (hasAnimation) {\n      return string(abi.encodePacked('animation_url\": \"', animationUrl, '?id=', numberToString(tokenOfEdition), '\", \"'));\n    }\n\n    return '';\n  }\n}\n"
    },
    "contracts/IEditionSingleMintable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.6;\n\ninterface IEditionSingleMintable {\n  function mintEdition(address to) external returns (uint256);\n\n  function mintEditions(address[] memory to) external returns (uint256);\n\n  function numberCanMint() external view returns (uint256);\n\n  function owner() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "base64-sol/base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/// @title Base64\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides functions for encoding/decoding base64\nlibrary Base64 {\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    bytes  internal constant TABLE_DECODE = hex\"0000000000000000000000000000000000000000000000000000000000000000\"\n                                            hex\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\"\n                                            hex\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\"\n                                            hex\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\";\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return '';\n\n        // load the table into memory\n        string memory table = TABLE_ENCODE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n                // read 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n        }\n\n        return result;\n    }\n\n    function decode(string memory _data) internal pure returns (bytes memory) {\n        bytes memory data = bytes(_data);\n\n        if (data.length == 0) return new bytes(0);\n        require(data.length % 4 == 0, \"invalid base64 decoder input\");\n\n        // load the table into memory\n        bytes memory table = TABLE_DECODE;\n\n        // every 4 characters represent 3 bytes\n        uint256 decodedLen = (data.length / 4) * 3;\n\n        // add some extra buffer at the end required for the writing\n        bytes memory result = new bytes(decodedLen + 32);\n\n        assembly {\n            // padding with '='\n            let lastBytes := mload(add(data, mload(data)))\n            if eq(and(lastBytes, 0xFF), 0x3d) {\n                decodedLen := sub(decodedLen, 1)\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\n                    decodedLen := sub(decodedLen, 1)\n                }\n            }\n\n            // set the actual output length\n            mstore(result, decodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 4 characters at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n               // read 4 characters\n               dataPtr := add(dataPtr, 4)\n               let input := mload(dataPtr)\n\n               // write 3 bytes\n               let output := add(\n                   add(\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\n                   add(\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\n                    )\n                )\n                mstore(resultPtr, shl(232, output))\n                resultPtr := add(resultPtr, 3)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/IPublicSharedMetadata.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.6;\n\n/// Shared public library for on-chain NFT functions\ninterface IPublicSharedMetadata {\n  /// @param unencoded bytes to base64-encode\n  function base64Encode(bytes memory unencoded) external pure returns (string memory);\n\n  /// Encodes the argument json bytes into base64-data uri format\n  /// @param json Raw json to base64 and turn into a data-uri\n  function encodeMetadataJSON(bytes memory json) external pure returns (string memory);\n\n  /// Proxy to openzeppelin's toString function\n  /// @param value number to return as a string\n  function numberToString(uint256 value) external pure returns (string memory);\n}\n"
    },
    "contracts/erc721Dynamic.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.6;\n\nimport { ERC721Upgradeable } from '@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol';\nimport { IERC2981Upgradeable, IERC165Upgradeable } from '@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol';\nimport { OwnableUpgradeable } from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport { CountersUpgradeable } from '@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol';\nimport { AddressUpgradeable } from '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\nimport { SharedNFTLogic } from './SharedNFTLogic.sol';\nimport { IEditionSingleMintable } from './IEditionSingleMintable.sol';\n\n\ncontract erc721Dynamic is ERC721Upgradeable, IEditionSingleMintable, IERC2981Upgradeable, OwnableUpgradeable {\n  using CountersUpgradeable for CountersUpgradeable.Counter;\n  event PriceChanged(uint256 amount);\n  event BunyMint(uint256 indexed tokenId);\n  event EditionSold(uint256 price, address owner);\n  event TimeOut(bool paused, uint time);  \n  event PublicMint(bool paused, uint time);  \n  event MaxMintChanged(uint256 maxMint);\n  CountersUpgradeable.Counter private atTokenId;\n  string public baseURI;\n  string public description;\n  uint256 public editionSize;\n  uint256 public currentSupply;\n  bool public paused = false;\n  bool public publicMint = false; \n  uint256 royaltyBPS;\n  uint256 public salePrice;\n  uint256 public preSalePrice;\n  uint256 public maxMint;\n  address payable[] public holders;\n  address payable [] public whitelistWallets;\n  mapping(address => bool) allowedMinters;\n  mapping(address => bool) public whitelist;\n\n\n\n  \n  SharedNFTLogic private immutable sharedNFTLogic;\n\n\nconstructor(\n    SharedNFTLogic _sharedNFTLogic) {\n    sharedNFTLogic = _sharedNFTLogic;\n  }\n\n\n  \n  function initialize(\n    address _owner,\n    string memory _baseURI,\n    string memory _name,\n    string memory _symbol,\n    string memory _description,\n    uint256 _editionSize,\n    uint256 _royaltyBPS\n  ) public initializer {\n    __ERC721_init(_name, _symbol);\n    __Ownable_init();\n    transferOwnership(_owner);\n    baseURI = _baseURI;\n    description = _description;\n    editionSize = _editionSize;\n    royaltyBPS = _royaltyBPS;\n    atTokenId.increment();\n  }\n\n  \nfunction totalSupply() public view returns (uint256) {\n    return atTokenId.current() - 1;\n  }\n\n\n   modifier isWhitelisted(address _address) {\n      require(whitelist[_address], \"Whitelist: You need to be whitelisted\");\n      _;\n    }\n\nfunction addUser(address _addressToWhitelist) public onlyOwner {\n      whitelist[_addressToWhitelist] = true;\n          whitelistWallets.push(payable(_addressToWhitelist));\n         }\n\nfunction verifyUser(address _whitelistedAddress) public view returns(bool) {\n      bool userIsWhitelisted = whitelist[_whitelistedAddress];\n      return userIsWhitelisted;\n    }\n\n\nfunction addManyToWhitelist(address[] memory _beneficiaries) public onlyOwner {\n    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n      whitelist[_beneficiaries[i]] = true;\n                 whitelistWallets.push(payable(_beneficiaries[i]));\n\n    }\n\n  }\n\n\nfunction setPaused(bool _state) public onlyOwner {\n    paused = _state;\n    emit TimeOut(paused, block.timestamp);\n  }\n\n  function setMaxMint(uint256 _maxMint) external onlyOwner {\n    maxMint = _maxMint;\n    emit MaxMintChanged(maxMint);\n  }\n   \nfunction getHolders() public view returns(address payable[] memory) {\n        return holders;\n    }\n\nfunction getWhitelistWallets() public view returns(address payable[] memory) {\n        return whitelistWallets;\n    }\n\n\nfunction publicMintActive(bool _publicMint) public onlyOwner {\n    publicMint = _publicMint;\n    emit PublicMint(publicMint, block.timestamp);\n  }\n\n\nfunction presale() external payable returns (uint256) {\n    require(!paused, \"Down the rabbit hole. Contract is paused!\");\n    require(whitelist[msg.sender], \"Requires user is whitelisted\");  \n    require(atTokenId.current() <= (editionSize - maxMint), \"Max mint limit per wallet reached!\");\n    require(preSalePrice > 0, 'Not for sale');\n    require(msg.value == preSalePrice, 'Wrong price');\n    address[] memory toMint = new address[](1);\n    toMint[0] = msg.sender;\n    holders.push(payable(msg.sender));\n    emit EditionSold(preSalePrice, msg.sender);\n    return _mintEditions(toMint);\n  }\n\nfunction purchase() external payable returns (uint256) {\n    require(!paused, \"Down the rabbit hole. Contract is paused!\");\n    require(publicMint,\"Public mint not enabled\" );\n    require(atTokenId.current() <= (editionSize - maxMint), \"Max mint limit per wallet reached!\");\n    require(salePrice > 0, 'Not for sale');\n    require(msg.value == salePrice, 'Wrong price');\n    address[] memory toMint = new address[](1);\n    toMint[0] = msg.sender;\n    holders.push(payable(msg.sender));\n    emit EditionSold(salePrice, msg.sender);\n    return _mintEditions(toMint);\n  }\n\n\nfunction setSalePrice(uint256 _salePrice) external onlyOwner {\n    salePrice = _salePrice;\n    emit PriceChanged(salePrice);\n  }\n\nfunction setPreSalePrice(uint256 _preSalePrice) external onlyOwner {\n    preSalePrice = _preSalePrice;\n    emit PriceChanged(salePrice);\n  }\n\n \n\n function withdraw() external onlyOwner {\n        AddressUpgradeable.sendValue(payable(owner()), address(this).balance);\n  }\n\n function _isAllowedToMint() internal view returns (bool) {\n    if (owner() == msg.sender) {\n      return true;\n    }\n    if (allowedMinters[address(0x0)]) {\n      return true;\n    }\n    return allowedMinters[msg.sender];\n  }\n\nfunction mintEdition(address to) external override returns (uint256) {\n    require(!paused, \"Down the rabbit hole. Contract is paused!\");\n    require(_isAllowedToMint(), 'Needs to be an allowed minter');\n    address[] memory toMint = new address[](1);\n    toMint[0] = to;\n    return _mintEditions(toMint);\n  }\n\nfunction mintEditions(address[] memory recipients) external override returns (uint256) {\n    require(!paused, \"Down the rabbit hole. Contract is paused!\");\n    require(_isAllowedToMint(), 'Needs to be an allowed minter');\n    return _mintEditions(recipients);\n  }\n\nfunction owner() public view override(OwnableUpgradeable, IEditionSingleMintable) returns (address) {\n    return super.owner();\n  }\n\nfunction setApprovedMinter(address minter, bool allowed) public onlyOwner {\n    allowedMinters[minter] = allowed;\n  }\n\nfunction updateEditionURLs(string memory _baseURI) public onlyOwner {\n    baseURI = _baseURI;\n  }\n\n  \nfunction numberCanMint() public view override returns (uint256) {\n    if (editionSize == 0) {\n      return type(uint256).max;\n    }\n    return editionSize + 1 - atTokenId.current();\n  }\n\n\n\nfunction _mintEditions(address[] memory recipients) internal returns (uint256) {\n    require(!paused, \"Down the rabbit hole. Contract is paused!\");\n    uint256 startAt = atTokenId.current();\n    uint256 endAt = startAt + recipients.length - 1;\n    require(editionSize == 0 || endAt <= editionSize, 'Sold out');\n    while (atTokenId.current() <= endAt) {\n      _mint(recipients[atTokenId.current() - startAt], atTokenId.current());\n      atTokenId.increment();\n      emit BunyMint(atTokenId.current());\n    }\n    return atTokenId.current();\n  }\n\nfunction getURIs() public view returns (string memory) {\n    return (baseURI);\n  }\n\nfunction royaltyInfo(uint256, uint256 _salePrice) external view override returns (address receiver, uint256 royaltyAmount) {\n    if (owner() == address(0x0)) {\n      return (owner(), 0);\n    }\n    return (owner(), (_salePrice * royaltyBPS) / 10_000);\n  }\n\nfunction setBaseURI(string memory _newBaseURI) public onlyOwner {\n    baseURI = _newBaseURI;\n  }\n\nfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n    bytes32 tokenIdBytes;\n    if (tokenId == 0) {\n      tokenIdBytes = '0';\n    } else {\n      uint256 value = tokenId;\n      while (value > 0) {\n        tokenIdBytes = bytes32(uint256(tokenIdBytes) / (2 ** 8));\n        tokenIdBytes |= bytes32(((value % 10) + 48) * 2 ** (8 * 31));\n        value /= 10;\n      }\n    }\n\n    bytes memory prefixBytes = bytes(baseURI);\n    bytes memory tokenURIBytes = new bytes(prefixBytes.length + tokenIdBytes.length);\n    uint8 i;\n    uint8 index = 0;\n    for (i = 0; i < prefixBytes.length; i++) {\n      tokenURIBytes[index] = prefixBytes[i];\n      index++;\n    }\n    for (i = 0; i < tokenIdBytes.length; i++) {\n      tokenURIBytes[index] = tokenIdBytes[i];\n      index++;\n    }\n\n    return string(tokenURIBytes);\n  }\n\nfunction supportsInterface(bytes4 interfaceId) public view override(ERC721Upgradeable, IERC165Upgradeable) returns (bool) {\n    return type(IERC2981Upgradeable).interfaceId == interfaceId || ERC721Upgradeable.supportsInterface(interfaceId);\n  }\n\n\n\n\nfunction OwnerOfToken(address _owner) public view returns (uint256[] memory) {\n    uint256 ownerTokenCount = balanceOf(_owner);\n    uint256[] memory ownedTokenIds = new uint256[](ownerTokenCount);\n    uint256 currentTokenId = 1;\n    uint256 ownedTokenIndex = 0;\n\n    while (ownedTokenIndex < ownerTokenCount && currentTokenId <= editionSize) {\n      address currentTokenOwner = ownerOf(currentTokenId);\n\n      if (currentTokenOwner == _owner) {\n        ownedTokenIds[ownedTokenIndex] = currentTokenId;\n\n        ownedTokenIndex++;\n      }\n\n      currentTokenId++;\n    }\n\n    return ownedTokenIds;\n  }\n\n\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"../extensions/ERC721EnumerableUpgradeable.sol\";\nimport \"../extensions/ERC721BurnableUpgradeable.sol\";\nimport \"../extensions/ERC721PausableUpgradeable.sol\";\nimport \"../../../access/AccessControlEnumerableUpgradeable.sol\";\nimport \"../../../utils/ContextUpgradeable.sol\";\nimport \"../../../utils/CountersUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev {ERC721} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *  - token ID and URI autogeneration\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n *\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\n */\ncontract ERC721PresetMinterPauserAutoIdUpgradeable is\n    Initializable, ContextUpgradeable,\n    AccessControlEnumerableUpgradeable,\n    ERC721EnumerableUpgradeable,\n    ERC721BurnableUpgradeable,\n    ERC721PausableUpgradeable\n{\n    function initialize(\n        string memory name,\n        string memory symbol,\n        string memory baseTokenURI\n    ) public virtual initializer {\n        __ERC721PresetMinterPauserAutoId_init(name, symbol, baseTokenURI);\n    }\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    CountersUpgradeable.Counter private _tokenIdTracker;\n\n    string private _baseTokenURI;\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * Token URIs will be autogenerated based on `baseURI` and their token IDs.\n     * See {ERC721-tokenURI}.\n     */\n    function __ERC721PresetMinterPauserAutoId_init(\n        string memory name,\n        string memory symbol,\n        string memory baseTokenURI\n    ) internal onlyInitializing {\n        __ERC721_init_unchained(name, symbol);\n        __Pausable_init_unchained();\n        __ERC721PresetMinterPauserAutoId_init_unchained(name, symbol, baseTokenURI);\n    }\n\n    function __ERC721PresetMinterPauserAutoId_init_unchained(\n        string memory,\n        string memory,\n        string memory baseTokenURI\n    ) internal onlyInitializing {\n        _baseTokenURI = baseTokenURI;\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return _baseTokenURI;\n    }\n\n    /**\n     * @dev Creates a new token for `to`. Its token ID will be automatically\n     * assigned (and available on the emitted {IERC721-Transfer} event), and the token\n     * URI autogenerated based on the base URI passed at construction.\n     *\n     * See {ERC721-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have minter role to mint\");\n\n        // We cannot just use balanceOf to create the new tokenId because tokens\n        // can be burned (destroyed), so we need a separate counter.\n        _mint(to, _tokenIdTracker.current());\n        _tokenIdTracker.increment();\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override(ERC721Upgradeable, ERC721EnumerableUpgradeable, ERC721PausableUpgradeable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(AccessControlEnumerableUpgradeable, ERC721Upgradeable, ERC721EnumerableUpgradeable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[48] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"./IERC721EnumerableUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\n    function __ERC721Enumerable_init() internal onlyInitializing {\n    }\n\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\n    }\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Upgradeable.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721Upgradeable.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[46] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"../../../utils/ContextUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be burned (destroyed).\n */\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\n    function __ERC721Burnable_init() internal onlyInitializing {\n    }\n\n    function __ERC721Burnable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _burn(tokenId);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"../../../security/PausableUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev ERC721 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC721PausableUpgradeable is Initializable, ERC721Upgradeable, PausableUpgradeable {\n    function __ERC721Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __ERC721Pausable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        require(!paused(), \"ERC721Pausable: token transfer while paused\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerableUpgradeable.sol\";\nimport \"./AccessControlUpgradeable.sol\";\nimport \"../utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n    function __AccessControlEnumerable_init() internal onlyInitializing {\n    }\n\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "contracts/RaffleFactory.sol": {
      "content": "///bunyRaffle\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.11;\r\n\r\nimport {ClonesUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\";\r\nimport {CountersUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\";\r\nimport \"./RaffleNft.sol\";\r\n\r\n\r\ncontract raffleFactory {\r\n    using CountersUpgradeable for CountersUpgradeable.Counter;\r\n    CountersUpgradeable.Counter private atContract;\r\n    address public implementation;\r\n    string  _name = \"Buny Raffle Infinity\";\r\n    string  _symbol = \"rBUNY\";\r\n    string  _animationUrl = \"https://ipfs.io/ipfs/Qmd94YsrsK5jPbi675XiwyLwMhcM6HS6MULC7mqQGMnXtW\";\r\n    uint256  _prime = 432211379112113246928842014508850435796007;\r\n    uint256  _iterations = 1337;\r\n    uint256 public collectionCount = 0;\r\n    event CreatedEdition(uint256 indexed editionId, address indexed creator, uint256 editionSize, address indexed editionContractAddress, uint256 minPlayers, uint256 salePrice);\r\n    Collection[] public collection;\r\n\r\n\r\n\r\n  struct Collection {\r\n    string _name;\r\n    address editionContractAddress;\r\n    uint256 _editionSize;\r\n    uint256 newId;\r\n    uint256 _minPlayers;\r\n    uint256 _salePrice;\r\n    string _imageUrl;\r\n  }\r\n\r\n\r\n\r\n    /// Initializes factory with address of implementation logic\r\n    constructor(address _implementation) {\r\n        implementation = _implementation;\r\n    }\r\n\r\n \r\n   \r\n    function createEdition(\r\n        //string memory _name,\r\n        //string memory _symbol,\r\n        string memory _description,\r\n        //string memory _animationUrl,\r\n        string memory _imageUrl,\r\n        uint256 _editionSize,\r\n        uint256 _salePrice,\r\n        uint256 _minPlayers\r\n        //uint256 _royaltyBPS\r\n    ) external returns (uint256) {\r\n        uint256 newId = atContract.current();\r\n        address newContract = ClonesUpgradeable.cloneDeterministic(\r\n            implementation,\r\n            bytes32(abi.encodePacked(newId))\r\n        );\r\n        RaffleNft(newContract).initialize(\r\n            msg.sender,\r\n            _name,\r\n            _symbol,\r\n            _description,\r\n            _animationUrl,\r\n            _imageUrl,\r\n            _editionSize,\r\n            _salePrice,\r\n            _minPlayers,\r\n            //_royaltyBPS,\r\n            _prime,\r\n            _iterations\r\n        );\r\n        emit CreatedEdition(newId, msg.sender,  _editionSize, newContract, _minPlayers, _salePrice );\r\n        // Returns the ID of the recently created minting contract\r\n        // Also increments for the next contract creation call\r\n        atContract.increment();\r\n         Collection memory x = Collection(_name, newContract, _editionSize, newId,  _minPlayers, _salePrice, _imageUrl);\r\n    collection.push(x);\r\n    collectionCount ++;\r\n        return newId;\r\n    }\r\n\r\n  function readAllCollections() public view  returns (Collection[] memory) {\r\n    Collection[] memory result = new Collection[](collectionCount);\r\n    for (uint256 i = 0; i < collectionCount; i++) {\r\n      result[i] = collection[i];\r\n    }\r\n    return result;\r\n  }\r\n\r\n    function getRaffleAtId(uint256 raffleId)\r\n        external\r\n        view\r\n        returns (RaffleNft)\r\n    {\r\n        return\r\n            RaffleNft(\r\n                ClonesUpgradeable.predictDeterministicAddress(\r\n                    implementation,\r\n                    bytes32(abi.encodePacked(raffleId)),\r\n                    address(this)\r\n                )\r\n            );\r\n    }\r\n\r\n\r\n  \r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary ClonesUpgradeable {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "contracts/dFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.6;\n\nimport { ClonesUpgradeable } from '@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol';\nimport { CountersUpgradeable } from '@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol';\nimport './erc721Dynamic.sol';\n\ncontract dFactory {\n  using CountersUpgradeable for CountersUpgradeable.Counter;\n    CountersUpgradeable.Counter private atContract;\n    address public implementation;\n    uint256 public collectionCount = 0;\n    event CreatedEdition(uint256 indexed editionId, address indexed creator, uint256 editionSize, address indexed editionContractAddress);\n    Collection[] public collection;\n\n \n\n  struct Collection {\n    string _name;\n    address editionContractAddress;\n\n  }\n\n\n  constructor(address _implementation) {\n    implementation = _implementation;\n  }\n\n\n\n  function readAllCollections() public view  returns (Collection[] memory) {\n    Collection[] memory result = new Collection[](collectionCount);\n    for (uint256 i = 0; i < collectionCount; i++) {\n      result[i] = collection[i];\n    }\n    return result;\n  }\n\n\n  function createEdition(\n    string memory _baseURI,\n    string memory _name,\n    string memory _symbol,\n    string memory _description,\n    uint256 _editionSize,\n    uint256 _royaltyBPS\n  ) external returns (uint256) {\n    uint256 newId = atContract.current();\n    address newContract = ClonesUpgradeable.cloneDeterministic(implementation, bytes32(abi.encodePacked(newId)));\n    erc721Dynamic(newContract).initialize(msg.sender, _baseURI, _name, _symbol, _description, _editionSize, _royaltyBPS);\n    emit CreatedEdition(newId, msg.sender, _editionSize, newContract);\n    atContract.increment();\n    Collection memory x = Collection(_name, newContract);\n    collection.push(x);\n    collectionCount ++;\n    return newId;\n  }\n\n\n\n\n\n  function getEditionAtId(uint256 editionId) external view returns (erc721Dynamic) {\n    return erc721Dynamic(ClonesUpgradeable.predictDeterministicAddress(implementation, bytes32(abi.encodePacked(editionId)), address(this)));\n  }\n}\n"
    },
    "contracts/BunyRaffleFactory.sol": {
      "content": "///bunyRaffle\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.11;\r\n\r\nimport {ClonesUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\";\r\nimport { OwnableUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport {CountersUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\";\r\nimport \"./BunyRaffleNft.sol\";\r\n\r\n\r\n\r\ncontract BunyRaffleFactory is OwnableUpgradeable {\r\n    using CountersUpgradeable for CountersUpgradeable.Counter;\r\n    CountersUpgradeable.Counter private atContract;\r\n    address public implementation;\r\n    string  _name = \"Buny Raffle 2023\";\r\n    string  _symbol = \"rBUNY\";\r\n    //string  _animationUrl = \"https://ipfs.io/ipfs/Qmd94YsrsK5jPbi675XiwyLwMhcM6HS6MULC7mqQGMnXtW\";\r\n    uint256  _prime = 432211379112113246928842014508850435796007;\r\n    address payable public _bunyBank;\r\n    uint256  _iterations = 1337;\r\n    uint256 public collectionCount = 0;\r\n    event CreatedEdition(uint256 indexed editionId, address indexed creator, uint256 editionSize, address indexed editionContractAddress, uint256 minPlayers, uint256 maxTokens, uint256 salePrice);\r\n    Collection[] public collection;\r\n\r\n\r\n\r\n  struct Collection {\r\n    string _name;\r\n    address editionContractAddress;\r\n    uint256 _editionSize;\r\n    uint256 newId;\r\n    uint256 _minPlayers;\r\n    uint256 _maxTokens;\r\n    uint256 _salePrice;\r\n    string _imageUrl;\r\n  }\r\n\r\n\r\n\r\n    /// Initializes factory with address of implementation logic\r\n    constructor(address _implementation, address payable bunyBank) {\r\n        implementation = _implementation;\r\n        _bunyBank = bunyBank;\r\n    }\r\n\r\n  function owner() public view override(OwnableUpgradeable) returns (address) {\r\n    return super.owner();\r\n  }\r\n\r\n   \r\n    function createEdition(\r\n        string memory _description,\r\n        string memory _imageUrl,\r\n        uint256 _editionSize,\r\n        uint256 _salePrice,\r\n        uint256 _minPlayers,\r\n        uint256 _maxTokens\r\n        ) external returns (uint256) {\r\n        uint256 newId = atContract.current();\r\n        address newContract = ClonesUpgradeable.cloneDeterministic(\r\n            implementation,\r\n            bytes32(abi.encodePacked(newId))\r\n        );\r\n        BunyRaffleNft(newContract).initialize(\r\n            msg.sender,\r\n            _name,\r\n            _symbol,\r\n            _description,\r\n            _imageUrl,\r\n            _editionSize,\r\n            _salePrice,\r\n            _minPlayers,\r\n            _bunyBank,\r\n            _maxTokens,\r\n            _prime,\r\n            _iterations\r\n        );\r\n        emit CreatedEdition(newId, msg.sender,  _editionSize, newContract, _minPlayers,  _maxTokens, _salePrice );\r\n         atContract.increment();\r\n         Collection memory x = Collection(_name, newContract, _editionSize, newId,  _minPlayers, _maxTokens, _salePrice, _imageUrl);\r\n    collection.push(x);\r\n    collectionCount ++;\r\n        return newId;\r\n    }\r\n   function setBunyBankAddress(address payable bunyBank) external onlyOwner {\r\n        require(bunyBank != address(0), \"Invalid BB address\");\r\n        _bunyBank = bunyBank;\r\n    }\r\n    \r\n\r\n  function readAllCollections() public view  returns (Collection[] memory) {\r\n    Collection[] memory result = new Collection[](collectionCount);\r\n    for (uint256 i = 0; i < collectionCount; i++) {\r\n      result[i] = collection[i];\r\n    }\r\n    return result;\r\n  }\r\n\r\n    function getRaffleAtId(uint256 raffleId)\r\n        external\r\n        view\r\n        returns (BunyRaffleNft)\r\n    {\r\n        return\r\n            BunyRaffleNft(\r\n                ClonesUpgradeable.predictDeterministicAddress(\r\n                    implementation,\r\n                    bytes32(abi.encodePacked(raffleId)),\r\n                    address(this)\r\n                )\r\n            );\r\n    }\r\n\r\n\r\n  \r\n}\r\n"
    },
    "contracts/BunyRaffleNft.sol": {
      "content": "//bunyNFt\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.11;\r\n\r\nimport { ERC721Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\r\nimport {ERC721EnumerableUpgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\";\r\nimport {  IERC721EnumerableUpgradeable } from \"@openzeppelin/contracts-upgradeable/interfaces/IERC721EnumerableUpgradeable.sol\";\r\nimport {  IERC721Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\r\n\r\nimport { OwnableUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport { CountersUpgradeable } from \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\";\r\nimport { AddressUpgradeable } from \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\nimport { SharedNFTLogic } from \"./SharedNFTLogic.sol\";\r\nimport { IEditionSingleMintable } from \"./IEditionSingleMintable.sol\";\r\nimport \"./SlothVDF.sol\";\r\n\r\ncontract BunyRaffleNft is ERC721Upgradeable, IEditionSingleMintable,  OwnableUpgradeable {\r\n  using CountersUpgradeable for CountersUpgradeable.Counter;\r\n  SharedNFTLogic private immutable sharedNFTLogic;\r\n  CountersUpgradeable.Counter private atEditionId;\r\n  event Rafflestarted(address minter, uint256 startTime);\r\n  event Editionsold(uint256 price, address owner, uint256 EntryCount, uint256 entryTime);\r\n  event WinnerPicked(address winner, uint256 winningNumber, uint256 prize);\r\n  string public description;\r\n  string public animationUrl;\r\n  string public imageUrl;\r\n  uint256 public editionSize;\r\n  uint256 public salePrice;\r\n  uint256 public minPlayers;\r\n  uint256 public maxTokens;\r\n  bool public active = false;\r\n  bool public winnerSelected = false;\r\n  bool public isComplete = false;\r\n  bool public isProof = false;\r\n  bool public prizeClaimed = false;\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n  uint256 public EntryCount = 0;\r\n  uint256 public prime = 0;\r\n  uint256 public iterations = 0;\r\n  uint256 private nonce = 0;\r\n  uint256 public randomNumber = 0;\r\n  uint256 public winningNumber = 0;\r\n  address payable public Winner;\r\n  address payable public bunyBank;\r\n  Entry[] private entry;\r\n  RaffleWinner[] public raffleWinner;\r\n \tuint256[] public nftTokenIds;\r\n  mapping(address => bool) public mintedTokens;\r\n  mapping(address => bool) public allowedMinters;\r\n  mapping(address => uint256) public seed;\r\n  mapping(address => bool) public isPlayer;\r\n\r\n\r\n  struct Entry {\r\n    address player;\r\n    uint256 EntryNumber;\r\n    uint256 entryTime;\r\n  }\r\n\r\n  struct RaffleWinner {\r\n    address payable winner;\r\n    uint256 winningTokenId;\r\n  }\r\n\r\n\r\n\r\n  constructor( SharedNFTLogic _sharedNFTLogic)  {\r\n    sharedNFTLogic = _sharedNFTLogic;\r\n      \r\n       }\r\n\r\n  function initialize(\r\n    address _owner,\r\n    string memory _name,\r\n    string memory _symbol,\r\n    string memory _description,\r\n    //string memory _animationUrl,\r\n    string memory _imageUrl,\r\n    uint256 _editionSize,\r\n    uint256 _salePrice,\r\n    uint256 _minPlayers,\r\n    address payable _bunyBank,\r\n    uint256 _maxTokens,\r\n    uint256 _prime,\r\n    uint256 _iterations\r\n\r\n  ) public initializer {\r\n    __ERC721_init(_name, _symbol);\r\n    __Ownable_init();\r\n    // Set ownership to original sender of contract call\r\n    transferOwnership(_owner);\r\n    description = _description;\r\n    //animationUrl = _animationUrl;\r\n    imageUrl = _imageUrl;\r\n    editionSize = _editionSize;\r\n    salePrice = _salePrice;\r\n    minPlayers = _minPlayers;\r\n    bunyBank = _bunyBank;\r\n    maxTokens = _maxTokens;\r\n    prime = _prime;\r\n    iterations = _iterations;\r\n    atEditionId.increment();\r\n  }\r\n\r\n  /// @dev returns the number of minted tokens within the edition\r\n   function totalSupply() public view returns (uint256) {\r\n     return atEditionId.current() - 1;\r\n    }\r\n\r\n     \r\n // return balance in wei\r\n    function getBalance() public view returns(uint){\r\n        return address(this).balance;\r\n    }\r\n\r\n    // return prize balance\r\n     function getPrize() external view returns (uint256) {\r\n        uint256 balance = address(this).balance;\r\n        return balance * 9 / 10; //90%\r\n    }\r\n\r\n\r\n  function purchase() external payable returns (uint256) {\r\n    require(balanceOf(msg.sender) < maxTokens, \"You have reached the maximum tokens allowed per address\");\r\n    require(active, \"Raffle has not started. Owner must setApprovedMinter\");\r\n    require(msg.value == salePrice, \"No soup for you!\");\r\n    address[] memory toMint = new address[](1);\r\n    toMint[0] = msg.sender;\r\n    mintedTokens[msg.sender] = true;\r\n    nonce ++;\r\n    createSeed();\r\n    EntryCount ++;\r\n    isPlayer[msg.sender] = true;\r\n    nftTokenIds.push(EntryCount);\r\n    uint256 entryTime = block.timestamp;\r\n    Entry memory x = Entry(msg.sender, EntryCount, entryTime);\r\n    entry.push(x);\r\n      if (EntryCount == editionSize) {\r\n            isComplete = true;\r\n            active = false;\r\n        }\r\n    emit Editionsold(salePrice, msg.sender, EntryCount, entryTime);\r\n    return _mintEditions(toMint);\r\n  }\r\n\r\n\r\n    function createSeed() internal returns(uint256) {\r\n      nonce ++;\r\n      seed[msg.sender] = uint256(keccak256(abi.encodePacked(msg.sender, EntryCount, block.timestamp, blockhash(block.number - 1))));            \r\n      \r\n    }\r\n \r\n    function prove(uint256 proof) external  {\r\n      nonce ++;\r\n   // see if the proof is valid for the seed associated with the address\r\n      require(SlothVDF.verify(proof, seed[msg.sender], prime, iterations), \"Invalid proof\");\r\n   // use the proof as a provable random number\r\n          randomNumber = proof;\r\n            if (randomNumber > 0) {\r\n           isProof = true;\r\n        }\r\n    }\r\n\r\nfunction getOwner(uint _id) public view returns (address) {\r\n    return ownerOf(_id);\r\n  }\r\n\r\n\r\nfunction pickWinner() public returns (uint256) {\r\n  require(randomNumber > 0, \"Generate provable random number first\");\r\n  require(isPlayer[msg.sender], \"User is not a active player. Only a registered ticket holder can start drawing\");\r\n  nonce ++;\r\n  winningNumber = uint256(keccak256(abi.encodePacked(block.number, randomNumber, blockhash(block.number - 1)))) % totalSupply();\r\n  address winner = getOwner(winningNumber);\r\n  uint256 prize = address(this).balance * 90 / 100;\r\n  Winner = payable(winner);\r\n  emit WinnerPicked(Winner, winningNumber, prize);\r\n  winnerSelected = true;\r\n  active = false;\r\n  RaffleWinner memory x = RaffleWinner(Winner, winningNumber);\r\n  raffleWinner.push(x);\r\n  Winner.transfer(prize);\r\n  withdrawBuny();\r\n  endTime = block.timestamp;\r\n  return winningNumber;\r\n}\r\n\r\n//failsafe?\r\n    function claimPrize(uint256 _winningNumber) public {\r\n    address payable tokenOwner = payable(ownerOf(_winningNumber));\r\n    require(msg.sender == tokenOwner, \"Only the owner of this token can withdraw the balance\");\r\n    require(winnerSelected, \"The contract has no balance to withdraw\");\r\n    uint256 balance = address(this).balance * 90/100;\r\n    (bool success, ) = tokenOwner.call{value: balance}(\"\");\r\n    prizeClaimed = true;\r\n    withdrawBuny();\r\n    require(success, \"Withdrawal failed\");\r\n  }\r\n\r\n\r\n  function _isAllowedToMint() internal view returns (bool) {\r\n    if (owner() == msg.sender) {\r\n      return true;\r\n    }\r\n    if (allowedMinters[address(0x0)]) {\r\n      return true;\r\n    }\r\n    return allowedMinters[msg.sender];\r\n  }\r\n\r\n  function mintEdition(address to) external override returns (uint256) {\r\n    require(_isAllowedToMint(), \"Needs to be an allowed minter\");\r\n    address[] memory toMint = new address[](1);\r\n    toMint[0] = to;\r\n    return _mintEditions(toMint);\r\n  }\r\n\r\n  function mintEditions(address[] memory recipients) external override returns (uint256) {\r\n    require(_isAllowedToMint(), \"Needs to be an allowed minter\");\r\n    return _mintEditions(recipients);\r\n  }\r\n\r\n  function owner() public view override(OwnableUpgradeable, IEditionSingleMintable) returns (address) {\r\n    return super.owner();\r\n  }\r\n\r\n  // helper function starts raffle once setApprovedMinter. \r\n  function enableRaffle() public onlyOwner {\r\n      active = true;\r\n    }\r\n\r\n    \r\n     function readAllEntries() public view  returns (Entry[] memory) {\r\n    Entry[] memory result = new Entry[](EntryCount);\r\n    for (uint256 i = 0; i < EntryCount; i++) {\r\n      result[i] = entry[i];\r\n    }\r\n    return result;\r\n  }\r\n  \r\n  // set contract address as Approved minter\r\n  // set active state to false\r\n  // log and emit current time\r\n  function setApprovedMinter(address minter, bool allowed) public onlyOwner {\r\n    allowedMinters[minter] = allowed;\r\n    enableRaffle();\r\n    startTime = block.timestamp;\r\n    emit Rafflestarted(minter, startTime);\r\n  }\r\n\r\n  \r\n\r\n\r\n  /// Returns the number of editions allowed to mint (max_uint256 when open edition)\r\n  function numberCanMint() public view override returns (uint256) {\r\n    // Return max int if open edition\r\n    if (editionSize == 0) {\r\n      return type(uint256).max;\r\n    }\r\n    // atEditionId is one-indexed hence the need to remove one here\r\n    return editionSize + 1 - atEditionId.current();\r\n  }\r\n\r\n  /**\r\n      @dev Private function to mint als without any access checks.\r\n           Called by the public edition minting functions.\r\n     */\r\n  function _mintEditions(address[] memory recipients) internal returns (uint256) {\r\n    uint256 startAt = atEditionId.current();\r\n    uint256 endAt = startAt + recipients.length - 1;\r\n    require(editionSize == 0 || endAt <= editionSize, \"Sold out\");\r\n    while (atEditionId.current() <= endAt) {\r\n      _mint(recipients[atEditionId.current() - startAt], atEditionId.current());\r\n      atEditionId.increment();\r\n    }\r\n    return atEditionId.current();\r\n  }\r\n\r\n \r\n   \r\n    function withdrawBuny() internal {\r\n        uint256 amount = address(this).balance * 10 / 100;\r\n        require(isComplete, \"Raffle sale must be complete before withdraw function is enabled\");\r\n        require(amount > 0, \"Contract A has no balance to withdraw\");\r\n\r\n        bunyBank.transfer(amount);\r\n    }\r\n\r\n\r\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\r\n    require(_exists(tokenId), \"No token\");\r\n\r\n    return sharedNFTLogic.createMetadataEdition(name(), description, imageUrl, animationUrl, tokenId, editionSize);\r\n  }\r\n\r\n\r\n     function supportsInterface(\r\n        bytes4 interfaceId\r\n    ) public view virtual override( ERC721Upgradeable) returns (bool) {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n\r\n\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\";\n"
    },
    "contracts/NFT3D.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\n/* Imports */\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\nimport '@openzeppelin/contracts/utils/Counters.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol';\n\ncontract NFT3D is ERC721URIStorage {\n  /* State Variables */\n\n  using Counters for Counters.Counter;\n  Counters.Counter private s_tokenIds;\n  address s_marketplaceAddress;\n\n  event tokenMinted(uint256 indexed tokenId);\n\n  constructor(address _marketplaceAddress) ERC721('The Buny Project 2023', 'aBUNY') {\n    s_marketplaceAddress = _marketplaceAddress;\n  }\n\n  /*  Logics */\n\n  function mintToken(string memory _tokenURI) external returns (uint) {\n    s_tokenIds.increment();\n    uint256 newTokenId = s_tokenIds.current();\n\n    _mint(msg.sender, newTokenId);\n    emit tokenMinted(newTokenId);\n    _setTokenURI(newTokenId, _tokenURI);\n\n    setApprovalForAll(s_marketplaceAddress, true);\n    return newTokenId;\n  }\n}\n"
    },
    "contracts/NFT.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity ^0.8.3;\n\nimport '@openzeppelin/contracts/utils/Counters.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol';\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\n\nimport 'hardhat/console.sol';\n\ncontract NFT is ERC721URIStorage {\n  using Counters for Counters.Counter;\n  Counters.Counter private _tokenIds;\n  address contractAddress;\n\n  constructor(address marketplaceAddress) ERC721('Physical Object Blockchain Asset', 'POBA') {\n    contractAddress = marketplaceAddress;\n  }\n\n  function createToken(string memory tokenURI) public returns (uint) {\n    _tokenIds.increment();\n    uint256 newItemId = _tokenIds.current();\n\n    _mint(msg.sender, newItemId);\n    _setTokenURI(newItemId, tokenURI);\n    setApprovalForAll(contractAddress, true);\n    return newItemId;\n  }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/Marketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nimport '@openzeppelin/contracts/utils/Counters.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol';\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\nimport 'hardhat/console.sol';\n\ncontract Marketplace is ERC721URIStorage {\n  using Counters for Counters.Counter;\n  Counters.Counter private _tokenIds;\n  Counters.Counter private _itemsSold;\n  uint256 listingPrice = 0.025 ether;\n  address payable owner;\n  mapping(uint256 => MarketItem) private idToMarketItem;\n  struct MarketItem {\n    uint256 tokenId;\n    address payable seller;\n    address payable owner;\n    uint256 price;\n    bool sold;\n  }\n  event MarketItemCreated(uint256 indexed tokenId, address seller, address owner, uint256 price, bool sold);\n\n  constructor() ERC721('The Buny Project', 'aBUNY') {\n    owner = payable(msg.sender);\n  }\n\n  function updateListingPrice(uint _listingPrice) public payable {\n    require(owner == msg.sender, 'Only marketplace owner can update listing price.');\n    listingPrice = _listingPrice;\n  }\n\n  function getListingPrice() public view returns (uint256) {\n    return listingPrice;\n  }\n\n  function createToken(string memory tokenURI, uint256 price) public payable returns (uint) {\n    _tokenIds.increment();\n    uint256 newTokenId = _tokenIds.current();\n    _mint(msg.sender, newTokenId);\n    _setTokenURI(newTokenId, tokenURI);\n    createMarketItem(newTokenId, price);\n    return newTokenId;\n  }\n\n  function createMarketItem(uint256 tokenId, uint256 price) private {\n    require(price > 0, 'Price must be at least 1 wei');\n    require(msg.value == listingPrice, 'Price must be equal to listing price');\n    idToMarketItem[tokenId] = MarketItem(tokenId, payable(msg.sender), payable(address(this)), price, false);\n    _transfer(msg.sender, address(this), tokenId);\n    emit MarketItemCreated(tokenId, msg.sender, address(this), price, false);\n  }\n\n  function resellToken(uint256 tokenId, uint256 price) public payable {\n    require(idToMarketItem[tokenId].owner == msg.sender, 'Only item owner can perform this operation');\n    require(msg.value == listingPrice, 'Price must be equal to listing price');\n    idToMarketItem[tokenId].sold = false;\n    idToMarketItem[tokenId].price = price;\n    idToMarketItem[tokenId].seller = payable(msg.sender);\n    idToMarketItem[tokenId].owner = payable(address(this));\n    _itemsSold.decrement();\n    _transfer(msg.sender, address(this), tokenId);\n  }\n\n  function createMarketSale(uint256 tokenId) public payable {\n    uint price = idToMarketItem[tokenId].price;\n    address payable creator = idToMarketItem[tokenId].seller;\n    require(msg.value == price, 'Please submit the asking price in order to complete the purchase');\n    idToMarketItem[tokenId].owner = payable(msg.sender);\n    idToMarketItem[tokenId].sold = true;\n    idToMarketItem[tokenId].seller = payable(address(0));\n    _itemsSold.increment();\n    _transfer(address(this), msg.sender, tokenId);\n    payable(owner).transfer(listingPrice);\n    payable(creator).transfer(msg.value);\n  }\n\n  function fetchMarketItems() public view returns (MarketItem[] memory) {\n    uint itemCount = _tokenIds.current();\n    uint unsoldItemCount = _tokenIds.current() - _itemsSold.current();\n    uint currentIndex = 0;\n    MarketItem[] memory items = new MarketItem[](unsoldItemCount);\n    for (uint i = 0; i < itemCount; i++) {\n      if (idToMarketItem[i + 1].owner == address(this)) {\n        uint currentId = i + 1;\n        MarketItem storage currentItem = idToMarketItem[currentId];\n        items[currentIndex] = currentItem;\n        currentIndex += 1;\n      }\n    }\n    return items;\n  }\n\n  function fetchMyNFTs() public view returns (MarketItem[] memory) {\n    uint totalItemCount = _tokenIds.current();\n    uint itemCount = 0;\n    uint currentIndex = 0;\n    for (uint i = 0; i < totalItemCount; i++) {\n      // check if nft is mine\n      if (idToMarketItem[i + 1].owner == msg.sender) {\n        itemCount += 1;\n      }\n    }\n    MarketItem[] memory items = new MarketItem[](itemCount);\n    for (uint i = 0; i < totalItemCount; i++) {\n      if (idToMarketItem[i + 1].owner == msg.sender) {\n        uint currentId = i + 1;\n        MarketItem storage currentItem = idToMarketItem[currentId];\n        items[currentIndex] = currentItem;\n        currentIndex += 1;\n      }\n    }\n    return items;\n  }\n\n  function fetchItemsListed() public view returns (MarketItem[] memory) {\n    uint totalItemCount = _tokenIds.current();\n    uint itemCount = 0;\n    uint currentIndex = 0;\n    for (uint i = 0; i < totalItemCount; i++) {\n      if (idToMarketItem[i + 1].seller == msg.sender) {\n        itemCount += 1;\n      }\n    }\n    MarketItem[] memory items = new MarketItem[](itemCount);\n    for (uint i = 0; i < totalItemCount; i++) {\n      if (idToMarketItem[i + 1].seller == msg.sender) {\n        uint currentId = i + 1;\n        MarketItem storage currentItem = idToMarketItem[currentId];\n        items[currentIndex] = currentItem;\n        currentIndex += 1;\n      }\n    }\n    return items;\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/MultiSigWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n// never forget the OG simple sig wallet: https://github.com/christianlundkvist/simple-multisig/blob/master/contracts/SimpleMultiSig.sol\n\npragma experimental ABIEncoderV2;\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"./MultiSigFactory.sol\";\n\ncontract MultiSigWallet {\n\tusing ECDSA for bytes32;\n  MultiSigFactory private multiSigFactory;\n\n\tevent Deposit(address indexed sender, uint amount, uint balance);\n\tevent ExecuteTransaction( address indexed owner, address payable to, uint256 value, bytes data, uint256 nonce, bytes32 hash, bytes result);\n\tevent Owner( address indexed owner, bool added);\n\n\tmapping(address => bool) public isOwner;\n\n  address[] public owners;\n\n\tuint public signaturesRequired;\n\tuint public nonce;\n\tuint public chainId;\n\n  modifier onlyOwner() {\n    require(isOwner[msg.sender], \"Not owner\");\n    _;\n  }\n\n  modifier onlySelf() {\n    require(msg.sender == address(this), \"Not Self\");\n    _;\n  }\n\n  modifier requireNonZeroSignatures(uint _signaturesRequired) {\n    require(_signaturesRequired > 0, \"Must be non-zero sigs required\");\n    _;\n  }\n\n  constructor(uint256 _chainId, address[] memory _owners, uint _signaturesRequired, address _factory) payable requireNonZeroSignatures(_signaturesRequired) {\n    multiSigFactory = MultiSigFactory(_factory);\n    signaturesRequired = _signaturesRequired;\n    for (uint i = 0; i < _owners.length; i++) {\n      address owner = _owners[i];\n\n      require(owner!=address(0), \"constructor: zero address\");\n      require(!isOwner[owner], \"constructor: owner not unique\");\n\n      isOwner[owner] = true;\n      owners.push(owner);\n\n      emit Owner(owner,isOwner[owner]);\n    }\n\n    chainId = _chainId;\n  }\n\n  function addSigner(address newSigner, uint256 newSignaturesRequired) public onlySelf requireNonZeroSignatures(newSignaturesRequired) {\n    require(newSigner != address(0), \"addSigner: zero address\");\n    require(!isOwner[newSigner], \"addSigner: owner not unique\");\n\n    isOwner[newSigner] = true;\n    owners.push(newSigner);\n    signaturesRequired = newSignaturesRequired;\n\n    emit Owner(newSigner, isOwner[newSigner]);\n    multiSigFactory.emitOwners(address(this), owners, newSignaturesRequired);\n  }\n\n  function removeSigner(address oldSigner, uint256 newSignaturesRequired) public onlySelf requireNonZeroSignatures(newSignaturesRequired) {\n    require(isOwner[oldSigner], \"removeSigner: not owner\");\n\n     _removeOwner(oldSigner);\n    signaturesRequired = newSignaturesRequired;\n\n    emit Owner(oldSigner, isOwner[oldSigner]);\n    multiSigFactory.emitOwners(address(this), owners, newSignaturesRequired);\n  }\n\n  function _removeOwner(address _oldSigner) private {\n    isOwner[_oldSigner] = false;\n    uint256 ownersLength = owners.length;\n    address[] memory poppedOwners = new address[](owners.length);\n    for (uint256 i = ownersLength - 1; i >= 0; i--) {\n      if (owners[i] != _oldSigner) {\n        poppedOwners[i] = owners[i];\n        owners.pop();\n      } else {\n        owners.pop();\n        for (uint256 j = i+1; j <= ownersLength - 1; j++) {\n          owners.push(poppedOwners[j]);\n        }\n        return;\n      }\n    }\n  }\n\n  function updateSignaturesRequired(uint256 newSignaturesRequired) public onlySelf requireNonZeroSignatures(newSignaturesRequired) {\n    signaturesRequired = newSignaturesRequired;\n  }\n\n  function executeTransaction( address payable to, uint256 value, bytes memory data, bytes[] memory signatures)\n      public\n      onlyOwner\n      returns (bytes memory)\n  {\n    bytes32 _hash =  getTransactionHash(nonce, to, value, data);\n\n    nonce++;\n\n    uint256 validSignatures;\n    address duplicateGuard;\n    for (uint i = 0; i < signatures.length; i++) {\n        address recovered = recover(_hash, signatures[i]);\n        require(recovered > duplicateGuard, \"executeTransaction: duplicate or unordered signatures\");\n        duplicateGuard = recovered;\n\n        if (isOwner[recovered]) {\n          validSignatures++;\n        }\n    }\n\n    require(validSignatures >= signaturesRequired, \"executeTransaction: not enough valid signatures\");\n\n    (bool success, bytes memory result) = to.call{value: value}(data);\n    require(success, \"executeTransaction: tx failed\");\n\n    emit ExecuteTransaction(msg.sender, to, value, data, nonce-1, _hash, result);\n    return result;\n  }\n\n  function getTransactionHash( uint256 _nonce, address to, uint256 value, bytes memory data ) public view returns (bytes32) {\n    return keccak256(abi.encodePacked(address(this), chainId, _nonce, to, value, data));\n  }\n\n  function recover(bytes32 _hash, bytes memory _signature) public pure returns (address) {\n    return _hash.toEthSignedMessageHash().recover(_signature);\n  }\n\n  receive() payable external {\n    emit Deposit(msg.sender, msg.value, address(this).balance);\n  }\n}\n"
    },
    "contracts/MultiSigFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"./MultiSigWallet.sol\";\n\ncontract MultiSigFactory {\n  MultiSigWallet[] public multiSigs;\n  mapping(address => bool) existsMultiSig;\n\n  event Create(\n    uint indexed contractId,\n    address indexed contractAddress,\n    address creator,\n    address[] owners,\n    uint signaturesRequired\n  );\n\n  event Owners(\n    address indexed contractAddress,\n    address[] owners,\n    uint256 indexed signaturesRequired\n  );\n\n\n  constructor() {}\n\n  modifier onlyRegistered() {\n    require(existsMultiSig[msg.sender], \"caller not registered to use logger\");\n    _;\n  }\n\n  function emitOwners(\n    address _contractAddress,\n    address[] memory _owners,\n    uint256 _signaturesRequired\n  ) external onlyRegistered {\n    emit Owners(_contractAddress, _owners, _signaturesRequired);\n  }\n\n  function create(\n    uint256 _chainId,\n    address[] memory _owners,\n    uint _signaturesRequired\n  ) public payable {\n    uint id = numberOfMultiSigs();\n\n    MultiSigWallet multiSig = (new MultiSigWallet){value: msg.value}(_chainId, _owners, _signaturesRequired, address(this));\n    multiSigs.push(multiSig);\n    existsMultiSig[address(multiSig)] = true;\n\n    emit Create(id, address(multiSig), msg.sender, _owners, _signaturesRequired);\n    emit Owners(address(multiSig), _owners, _signaturesRequired);\n  }\n\n  function numberOfMultiSigs() public view returns(uint) {\n    return multiSigs.length;\n  }\n\n  function getMultiSig(uint256 _index)\n    public\n    view\n    returns (\n      address multiSigAddress,\n      uint signaturesRequired,\n      uint balance\n    ) {\n      MultiSigWallet multiSig = multiSigs[_index];\n      return (address(multiSig), multiSig.signaturesRequired(), address(multiSig).balance);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}