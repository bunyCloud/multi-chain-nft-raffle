{
  "address": "0x686e920611079eE4E0CcD66383B48B0eFf235d6a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract SharedNFTLogic",
          "name": "_sharedNFTLogic",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "EditionSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimum",
          "type": "uint256"
        }
      ],
      "name": "MinPlayersChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        }
      ],
      "name": "RaffleStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "winningNumber",
          "type": "uint256"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EntryCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "OwnerOfToken",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "RaffleWinner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "active",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "animationUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clapperFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createSeed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableRaffle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "editionSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableRaffle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinner",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "houseFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "imageUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_animationUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_imageUrl",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_editionSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_prime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_iterations",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "iterations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mintEdition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        }
      ],
      "name": "mintEditions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newSeed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberCanMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pickWinner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proof",
          "type": "uint256"
        }
      ],
      "name": "prove",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readAllEntries",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "EntryNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct RaffleNft.Entry[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "salePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "seed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "setApprovedMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minPlayers",
          "type": "uint256"
        }
      ],
      "name": "setMinPlayers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "setSalePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winningNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc417879369e98845b085feb89fc54d20b6e42c47355c636cd4e848f8f965c081",
  "receipt": {
    "to": null,
    "from": "0x8406A51A0E1B5F52Ff61226773e6328e5Da5d964",
    "contractAddress": "0x686e920611079eE4E0CcD66383B48B0eFf235d6a",
    "transactionIndex": 1,
    "gasUsed": "2867940",
    "logsBloom": "0x
    "blockHash": "0xa34f0a9fd021d3472be54fe50dc10767c268bc757a47a8c5181c7156b77c1fe4",
    "transactionHash": "0xc417879369e98845b085feb89fc54d20b6e42c47355c636cd4e848f8f965c081",
    "logs": [],
    "blockNumber": 18773852,
    "cumulativeGasUsed": "2933464",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x10cA9E76Fb9d40B8Bc388A6986377669B46284f7"],
  "numDeployments": 1,
  "solcInputHash": "874cbae2360d6d111c9759a00abcc64b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract SharedNFTLogic\",\"name\":\"_sharedNFTLogic\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"EditionSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"name\":\"MinPlayersChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"RaffleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningNumber\",\"type\":\"uint256\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EntryCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"OwnerOfToken\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RaffleWinner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"animationUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clapperFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"editionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinner\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"houseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imageUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_animationUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_imageUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_editionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_prime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_iterations\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iterations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintEdition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"mintEditions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newSeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberCanMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"}],\"name\":\"prove\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readAllEntries\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"EntryNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct RaffleNft.Entry[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"seed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setApprovedMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPlayers\",\"type\":\"uint256\"}],\"name\":\"setMinPlayers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"setSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winningNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"params\":{\"tokenId\":\"Token ID to burn User burn function for token id \"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"returns the number of minted tokens within the edition\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"numberCanMint()\":{\"notice\":\"Returns the number of editions allowed to mint (max_uint256 when open edition)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RaffleNft.sol\":\"RaffleNft\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa8ff557539dcfed5706eddde2aa929e06bb1764e71aa8c1048a78970bf3ca37d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x5331c8909221d9f9f3851cfadd5959d0873413a2c27e30e0f2fa234158c1c6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/IEditionSingleMintable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\ninterface IEditionSingleMintable {\\n  function mintEdition(address to) external returns (uint256);\\n\\n  function mintEditions(address[] memory to) external returns (uint256);\\n\\n  function numberCanMint() external view returns (uint256);\\n\\n  function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc90163949d024e5903bdf06e40cb6689ab30551e42dc771dcd46c8537cf04b80\",\"license\":\"GPL-3.0\"},\"contracts/IPublicSharedMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\n/// Shared public library for on-chain NFT functions\\ninterface IPublicSharedMetadata {\\n  /// @param unencoded bytes to base64-encode\\n  function base64Encode(bytes memory unencoded) external pure returns (string memory);\\n\\n  /// Encodes the argument json bytes into base64-data uri format\\n  /// @param json Raw json to base64 and turn into a data-uri\\n  function encodeMetadataJSON(bytes memory json) external pure returns (string memory);\\n\\n  /// Proxy to openzeppelin's toString function\\n  /// @param value number to return as a string\\n  function numberToString(uint256 value) external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0xaf1cbbb34e11975b02303c04d71796c8528341743fb9ba9f22f78d628d911caf\",\"license\":\"GPL-3.0\"},\"contracts/RaffleNft.sol\":{\"content\":\"//bunyNFt\\r\\n\\r\\n// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport { ERC721Upgradeable } from '@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol';\\r\\nimport {  IERC165Upgradeable } from '@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol';\\r\\nimport { OwnableUpgradeable } from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\r\\nimport { CountersUpgradeable } from '@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol';\\r\\nimport { AddressUpgradeable } from '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\r\\nimport { SharedNFTLogic } from './SharedNFTLogic.sol';\\r\\nimport { IEditionSingleMintable } from './IEditionSingleMintable.sol';\\r\\nimport \\\"./SlothVDF.sol\\\";\\r\\n\\r\\ncontract RaffleNft is ERC721Upgradeable, IEditionSingleMintable,  OwnableUpgradeable {\\r\\n  using CountersUpgradeable for CountersUpgradeable.Counter;\\r\\n  SharedNFTLogic private immutable sharedNFTLogic;\\r\\n  CountersUpgradeable.Counter private atEditionId;\\r\\n  event PriceChanged(uint256 amount);\\r\\n  event MinPlayersChanged(uint256 minimum);\\r\\n  event RaffleStarted(address minter, uint256 startTime);\\r\\n  event EditionSold(uint256 price, address owner);\\r\\n  event WinnerPicked(address payable winner, uint256 prize, uint256 winningNumber);\\r\\n  string public description;\\r\\n  string public animationUrl;\\r\\n  string public imageUrl;\\r\\n  uint256 public editionSize;\\r\\n  mapping(address => bool) allowedMinters;\\r\\n  uint256 public salePrice;\\r\\n  uint256 public minPlayers;\\r\\n  bool public active = false;\\r\\n  uint256 public startTime;\\r\\n  uint256 public EntryCount = 0;\\r\\n  address payable[] public players;\\r\\n  address payable[] public RaffleWinner;\\r\\n  uint256 public newSeed;\\r\\n  uint256 public prime = 0;\\r\\n  uint256 public iterations = 0;\\r\\n  uint256 private nonce = 0;\\r\\n  uint256 public randomNumber = 0;\\r\\n  uint256 public winningNumber = 0;\\r\\n    Entry[] private entry;\\r\\n\\r\\n  // Mapping to retrieve Array index from address or name\\r\\n  mapping(address => uint256) private addressToIndex;\\r\\n  mapping(string => uint256) private playerToIndex;\\r\\n\\r\\n  // address -> random number seed\\r\\n  mapping(address => uint256) public seed;\\r\\n\\r\\n  struct Entry {\\r\\n    address player;\\r\\n    uint256 EntryNumber;\\r\\n  }\\r\\n\\r\\n  constructor( SharedNFTLogic _sharedNFTLogic) {\\r\\n    sharedNFTLogic = _sharedNFTLogic;\\r\\n      \\r\\n       }\\r\\n\\r\\n  function initialize(\\r\\n    address _owner,\\r\\n    string memory _name,\\r\\n    string memory _symbol,\\r\\n    string memory _description,\\r\\n    string memory _animationUrl,\\r\\n    string memory _imageUrl,\\r\\n    uint256 _editionSize,\\r\\n    uint256 _salePrice,\\r\\n    uint256 _minPlayers,\\r\\n    uint256 _prime,\\r\\n    uint256 _iterations\\r\\n\\r\\n  ) public initializer {\\r\\n    __ERC721_init(_name, _symbol);\\r\\n    __Ownable_init();\\r\\n    // Set ownership to original sender of contract call\\r\\n    transferOwnership(_owner);\\r\\n    description = _description;\\r\\n    animationUrl = _animationUrl;\\r\\n    imageUrl = _imageUrl;\\r\\n    editionSize = _editionSize;\\r\\n    salePrice = _salePrice;\\r\\n    minPlayers = _minPlayers;\\r\\n    prime = _prime;\\r\\n    iterations = _iterations;\\r\\n    atEditionId.increment();\\r\\n  }\\r\\n\\r\\n  /// @dev returns the number of minted tokens within the edition\\r\\n  function totalSupply() public view returns (uint256) {\\r\\n    return atEditionId.current() - 1;\\r\\n  }\\r\\n\\r\\n  \\r\\n // return balance in wei\\r\\n    function getBalance() public view returns(uint){\\r\\n        return address(this).balance;\\r\\n    }\\r\\n    // return prize balance\\r\\n     function getPrize() public view returns(uint){\\r\\n        return address(this).balance * 80 / 100;\\r\\n    }\\r\\n\\r\\n    function houseFee() public view returns(uint) {\\r\\n        return address(this).balance * 15 / 100;\\r\\n    }\\r\\n\\r\\n        function clapperFee() public view returns(uint) {\\r\\n        return address(this).balance * 5 / 100;\\r\\n    }\\r\\n\\r\\n\\r\\n        //seed is generated using sender address\\r\\n    function createSeed() external payable returns(uint) {\\r\\n        // commit funds\\r\\n                seed[msg.sender] = uint256(keccak256(abi.encodePacked(msg.sender, nonce++, block.timestamp, blockhash(block.number - 1))));\\r\\n                return newSeed;\\r\\n    }\\r\\n \\r\\n    function prove(uint256 proof) external returns(uint) {\\r\\n        // see if the proof is valid for the seed associated with the address\\r\\n        require(SlothVDF.verify(proof, seed[msg.sender], prime, iterations), 'Invalid proof');\\r\\n \\r\\n        // use the proof as a provable random number\\r\\n         randomNumber = proof;\\r\\n    }\\r\\n\\r\\n    // provable random number used as seed to generate additional random number\\r\\n    function random() internal view returns(uint){\\r\\n       return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, randomNumber)));\\r\\n    }\\r\\n    // array of player addresses\\r\\n     function getPlayers() public view returns(address payable[] memory) {\\r\\n        return players;\\r\\n    }\\r\\n\\r\\n     function readAllEntries() public view  returns (Entry[] memory) {\\r\\n    Entry[] memory result = new Entry[](EntryCount);\\r\\n    for (uint256 i = 0; i < EntryCount; i++) {\\r\\n      result[i] = entry[i];\\r\\n    }\\r\\n    return result;\\r\\n  }\\r\\n  \\r\\n    // requires minPlayer requirements met\\r\\n    // require all tickets minted\\r\\n    // Call random number function\\r\\n    // Divide random number by number of players\\r\\n    // winning number is winning token id\\r\\n    // transfer 80% of raffle to winner\\r\\n    // transfer 20% to maker\\r\\n    // push winner into RaffleWinner circle\\r\\n    // emit winner address, prize amount and winning number\\r\\n    function pickWinner() external payable returns(uint256){\\r\\n        require (players.length >= minPlayers, \\\"Define minimum player number\\\");\\r\\n        require (totalSupply() >= editionSize, \\\"Raffle must complete before picking winner\\\");\\r\\n        uint r = random();\\r\\n        address payable winner;\\r\\n        uint index = r % editionSize;\\r\\n        winner = players[index]; \\r\\n        uint winnerPrize = getPrize();\\r\\n        winner.transfer(getPrize());\\r\\n        players = new address payable[](0);\\r\\n        withdraw();\\r\\n        RaffleWinner.push(payable(winner));\\r\\n        winningNumber = index;\\r\\n        disableRaffle();\\r\\n        emit WinnerPicked(winner, winnerPrize, winningNumber);\\r\\n        return winningNumber;\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n  function getWinner() public view returns(address payable[] memory) {\\r\\n        return RaffleWinner;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n  function purchase() external payable returns (uint256) {\\r\\n    require(active, \\\"Raffle has not started. Owner must setApprovedMinter\\\");\\r\\n    require(msg.value == salePrice, \\\"No soup for you!\\\");\\r\\n    address[] memory toMint = new address[](1);\\r\\n    toMint[0] = msg.sender;\\r\\n    players.push(payable(msg.sender));\\r\\n    EntryCount ++;\\r\\n    Entry memory x = Entry(msg.sender, EntryCount);\\r\\n    entry.push(x);\\r\\n    emit EditionSold(salePrice, msg.sender);\\r\\n    return _mintEditions(toMint);\\r\\n  }\\r\\n\\r\\n\\r\\n  function setSalePrice(uint256 _salePrice) external onlyOwner {\\r\\n    salePrice = _salePrice;\\r\\n    emit PriceChanged(salePrice);\\r\\n          }\\r\\n\\r\\n  function setMinPlayers(uint256 _minPlayers) external onlyOwner {\\r\\n            minPlayers = _minPlayers;\\r\\n            emit MinPlayersChanged(minPlayers);\\r\\n        }\\r\\n\\r\\n\\r\\n  function _isAllowedToMint() internal view returns (bool) {\\r\\n    if (owner() == msg.sender) {\\r\\n      return true;\\r\\n    }\\r\\n    if (allowedMinters[address(0x0)]) {\\r\\n      return true;\\r\\n    }\\r\\n    return allowedMinters[msg.sender];\\r\\n  }\\r\\n\\r\\n  function mintEdition(address to) external override returns (uint256) {\\r\\n    require(_isAllowedToMint(), 'Needs to be an allowed minter');\\r\\n    address[] memory toMint = new address[](1);\\r\\n    toMint[0] = to;\\r\\n    return _mintEditions(toMint);\\r\\n  }\\r\\n\\r\\n  function mintEditions(address[] memory recipients) external override returns (uint256) {\\r\\n    require(_isAllowedToMint(), 'Needs to be an allowed minter');\\r\\n    return _mintEditions(recipients);\\r\\n  }\\r\\n\\r\\n  function owner() public view override(OwnableUpgradeable, IEditionSingleMintable) returns (address) {\\r\\n    return super.owner();\\r\\n  }\\r\\n  // enable/disable raffle\\r\\n  function disableRaffle() public onlyOwner {\\r\\n     active = false;\\r\\n  }\\r\\n  // helper function starts raffle once setApprovedMinter. \\r\\n  function enableRaffle() public onlyOwner {\\r\\n      active = true;\\r\\n    }\\r\\n  // set contract address as Approved minter\\r\\n  // set active state to false\\r\\n  // log and emit current time\\r\\n  function setApprovedMinter(address minter, bool allowed) public onlyOwner {\\r\\n    allowedMinters[minter] = allowed;\\r\\n    enableRaffle();\\r\\n    startTime = block.timestamp;\\r\\n    emit RaffleStarted(minter, startTime);\\r\\n  }\\r\\n\\r\\n  /// Returns the number of editions allowed to mint (max_uint256 when open edition)\\r\\n  function numberCanMint() public view override returns (uint256) {\\r\\n    // Return max int if open edition\\r\\n    if (editionSize == 0) {\\r\\n      return type(uint256).max;\\r\\n    }\\r\\n    // atEditionId is one-indexed hence the need to remove one here\\r\\n    return editionSize + 1 - atEditionId.current();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n        @param tokenId Token ID to burn\\r\\n        User burn function for token id \\r\\n     */\\r\\n  function burn(uint256 tokenId) public {\\r\\n    require(_isApprovedOrOwner(_msgSender(), tokenId), 'Not approved');\\r\\n    _burn(tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n      @dev Private function to mint als without any access checks.\\r\\n           Called by the public edition minting functions.\\r\\n     */\\r\\n  function _mintEditions(address[] memory recipients) internal returns (uint256) {\\r\\n    uint256 startAt = atEditionId.current();\\r\\n    uint256 endAt = startAt + recipients.length - 1;\\r\\n    require(editionSize == 0 || endAt <= editionSize, 'Sold out');\\r\\n    while (atEditionId.current() <= endAt) {\\r\\n      _mint(recipients[atEditionId.current() - startAt], atEditionId.current());\\r\\n      atEditionId.increment();\\r\\n    }\\r\\n    return atEditionId.current();\\r\\n  }\\r\\n\\r\\n \\r\\n      function withdraw() internal onlyOwner {\\r\\n    // No need for gas limit to trusted address.\\r\\n    AddressUpgradeable.sendValue(payable(owner()), address(this).balance * 20 / 100);\\r\\n  }\\r\\n\\r\\n\\r\\n    function OwnerOfToken(address _owner) public view returns (uint256[] memory) {\\r\\n    uint256 ownerTokenCount = balanceOf(_owner);\\r\\n    uint256[] memory ownedTokenIds = new uint256[](ownerTokenCount);\\r\\n    uint256 currentTokenId = 1;\\r\\n    uint256 ownedTokenIndex = 0;\\r\\n\\r\\n    while (ownedTokenIndex < ownerTokenCount && currentTokenId <= editionSize) {\\r\\n      address currentTokenOwner = ownerOf(currentTokenId);\\r\\n\\r\\n      if (currentTokenOwner == _owner) {\\r\\n        ownedTokenIds[ownedTokenIndex] = currentTokenId;\\r\\n\\r\\n        ownedTokenIndex++;\\r\\n      }\\r\\n\\r\\n      currentTokenId++;\\r\\n    }\\r\\n\\r\\n    return ownedTokenIds;\\r\\n  }\\r\\n\\r\\n\\r\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\r\\n    require(_exists(tokenId), 'No token');\\r\\n\\r\\n    return sharedNFTLogic.createMetadataEdition(name(), description, imageUrl, animationUrl, tokenId, editionSize);\\r\\n  }\\r\\n\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x5e52057bb540c30deffeb78d642b6b75aa7fd2216986d344c97ffb2031d52f85\",\"license\":\"GPL-3.0\"},\"contracts/SharedNFTLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport { StringsUpgradeable } from '@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol';\\nimport { Base64 } from 'base64-sol/base64.sol';\\nimport { IPublicSharedMetadata } from './IPublicSharedMetadata.sol';\\n\\n/// Shared NFT logic for rendering metadata associated with editions\\n/// @dev Can safely be used for generic base64Encode and numberToString functions\\ncontract SharedNFTLogic is IPublicSharedMetadata {\\n  /// @param unencoded bytes to base64-encode\\n  function base64Encode(bytes memory unencoded) public pure override returns (string memory) {\\n    return Base64.encode(unencoded);\\n  }\\n\\n  /// Proxy to openzeppelin's toString function\\n  /// @param value number to return as a string\\n  function numberToString(uint256 value) public pure override returns (string memory) {\\n    return StringsUpgradeable.toString(value);\\n  }\\n\\n  /// Generate edition metadata from storage information as base64-json blob\\n  /// Combines the media data and metadata\\n  /// @param name Name of NFT in metadata\\n  /// @param description Description of NFT in metadata\\n  /// @param imageUrl URL of image to render for edition\\n  /// @param animationUrl URL of animation to render for edition\\n  /// @param tokenOfEdition Token ID for specific token\\n  /// @param editionSize Size of entire edition to show\\n  function createMetadataEdition(\\n    string memory name,\\n    string memory description,\\n    string memory imageUrl,\\n    string memory animationUrl,\\n    uint256 tokenOfEdition,\\n    uint256 editionSize\\n  ) external pure returns (string memory) {\\n    string memory _tokenMediaData = tokenMediaData(imageUrl, animationUrl, tokenOfEdition);\\n    bytes memory json = createMetadataJSON(name, description, _tokenMediaData, tokenOfEdition, editionSize);\\n    return encodeMetadataJSON(json);\\n  }\\n\\n  /// Function to create the metadata json string for the nft edition\\n  /// @param name Name of NFT in metadata\\n  /// @param description Description of NFT in metadata\\n  /// @param mediaData Data for media to include in json object\\n  /// @param tokenOfEdition Token ID for specific token\\n  /// @param editionSize Size of entire edition to show\\n  function createMetadataJSON(\\n    string memory name,\\n    string memory description,\\n    string memory mediaData,\\n    uint256 tokenOfEdition,\\n    uint256 editionSize\\n  ) public pure returns (bytes memory) {\\n    bytes memory editionSizeText;\\n    if (editionSize > 0) {\\n      editionSizeText = abi.encodePacked('/', numberToString(editionSize));\\n    }\\n    return\\n      abi.encodePacked(\\n        '{\\\"name\\\": \\\"',\\n        name,\\n        ' ',\\n        numberToString(tokenOfEdition),\\n        editionSizeText,\\n        '\\\", \\\"',\\n        'description\\\": \\\"',\\n        description,\\n        '\\\", \\\"',\\n        mediaData,\\n        'properties\\\": {\\\"number\\\": ',\\n        numberToString(tokenOfEdition),\\n        ', \\\"name\\\": \\\"',\\n        name,\\n        '\\\"}}'\\n      );\\n  }\\n\\n  /// Encodes the argument json bytes into base64-data uri format\\n  /// @param json Raw json to base64 and turn into a data-uri\\n  function encodeMetadataJSON(bytes memory json) public pure override returns (string memory) {\\n    return string(abi.encodePacked('data:application/json;base64,', base64Encode(json)));\\n  }\\n\\n  /// Generates edition metadata from storage information as base64-json blob\\n  /// Combines the media data and metadata\\n  /// @param imageUrl URL of image to render for edition\\n  /// @param animationUrl URL of animation to render for edition\\n  function tokenMediaData(string memory imageUrl, string memory animationUrl, uint256 tokenOfEdition) public pure returns (string memory) {\\n    bool hasImage = bytes(imageUrl).length > 0;\\n    bool hasAnimation = bytes(animationUrl).length > 0;\\n    if (hasImage && hasAnimation) {\\n      return\\n        string(\\n          abi.encodePacked(\\n            'image\\\": \\\"',\\n            imageUrl,\\n            '?id=',\\n            numberToString(tokenOfEdition),\\n            '\\\", \\\"animation_url\\\": \\\"',\\n            animationUrl,\\n            '?id=',\\n            numberToString(tokenOfEdition),\\n            '\\\", \\\"'\\n          )\\n        );\\n    }\\n    if (hasImage) {\\n      return string(abi.encodePacked('image\\\": \\\"', imageUrl, '?id=', numberToString(tokenOfEdition), '\\\", \\\"'));\\n    }\\n    if (hasAnimation) {\\n      return string(abi.encodePacked('animation_url\\\": \\\"', animationUrl, '?id=', numberToString(tokenOfEdition), '\\\", \\\"'));\\n    }\\n\\n    return '';\\n  }\\n}\\n\",\"keccak256\":\"0x986935a51bd9bfc02371248ed0d59a1a1150ccd113a912626ae6c7c1ebe3f043\",\"license\":\"GPL-3.0\"},\"contracts/SlothVDF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// https://eprint.iacr.org/2015/366.pdf\\r\\n \\r\\npragma solidity ^0.8.11;\\r\\n \\r\\nlibrary SlothVDF {\\r\\n \\r\\n    /// @dev pow(base, exponent, modulus)\\r\\n    /// @param base base\\r\\n    /// @param exponent exponent\\r\\n    /// @param modulus modulus\\r\\n    function bexmod(\\r\\n        uint256 base,\\r\\n        uint256 exponent,\\r\\n        uint256 modulus\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 _result = 1;\\r\\n        uint256 _base = base;\\r\\n        for (; exponent > 0; exponent >>= 1) {\\r\\n            if (exponent & 1 == 1) {\\r\\n                _result = mulmod(_result, _base, modulus);\\r\\n            }\\r\\n \\r\\n            _base = mulmod(_base, _base, modulus);\\r\\n        }\\r\\n        return _result;\\r\\n    }\\r\\n \\r\\n    /// @dev compute sloth starting from seed, over prime, for iterations\\r\\n    /// @param _seed seed\\r\\n    /// @param _prime prime\\r\\n    /// @param _iterations number of iterations\\r\\n    /// @return sloth result\\r\\n    function compute(\\r\\n        uint256 _seed,\\r\\n        uint256 _prime,\\r\\n        uint256 _iterations\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 _exponent = (_prime + 1) >> 2;\\r\\n        _seed %= _prime;\\r\\n        for (uint256 i; i < _iterations; ++i) {\\r\\n            _seed = bexmod(_seed, _exponent, _prime);\\r\\n        }\\r\\n        return _seed;\\r\\n    }\\r\\n     \\r\\n    /// @dev verify sloth result proof, starting from seed, over prime, for iterations\\r\\n    /// @param _proof result\\r\\n    /// @param _seed seed\\r\\n    /// @param _prime prime\\r\\n    /// @param _iterations number of iterations\\r\\n    /// @return true if y is a quadratic residue modulo p\\r\\n    function verify(\\r\\n        uint256 _proof,\\r\\n        uint256 _seed,\\r\\n        uint256 _prime,\\r\\n        uint256 _iterations\\r\\n    ) internal pure returns (bool) {\\r\\n        for (uint256 i; i < _iterations; ++i) {\\r\\n            _proof = mulmod(_proof, _proof, _prime);\\r\\n        }\\r\\n        _seed %= _prime;\\r\\n        if (_seed == _proof) return true;\\r\\n        if (_prime - _seed == _proof) return true;\\r\\n        return false;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x1340874467ab5f225efbbdcc4ebd16c08d9cc3d7dad579a82b7ebbbb0f2ff5ce\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405260d1805460ff19169055600060d381905560d781905560d881905560d981905560da81905560db553480156200003957600080fd5b5060405162003354380380620033548339810160408190526200005c916200006e565b6001600160a01b0316608052620000a0565b6000602082840312156200008157600080fd5b81516001600160a01b03811681146200009957600080fd5b9392505050565b608051613298620000bc6000396000611a9f01526132986000f3fe60806040526004361061036b5760003560e01c8063715018a6116101c6578063b88d4fde116100f7578063e985e9c511610095578063f2fde38b1161006f578063f2fde38b14610908578063f4ed0f4614610928578063f51f96dd1461093e578063f71d96cb1461095457600080fd5b8063e985e9c5146108be578063ea880a20146108de578063f18aceda146108f357600080fd5b8063c87b56dd116100d1578063c87b56dd14610853578063ccbac9f514610873578063dd9633ce14610889578063e54b5760146108a957600080fd5b8063b88d4fde14610808578063c34f6b0d14610828578063c7ee005e1461083d57600080fd5b806395d89b4111610164578063a22cb4651161013e578063a22cb46514610793578063a66ff0af146107b3578063aba83150146107d3578063af1fe35c146107e857600080fd5b806395d89b41146107525780639b0ec5ae14610767578063a1ea842f1461077d57600080fd5b80638b5b9ccc116101a05780638b5b9ccc146106d95780638da5cb5b146106fb5780638e7ea5b21461071057806394a06ecf1461072557600080fd5b8063715018a6146106995780637284e416146106ae57806378e97925146106c357600080fd5b806329ec16dd116102a057806348ed45351161023e5780635dfd7a57116102185780635dfd7a57146106315780636352211e1461065157806364edfbf01461067157806370a082311461067957600080fd5b806348ed4535146105e75780635ad1016f146106095780635d495aea1461062957600080fd5b806342842e0e1161027a57806342842e0e1461057b57806342966c681461059b5780634358d2be146105bb5780634664611e146105d157600080fd5b806329ec16dd1461053e578063397b5b241461055e5780633eacd8a71461057357600080fd5b80630ed469b81161030d57806318160ddd116102e757806318160ddd146104d35780631919fed7146104e857806323b872dd146105085780632770c8951461052857600080fd5b80630ed469b81461048b5780630f6a9349146104a057806312065fe0146104c057600080fd5b806306fdde031161034957806306fdde03146103fa578063081812fc1461041c578063095ea7b3146104545780630b65b6e71461047657600080fd5b806301ffc9a71461037057806302fb0c5e146103a5578063063c67b7146103bf575b600080fd5b34801561037c57600080fd5b5061039061038b366004612829565b610974565b60405190151581526020015b60405180910390f35b3480156103b157600080fd5b5060d1546103909060ff1681565b3480156103cb57600080fd5b506103ec6103da366004612862565b60df6020526000908152604090205481565b60405190815260200161039c565b34801561040657600080fd5b5061040f6109c6565b60405161039c91906128cd565b34801561042857600080fd5b5061043c6104373660046128e0565b610a58565b6040516001600160a01b03909116815260200161039c565b34801561046057600080fd5b5061047461046f3660046128f9565b610a7f565b005b34801561048257600080fd5b506103ec610b99565b34801561049757600080fd5b506103ec610bcc565b3480156104ac57600080fd5b506103ec6104bb36600461296a565b610be5565b3480156104cc57600080fd5b50476103ec565b3480156104df57600080fd5b506103ec610c44565b3480156104f457600080fd5b506104746105033660046128e0565b610c51565b34801561051457600080fd5b50610474610523366004612a17565b610c95565b34801561053457600080fd5b506103ec60d05481565b34801561054a57600080fd5b50610474610559366004612a53565b610cc7565b34801561056a57600080fd5b5061040f610d48565b6103ec610dd6565b34801561058757600080fd5b50610474610596366004612a17565b610e5a565b3480156105a757600080fd5b506104746105b63660046128e0565b610e75565b3480156105c757600080fd5b506103ec60d85481565b3480156105dd57600080fd5b506103ec60db5481565b3480156105f357600080fd5b506105fc610ec5565b60405161039c9190612a8f565b34801561061557600080fd5b50610474610624366004612b6d565b610fb7565b6103ec611134565b34801561063d57600080fd5b506103ec61064c3660046128e0565b611391565b34801561065d57600080fd5b5061043c61066c3660046128e0565b6113f9565b6103ec611459565b34801561068557600080fd5b506103ec610694366004612862565b611697565b3480156106a557600080fd5b5061047461171d565b3480156106ba57600080fd5b5061040f611731565b3480156106cf57600080fd5b506103ec60d25481565b3480156106e557600080fd5b506106ee61173e565b60405161039c9190612c88565b34801561070757600080fd5b5061043c61179f565b34801561071c57600080fd5b506106ee6117b3565b34801561073157600080fd5b50610745610740366004612862565b611813565b60405161039c9190612cd5565b34801561075e57600080fd5b5061040f6118f3565b34801561077357600080fd5b506103ec60d65481565b34801561078957600080fd5b506103ec60d35481565b34801561079f57600080fd5b506104746107ae366004612a53565b611902565b3480156107bf57600080fd5b506103ec6107ce366004612862565b611911565b3480156107df57600080fd5b5061040f6119cd565b3480156107f457600080fd5b5061043c6108033660046128e0565b6119da565b34801561081457600080fd5b50610474610823366004612d0d565b611a04565b34801561083457600080fd5b506103ec611a3c565b34801561084957600080fd5b506103ec60d75481565b34801561085f57600080fd5b5061040f61086e3660046128e0565b611a4b565b34801561087f57600080fd5b506103ec60da5481565b34801561089557600080fd5b506104746108a43660046128e0565b611b44565b3480156108b557600080fd5b506103ec611b81565b3480156108ca57600080fd5b506103906108d9366004612d89565b611b90565b3480156108ea57600080fd5b50610474611bbe565b3480156108ff57600080fd5b50610474611bd2565b34801561091457600080fd5b50610474610923366004612862565b611be9565b34801561093457600080fd5b506103ec60cd5481565b34801561094a57600080fd5b506103ec60cf5481565b34801561096057600080fd5b5061043c61096f3660046128e0565b611c5f565b60006001600160e01b031982166380ac58cd60e01b14806109a557506001600160e01b03198216635b5e139f60e01b145b806109c057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060606580546109d590612dbc565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0190612dbc565b8015610a4e5780601f10610a2357610100808354040283529160200191610a4e565b820191906000526020600020905b815481529060010190602001808311610a3157829003601f168201915b5050505050905090565b6000610a6382611c6f565b506000908152606960205260409020546001600160a01b031690565b6000610a8a826113f9565b9050806001600160a01b0316836001600160a01b031603610afc5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610b185750610b188133611b90565b610b8a5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610af3565b610b948383611cce565b505050565b600060cd54600003610bac575060001990565b60c95460cd54610bbd906001612e06565b610bc79190612e19565b905090565b60006064610bdb47600f612e2c565b610bc79190612e61565b6000610bef611d3c565b610c3b5760405162461bcd60e51b815260206004820152601d60248201527f4e6565647320746f20626520616e20616c6c6f776564206d696e7465720000006044820152606401610af3565b6109c082611dab565b60006001610bbd60c95490565b610c59611e8c565b60cf8190556040518181527fa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d622906020015b60405180910390a150565b610ca0335b82611eeb565b610cbc5760405162461bcd60e51b8152600401610af390612e75565b610b94838383611f49565b610ccf611e8c565b6001600160a01b038216600090815260ce60205260409020805460ff1916821515179055610cfb611bd2565b4260d2819055604080516001600160a01b038516815260208101929092527f604ff4506f6b62a4f75e14f6f1c27a18b6b17654958bb77aaa5fabde3ca085fa910160405180910390a15050565b60cb8054610d5590612dbc565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8190612dbc565b8015610dce5780601f10610da357610100808354040283529160200191610dce565b820191906000526020600020905b815481529060010190602001808311610db157829003601f168201915b505050505081565b60d9805460009133919083610dea83612ec3565b9091555042610dfa600143612e19565b60405160609490941b6bffffffffffffffffffffffff191660208501526034840192909252605483015240607482015260940160408051601f19818403018152918152815160209283012033600090815260df9093529120555060d65490565b610b9483838360405180602001604052806000815250611a04565b610e7e33610c9a565b610eb95760405162461bcd60e51b815260206004820152600c60248201526b139bdd08185c1c1c9bdd995960a21b6044820152606401610af3565b610ec2816120e5565b50565b6060600060d35467ffffffffffffffff811115610ee457610ee4612923565b604051908082528060200260200182016040528015610f2957816020015b6040805180820190915260008082526020820152815260200190600190039081610f025790505b50905060005b60d354811015610fb15760dc8181548110610f4c57610f4c612edc565b60009182526020918290206040805180820190915260029092020180546001600160a01b0316825260010154918101919091528251839083908110610f9357610f93612edc565b60200260200101819052508080610fa990612ec3565b915050610f2f565b50919050565b600054610100900460ff1615808015610fd75750600054600160ff909116105b80610ff15750303b158015610ff1575060005460ff166001145b6110545760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610af3565b6000805460ff191660011790558015611077576000805461ff0019166101001790555b6110818b8b612180565b6110896121b1565b6110928c611be9565b60ca61109e8a82612f40565b5060cb6110ab8982612f40565b5060cc6110b88882612f40565b5060cd86905560cf85905560d084905560d783905560d88290556110e060c980546001019055565b8015611126576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050505050565b60d05460d454600091111561118b5760405162461bcd60e51b815260206004820152601c60248201527f446566696e65206d696e696d756d20706c61796572206e756d626572000000006044820152606401610af3565b60cd54611196610c44565b10156111f75760405162461bcd60e51b815260206004820152602a60248201527f526166666c65206d75737420636f6d706c657465206265666f7265207069636b60448201526934b733903bb4b73732b960b11b6064820152608401610af3565b600061123560da5460408051446020808301919091524282840152606080830194909452825180830390940184526080909101909152815191012090565b905060008060cd54836112489190613000565b905060d4818154811061125d5761125d612edc565b60009182526020822001546001600160a01b0316925061127b611a3c565b9050826001600160a01b03166108fc611292611a3c565b6040518115909202916000818181858888f193505050501580156112ba573d6000803e3d6000fd5b5060408051600081526020810191829052516112d89160d491612799565b506112e16121e0565b60d580546001810182556000919091527f51858de9989bf7441865ebdadbf7382c8838edbf830f5d86a9a51ac773676dd60180546001600160a01b0319166001600160a01b03851617905560db829055611339611bbe565b60db54604080516001600160a01b03861681526020810184905280820192909252517f7e57d825a2478cc8123a008d7d1e20c0f6e8cbca89a7bc100c9b05ecb3698deb9181900360600190a160db5494505050505090565b33600090815260df602052604081205460d75460d8546113b4928592909161220f565b6113f05760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b6044820152606401610af3565b60da9190915590565b6000818152606760205260408120546001600160a01b0316806109c05760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610af3565b60d15460009060ff166114cb5760405162461bcd60e51b815260206004820152603460248201527f526166666c6520686173206e6f7420737461727465642e204f776e6572206d7560448201527339ba1039b2ba20b8383937bb32b226b4b73a32b960611b6064820152608401610af3565b60cf54341461150f5760405162461bcd60e51b815260206004820152601060248201526f4e6f20736f757020666f7220796f752160801b6044820152606401610af3565b60408051600180825281830190925260009160208083019080368337019050509050338160008151811061154557611545612edc565b6001600160a01b039092166020928302919091019091015260d4805460018101825560009182527f9780e26d96b1f2a9a18ef8fc72d589dbf03ef788137b64f43897e83a91e7feec0180546001600160a01b0319163317905560d38054916115ac83612ec3565b90915550506040805180820182523380825260d354602080840191825260dc805460018101825560009190915284517f3162b0988d4210bff484413ed451d170a03887272177efc0b7d000f10abe9edf600290920291820180546001600160a01b0319166001600160a01b0390921691909117905591517f3162b0988d4210bff484413ed451d170a03887272177efc0b7d000f10abe9ee09092019190915560cf5484519081529081019190915290917f60a6c75698fadb72223808131f9f9bb9db3afa32122db6d94fb8fc985a504baa910160405180910390a161169082611dab565b9250505090565b60006001600160a01b0382166117015760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610af3565b506001600160a01b031660009081526068602052604090205490565b611725611e8c565b61172f600061227d565b565b60ca8054610d5590612dbc565b606060d4805480602002602001604051908101604052809291908181526020018280548015610a4e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611778575050505050905090565b6000610bc76097546001600160a01b031690565b606060d5805480602002602001604051908101604052809291908181526020018280548015610a4e576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611778575050505050905090565b6060600061182083611697565b905060008167ffffffffffffffff81111561183d5761183d612923565b604051908082528060200260200182016040528015611866578160200160208202803683370190505b509050600160005b838110801561187f575060cd548211155b156118e957600061188f836113f9565b9050866001600160a01b0316816001600160a01b0316036118d657828483815181106118bd576118bd612edc565b6020908102919091010152816118d281612ec3565b9250505b826118e081612ec3565b9350505061186e565b5090949350505050565b6060606680546109d590612dbc565b61190d3383836122cf565b5050565b600061191b611d3c565b6119675760405162461bcd60e51b815260206004820152601d60248201527f4e6565647320746f20626520616e20616c6c6f776564206d696e7465720000006044820152606401610af3565b60408051600180825281830190925260009160208083019080368337019050509050828160008151811061199d5761199d612edc565b60200260200101906001600160a01b031690816001600160a01b0316815250506119c681611dab565b9392505050565b60cc8054610d5590612dbc565b60d581815481106119ea57600080fd5b6000918252602090912001546001600160a01b0316905081565b611a0e3383611eeb565b611a2a5760405162461bcd60e51b8152600401610af390612e75565b611a368484848461239d565b50505050565b60006064610bdb476050612e2c565b6000818152606760205260409020546060906001600160a01b0316611a9d5760405162461bcd60e51b81526020600482015260086024820152672737903a37b5b2b760c11b6044820152606401610af3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663df30dba0611ad46109c6565b60ca60cc60cb8760cd546040518763ffffffff1660e01b8152600401611aff96959493929190613091565b600060405180830381865afa158015611b1c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109c091908101906130f4565b611b4c611e8c565b60d08190556040518181527f55656ebc8bf216cc8addf8bfb2e6f358f27d719a6b66e8e94be4af065e55714890602001610c8a565b60006064610bdb476005612e2c565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b611bc6611e8c565b60d1805460ff19169055565b611bda611e8c565b60d1805460ff19166001179055565b611bf1611e8c565b6001600160a01b038116611c565760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610af3565b610ec28161227d565b60d481815481106119ea57600080fd5b6000818152606760205260409020546001600160a01b0316610ec25760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610af3565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611d03826113f9565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600033611d4761179f565b6001600160a01b031603611d5b5750600190565b6000805260ce6020527fd3f5862f6f80175da7514904f3a889cc3cc8c4f3af5129e28cdeaee2baa6efc45460ff1615611d945750600190565b5033600090815260ce602052604090205460ff1690565b600080611db760c95490565b905060006001845183611dca9190612e06565b611dd49190612e19565b905060cd5460001480611de9575060cd548111155b611e205760405162461bcd60e51b815260206004820152600860248201526714dbdb19081bdd5d60c21b6044820152606401610af3565b80611e2a60c95490565b11611e8057611e6d8483611e3d60c95490565b611e479190612e19565b81518110611e5757611e57612edc565b6020026020010151611e6860c95490565b6123d0565b611e7b60c980546001019055565b611e20565b60c9545b949350505050565b33611e9561179f565b6001600160a01b03161461172f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610af3565b600080611ef7836113f9565b9050806001600160a01b0316846001600160a01b03161480611f1e5750611f1e8185611b90565b80611e845750836001600160a01b0316611f3784610a58565b6001600160a01b031614949350505050565b826001600160a01b0316611f5c826113f9565b6001600160a01b031614611fc05760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610af3565b6001600160a01b0382166120225760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610af3565b61202d600082611cce565b6001600160a01b0383166000908152606860205260408120805460019290612056908490612e19565b90915550506001600160a01b0382166000908152606860205260408120805460019290612084908490612e06565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006120f0826113f9565b90506120fd600083611cce565b6001600160a01b0381166000908152606860205260408120805460019290612126908490612e19565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600054610100900460ff166121a75760405162461bcd60e51b8152600401610af39061316b565b61190d8282612512565b600054610100900460ff166121d85760405162461bcd60e51b8152600401610af39061316b565b61172f612552565b6121e8611e8c565b61172f6121f361179f565b6064612200476014612e2c565b61220a9190612e61565b612582565b6000805b8281101561223e57838061222957612229612e4b565b868709955061223781612ec3565b9050612213565b506122498385613000565b935084840361225a57506001611e84565b846122658585612e19565b0361227257506001611e84565b506000949350505050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036123305760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610af3565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6123a8848484611f49565b6123b48484848461269b565b611a365760405162461bcd60e51b8152600401610af3906131b6565b6001600160a01b0382166124265760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610af3565b6000818152606760205260409020546001600160a01b03161561248b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610af3565b6001600160a01b03821660009081526068602052604081208054600192906124b4908490612e06565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600054610100900460ff166125395760405162461bcd60e51b8152600401610af39061316b565b60656125458382612f40565b506066610b948282612f40565b600054610100900460ff166125795760405162461bcd60e51b8152600401610af39061316b565b61172f3361227d565b804710156125d25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610af3565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461261f576040519150601f19603f3d011682016040523d82523d6000602084013e612624565b606091505b5050905080610b945760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610af3565b60006001600160a01b0384163b1561279157604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906126df903390899088908890600401613208565b6020604051808303816000875af192505050801561271a575060408051601f3d908101601f1916820190925261271791810190613245565b60015b612777573d808015612748576040519150601f19603f3d011682016040523d82523d6000602084013e61274d565b606091505b50805160000361276f5760405162461bcd60e51b8152600401610af3906131b6565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611e84565b506001611e84565b8280548282559060005260206000209081019282156127ee579160200282015b828111156127ee57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906127b9565b506127fa9291506127fe565b5090565b5b808211156127fa57600081556001016127ff565b6001600160e01b031981168114610ec257600080fd5b60006020828403121561283b57600080fd5b81356119c681612813565b80356001600160a01b038116811461285d57600080fd5b919050565b60006020828403121561287457600080fd5b6119c682612846565b60005b83811015612898578181015183820152602001612880565b50506000910152565b600081518084526128b981602086016020860161287d565b601f01601f19169290920160200192915050565b6020815260006119c660208301846128a1565b6000602082840312156128f257600080fd5b5035919050565b6000806040838503121561290c57600080fd5b61291583612846565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561296257612962612923565b604052919050565b6000602080838503121561297d57600080fd5b823567ffffffffffffffff8082111561299557600080fd5b818501915085601f8301126129a957600080fd5b8135818111156129bb576129bb612923565b8060051b91506129cc848301612939565b81815291830184019184810190888411156129e657600080fd5b938501935b83851015612a0b576129fc85612846565b825293850193908501906129eb565b98975050505050505050565b600080600060608486031215612a2c57600080fd5b612a3584612846565b9250612a4360208501612846565b9150604084013590509250925092565b60008060408385031215612a6657600080fd5b612a6f83612846565b915060208301358015158114612a8457600080fd5b809150509250929050565b602080825282518282018190526000919060409081850190868401855b82811015612ada57815180516001600160a01b03168552860151868501529284019290850190600101612aac565b5091979650505050505050565b600067ffffffffffffffff821115612b0157612b01612923565b50601f01601f191660200190565b6000612b22612b1d84612ae7565b612939565b9050828152838383011115612b3657600080fd5b828260208301376000602084830101529392505050565b600082601f830112612b5e57600080fd5b6119c683833560208501612b0f565b60008060008060008060008060008060006101608c8e031215612b8f57600080fd5b612b988c612846565b9a5067ffffffffffffffff8060208e01351115612bb457600080fd5b612bc48e60208f01358f01612b4d565b9a508060408e01351115612bd757600080fd5b612be78e60408f01358f01612b4d565b99508060608e01351115612bfa57600080fd5b612c0a8e60608f01358f01612b4d565b98508060808e01351115612c1d57600080fd5b612c2d8e60808f01358f01612b4d565b97508060a08e01351115612c4057600080fd5b50612c518d60a08e01358e01612b4d565b9a9d999c50979a9699959895975050505060c08401359360e081013593610100820135935061012082013592506101409091013590565b6020808252825182820181905260009190848201906040850190845b81811015612cc95783516001600160a01b031683529284019291840191600101612ca4565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612cc957835183529284019291840191600101612cf1565b60008060008060808587031215612d2357600080fd5b612d2c85612846565b9350612d3a60208601612846565b925060408501359150606085013567ffffffffffffffff811115612d5d57600080fd5b8501601f81018713612d6e57600080fd5b612d7d87823560208401612b0f565b91505092959194509250565b60008060408385031215612d9c57600080fd5b612da583612846565b9150612db360208401612846565b90509250929050565b600181811c90821680612dd057607f821691505b602082108103610fb157634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156109c0576109c0612df0565b818103818111156109c0576109c0612df0565b6000816000190483118215151615612e4657612e46612df0565b500290565b634e487b7160e01b600052601260045260246000fd5b600082612e7057612e70612e4b565b500490565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b600060018201612ed557612ed5612df0565b5060010190565b634e487b7160e01b600052603260045260246000fd5b601f821115610b9457600081815260208120601f850160051c81016020861015612f195750805b601f850160051c820191505b81811015612f3857828155600101612f25565b505050505050565b815167ffffffffffffffff811115612f5a57612f5a612923565b612f6e81612f688454612dbc565b84612ef2565b602080601f831160018114612fa35760008415612f8b5750858301515b600019600386901b1c1916600185901b178555612f38565b600085815260208120601f198616915b82811015612fd257888601518255948401946001909101908401612fb3565b5085821015612ff05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008261300f5761300f612e4b565b500690565b6000815461302181612dbc565b80855260206001838116801561303e576001811461305857613086565b60ff1985168884015283151560051b880183019550613086565b866000528260002060005b8581101561307e5781548a8201860152908301908401613063565b890184019650505b505050505092915050565b60c0815260006130a460c08301896128a1565b82810360208401526130b68189613014565b905082810360408401526130ca8188613014565b905082810360608401526130de8187613014565b6080840195909552505060a00152949350505050565b60006020828403121561310657600080fd5b815167ffffffffffffffff81111561311d57600080fd5b8201601f8101841361312e57600080fd5b805161313c612b1d82612ae7565b81815285602083850101111561315157600080fd5b61316282602083016020860161287d565b95945050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061323b908301846128a1565b9695505050505050565b60006020828403121561325757600080fd5b81516119c68161281356fea2646970667358221220802b0e92d0c19fcc6c751eedbf20deef5cb829eabaaa903f43e0da983441225864736f6c63430008100033",
  "deployedBytecode": "0x60806040526004361061036b5760003560e01c8063715018a6116101c6578063b88d4fde116100f7578063e985e9c511610095578063f2fde38b1161006f578063f2fde38b14610908578063f4ed0f4614610928578063f51f96dd1461093e578063f71d96cb1461095457600080fd5b8063e985e9c5146108be578063ea880a20146108de578063f18aceda146108f357600080fd5b8063c87b56dd116100d1578063c87b56dd14610853578063ccbac9f514610873578063dd9633ce14610889578063e54b5760146108a957600080fd5b8063b88d4fde14610808578063c34f6b0d14610828578063c7ee005e1461083d57600080fd5b806395d89b4111610164578063a22cb4651161013e578063a22cb46514610793578063a66ff0af146107b3578063aba83150146107d3578063af1fe35c146107e857600080fd5b806395d89b41146107525780639b0ec5ae14610767578063a1ea842f1461077d57600080fd5b80638b5b9ccc116101a05780638b5b9ccc146106d95780638da5cb5b146106fb5780638e7ea5b21461071057806394a06ecf1461072557600080fd5b8063715018a6146106995780637284e416146106ae57806378e97925146106c357600080fd5b806329ec16dd116102a057806348ed45351161023e5780635dfd7a57116102185780635dfd7a57146106315780636352211e1461065157806364edfbf01461067157806370a082311461067957600080fd5b806348ed4535146105e75780635ad1016f146106095780635d495aea1461062957600080fd5b806342842e0e1161027a57806342842e0e1461057b57806342966c681461059b5780634358d2be146105bb5780634664611e146105d157600080fd5b806329ec16dd1461053e578063397b5b241461055e5780633eacd8a71461057357600080fd5b80630ed469b81161030d57806318160ddd116102e757806318160ddd146104d35780631919fed7146104e857806323b872dd146105085780632770c8951461052857600080fd5b80630ed469b81461048b5780630f6a9349146104a057806312065fe0146104c057600080fd5b806306fdde031161034957806306fdde03146103fa578063081812fc1461041c578063095ea7b3146104545780630b65b6e71461047657600080fd5b806301ffc9a71461037057806302fb0c5e146103a5578063063c67b7146103bf575b600080fd5b34801561037c57600080fd5b5061039061038b366004612829565b610974565b60405190151581526020015b60405180910390f35b3480156103b157600080fd5b5060d1546103909060ff1681565b3480156103cb57600080fd5b506103ec6103da366004612862565b60df6020526000908152604090205481565b60405190815260200161039c565b34801561040657600080fd5b5061040f6109c6565b60405161039c91906128cd565b34801561042857600080fd5b5061043c6104373660046128e0565b610a58565b6040516001600160a01b03909116815260200161039c565b34801561046057600080fd5b5061047461046f3660046128f9565b610a7f565b005b34801561048257600080fd5b506103ec610b99565b34801561049757600080fd5b506103ec610bcc565b3480156104ac57600080fd5b506103ec6104bb36600461296a565b610be5565b3480156104cc57600080fd5b50476103ec565b3480156104df57600080fd5b506103ec610c44565b3480156104f457600080fd5b506104746105033660046128e0565b610c51565b34801561051457600080fd5b50610474610523366004612a17565b610c95565b34801561053457600080fd5b506103ec60d05481565b34801561054a57600080fd5b50610474610559366004612a53565b610cc7565b34801561056a57600080fd5b5061040f610d48565b6103ec610dd6565b34801561058757600080fd5b50610474610596366004612a17565b610e5a565b3480156105a757600080fd5b506104746105b63660046128e0565b610e75565b3480156105c757600080fd5b506103ec60d85481565b3480156105dd57600080fd5b506103ec60db5481565b3480156105f357600080fd5b506105fc610ec5565b60405161039c9190612a8f565b34801561061557600080fd5b50610474610624366004612b6d565b610fb7565b6103ec611134565b34801561063d57600080fd5b506103ec61064c3660046128e0565b611391565b34801561065d57600080fd5b5061043c61066c3660046128e0565b6113f9565b6103ec611459565b34801561068557600080fd5b506103ec610694366004612862565b611697565b3480156106a557600080fd5b5061047461171d565b3480156106ba57600080fd5b5061040f611731565b3480156106cf57600080fd5b506103ec60d25481565b3480156106e557600080fd5b506106ee61173e565b60405161039c9190612c88565b34801561070757600080fd5b5061043c61179f565b34801561071c57600080fd5b506106ee6117b3565b34801561073157600080fd5b50610745610740366004612862565b611813565b60405161039c9190612cd5565b34801561075e57600080fd5b5061040f6118f3565b34801561077357600080fd5b506103ec60d65481565b34801561078957600080fd5b506103ec60d35481565b34801561079f57600080fd5b506104746107ae366004612a53565b611902565b3480156107bf57600080fd5b506103ec6107ce366004612862565b611911565b3480156107df57600080fd5b5061040f6119cd565b3480156107f457600080fd5b5061043c6108033660046128e0565b6119da565b34801561081457600080fd5b50610474610823366004612d0d565b611a04565b34801561083457600080fd5b506103ec611a3c565b34801561084957600080fd5b506103ec60d75481565b34801561085f57600080fd5b5061040f61086e3660046128e0565b611a4b565b34801561087f57600080fd5b506103ec60da5481565b34801561089557600080fd5b506104746108a43660046128e0565b611b44565b3480156108b557600080fd5b506103ec611b81565b3480156108ca57600080fd5b506103906108d9366004612d89565b611b90565b3480156108ea57600080fd5b50610474611bbe565b3480156108ff57600080fd5b50610474611bd2565b34801561091457600080fd5b50610474610923366004612862565b611be9565b34801561093457600080fd5b506103ec60cd5481565b34801561094a57600080fd5b506103ec60cf5481565b34801561096057600080fd5b5061043c61096f3660046128e0565b611c5f565b60006001600160e01b031982166380ac58cd60e01b14806109a557506001600160e01b03198216635b5e139f60e01b145b806109c057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060606580546109d590612dbc565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0190612dbc565b8015610a4e5780601f10610a2357610100808354040283529160200191610a4e565b820191906000526020600020905b815481529060010190602001808311610a3157829003601f168201915b5050505050905090565b6000610a6382611c6f565b506000908152606960205260409020546001600160a01b031690565b6000610a8a826113f9565b9050806001600160a01b0316836001600160a01b031603610afc5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610b185750610b188133611b90565b610b8a5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610af3565b610b948383611cce565b505050565b600060cd54600003610bac575060001990565b60c95460cd54610bbd906001612e06565b610bc79190612e19565b905090565b60006064610bdb47600f612e2c565b610bc79190612e61565b6000610bef611d3c565b610c3b5760405162461bcd60e51b815260206004820152601d60248201527f4e6565647320746f20626520616e20616c6c6f776564206d696e7465720000006044820152606401610af3565b6109c082611dab565b60006001610bbd60c95490565b610c59611e8c565b60cf8190556040518181527fa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d622906020015b60405180910390a150565b610ca0335b82611eeb565b610cbc5760405162461bcd60e51b8152600401610af390612e75565b610b94838383611f49565b610ccf611e8c565b6001600160a01b038216600090815260ce60205260409020805460ff1916821515179055610cfb611bd2565b4260d2819055604080516001600160a01b038516815260208101929092527f604ff4506f6b62a4f75e14f6f1c27a18b6b17654958bb77aaa5fabde3ca085fa910160405180910390a15050565b60cb8054610d5590612dbc565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8190612dbc565b8015610dce5780601f10610da357610100808354040283529160200191610dce565b820191906000526020600020905b815481529060010190602001808311610db157829003601f168201915b505050505081565b60d9805460009133919083610dea83612ec3565b9091555042610dfa600143612e19565b60405160609490941b6bffffffffffffffffffffffff191660208501526034840192909252605483015240607482015260940160408051601f19818403018152918152815160209283012033600090815260df9093529120555060d65490565b610b9483838360405180602001604052806000815250611a04565b610e7e33610c9a565b610eb95760405162461bcd60e51b815260206004820152600c60248201526b139bdd08185c1c1c9bdd995960a21b6044820152606401610af3565b610ec2816120e5565b50565b6060600060d35467ffffffffffffffff811115610ee457610ee4612923565b604051908082528060200260200182016040528015610f2957816020015b6040805180820190915260008082526020820152815260200190600190039081610f025790505b50905060005b60d354811015610fb15760dc8181548110610f4c57610f4c612edc565b60009182526020918290206040805180820190915260029092020180546001600160a01b0316825260010154918101919091528251839083908110610f9357610f93612edc565b60200260200101819052508080610fa990612ec3565b915050610f2f565b50919050565b600054610100900460ff1615808015610fd75750600054600160ff909116105b80610ff15750303b158015610ff1575060005460ff166001145b6110545760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610af3565b6000805460ff191660011790558015611077576000805461ff0019166101001790555b6110818b8b612180565b6110896121b1565b6110928c611be9565b60ca61109e8a82612f40565b5060cb6110ab8982612f40565b5060cc6110b88882612f40565b5060cd86905560cf85905560d084905560d783905560d88290556110e060c980546001019055565b8015611126576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050505050565b60d05460d454600091111561118b5760405162461bcd60e51b815260206004820152601c60248201527f446566696e65206d696e696d756d20706c61796572206e756d626572000000006044820152606401610af3565b60cd54611196610c44565b10156111f75760405162461bcd60e51b815260206004820152602a60248201527f526166666c65206d75737420636f6d706c657465206265666f7265207069636b60448201526934b733903bb4b73732b960b11b6064820152608401610af3565b600061123560da5460408051446020808301919091524282840152606080830194909452825180830390940184526080909101909152815191012090565b905060008060cd54836112489190613000565b905060d4818154811061125d5761125d612edc565b60009182526020822001546001600160a01b0316925061127b611a3c565b9050826001600160a01b03166108fc611292611a3c565b6040518115909202916000818181858888f193505050501580156112ba573d6000803e3d6000fd5b5060408051600081526020810191829052516112d89160d491612799565b506112e16121e0565b60d580546001810182556000919091527f51858de9989bf7441865ebdadbf7382c8838edbf830f5d86a9a51ac773676dd60180546001600160a01b0319166001600160a01b03851617905560db829055611339611bbe565b60db54604080516001600160a01b03861681526020810184905280820192909252517f7e57d825a2478cc8123a008d7d1e20c0f6e8cbca89a7bc100c9b05ecb3698deb9181900360600190a160db5494505050505090565b33600090815260df602052604081205460d75460d8546113b4928592909161220f565b6113f05760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b6044820152606401610af3565b60da9190915590565b6000818152606760205260408120546001600160a01b0316806109c05760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610af3565b60d15460009060ff166114cb5760405162461bcd60e51b815260206004820152603460248201527f526166666c6520686173206e6f7420737461727465642e204f776e6572206d7560448201527339ba1039b2ba20b8383937bb32b226b4b73a32b960611b6064820152608401610af3565b60cf54341461150f5760405162461bcd60e51b815260206004820152601060248201526f4e6f20736f757020666f7220796f752160801b6044820152606401610af3565b60408051600180825281830190925260009160208083019080368337019050509050338160008151811061154557611545612edc565b6001600160a01b039092166020928302919091019091015260d4805460018101825560009182527f9780e26d96b1f2a9a18ef8fc72d589dbf03ef788137b64f43897e83a91e7feec0180546001600160a01b0319163317905560d38054916115ac83612ec3565b90915550506040805180820182523380825260d354602080840191825260dc805460018101825560009190915284517f3162b0988d4210bff484413ed451d170a03887272177efc0b7d000f10abe9edf600290920291820180546001600160a01b0319166001600160a01b0390921691909117905591517f3162b0988d4210bff484413ed451d170a03887272177efc0b7d000f10abe9ee09092019190915560cf5484519081529081019190915290917f60a6c75698fadb72223808131f9f9bb9db3afa32122db6d94fb8fc985a504baa910160405180910390a161169082611dab565b9250505090565b60006001600160a01b0382166117015760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610af3565b506001600160a01b031660009081526068602052604090205490565b611725611e8c565b61172f600061227d565b565b60ca8054610d5590612dbc565b606060d4805480602002602001604051908101604052809291908181526020018280548015610a4e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611778575050505050905090565b6000610bc76097546001600160a01b031690565b606060d5805480602002602001604051908101604052809291908181526020018280548015610a4e576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611778575050505050905090565b6060600061182083611697565b905060008167ffffffffffffffff81111561183d5761183d612923565b604051908082528060200260200182016040528015611866578160200160208202803683370190505b509050600160005b838110801561187f575060cd548211155b156118e957600061188f836113f9565b9050866001600160a01b0316816001600160a01b0316036118d657828483815181106118bd576118bd612edc565b6020908102919091010152816118d281612ec3565b9250505b826118e081612ec3565b9350505061186e565b5090949350505050565b6060606680546109d590612dbc565b61190d3383836122cf565b5050565b600061191b611d3c565b6119675760405162461bcd60e51b815260206004820152601d60248201527f4e6565647320746f20626520616e20616c6c6f776564206d696e7465720000006044820152606401610af3565b60408051600180825281830190925260009160208083019080368337019050509050828160008151811061199d5761199d612edc565b60200260200101906001600160a01b031690816001600160a01b0316815250506119c681611dab565b9392505050565b60cc8054610d5590612dbc565b60d581815481106119ea57600080fd5b6000918252602090912001546001600160a01b0316905081565b611a0e3383611eeb565b611a2a5760405162461bcd60e51b8152600401610af390612e75565b611a368484848461239d565b50505050565b60006064610bdb476050612e2c565b6000818152606760205260409020546060906001600160a01b0316611a9d5760405162461bcd60e51b81526020600482015260086024820152672737903a37b5b2b760c11b6044820152606401610af3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663df30dba0611ad46109c6565b60ca60cc60cb8760cd546040518763ffffffff1660e01b8152600401611aff96959493929190613091565b600060405180830381865afa158015611b1c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109c091908101906130f4565b611b4c611e8c565b60d08190556040518181527f55656ebc8bf216cc8addf8bfb2e6f358f27d719a6b66e8e94be4af065e55714890602001610c8a565b60006064610bdb476005612e2c565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b611bc6611e8c565b60d1805460ff19169055565b611bda611e8c565b60d1805460ff19166001179055565b611bf1611e8c565b6001600160a01b038116611c565760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610af3565b610ec28161227d565b60d481815481106119ea57600080fd5b6000818152606760205260409020546001600160a01b0316610ec25760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610af3565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611d03826113f9565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600033611d4761179f565b6001600160a01b031603611d5b5750600190565b6000805260ce6020527fd3f5862f6f80175da7514904f3a889cc3cc8c4f3af5129e28cdeaee2baa6efc45460ff1615611d945750600190565b5033600090815260ce602052604090205460ff1690565b600080611db760c95490565b905060006001845183611dca9190612e06565b611dd49190612e19565b905060cd5460001480611de9575060cd548111155b611e205760405162461bcd60e51b815260206004820152600860248201526714dbdb19081bdd5d60c21b6044820152606401610af3565b80611e2a60c95490565b11611e8057611e6d8483611e3d60c95490565b611e479190612e19565b81518110611e5757611e57612edc565b6020026020010151611e6860c95490565b6123d0565b611e7b60c980546001019055565b611e20565b60c9545b949350505050565b33611e9561179f565b6001600160a01b03161461172f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610af3565b600080611ef7836113f9565b9050806001600160a01b0316846001600160a01b03161480611f1e5750611f1e8185611b90565b80611e845750836001600160a01b0316611f3784610a58565b6001600160a01b031614949350505050565b826001600160a01b0316611f5c826113f9565b6001600160a01b031614611fc05760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610af3565b6001600160a01b0382166120225760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610af3565b61202d600082611cce565b6001600160a01b0383166000908152606860205260408120805460019290612056908490612e19565b90915550506001600160a01b0382166000908152606860205260408120805460019290612084908490612e06565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006120f0826113f9565b90506120fd600083611cce565b6001600160a01b0381166000908152606860205260408120805460019290612126908490612e19565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600054610100900460ff166121a75760405162461bcd60e51b8152600401610af39061316b565b61190d8282612512565b600054610100900460ff166121d85760405162461bcd60e51b8152600401610af39061316b565b61172f612552565b6121e8611e8c565b61172f6121f361179f565b6064612200476014612e2c565b61220a9190612e61565b612582565b6000805b8281101561223e57838061222957612229612e4b565b868709955061223781612ec3565b9050612213565b506122498385613000565b935084840361225a57506001611e84565b846122658585612e19565b0361227257506001611e84565b506000949350505050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036123305760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610af3565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6123a8848484611f49565b6123b48484848461269b565b611a365760405162461bcd60e51b8152600401610af3906131b6565b6001600160a01b0382166124265760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610af3565b6000818152606760205260409020546001600160a01b03161561248b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610af3565b6001600160a01b03821660009081526068602052604081208054600192906124b4908490612e06565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600054610100900460ff166125395760405162461bcd60e51b8152600401610af39061316b565b60656125458382612f40565b506066610b948282612f40565b600054610100900460ff166125795760405162461bcd60e51b8152600401610af39061316b565b61172f3361227d565b804710156125d25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610af3565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461261f576040519150601f19603f3d011682016040523d82523d6000602084013e612624565b606091505b5050905080610b945760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610af3565b60006001600160a01b0384163b1561279157604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906126df903390899088908890600401613208565b6020604051808303816000875af192505050801561271a575060408051601f3d908101601f1916820190925261271791810190613245565b60015b612777573d808015612748576040519150601f19603f3d011682016040523d82523d6000602084013e61274d565b606091505b50805160000361276f5760405162461bcd60e51b8152600401610af3906131b6565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611e84565b506001611e84565b8280548282559060005260206000209081019282156127ee579160200282015b828111156127ee57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906127b9565b506127fa9291506127fe565b5090565b5b808211156127fa57600081556001016127ff565b6001600160e01b031981168114610ec257600080fd5b60006020828403121561283b57600080fd5b81356119c681612813565b80356001600160a01b038116811461285d57600080fd5b919050565b60006020828403121561287457600080fd5b6119c682612846565b60005b83811015612898578181015183820152602001612880565b50506000910152565b600081518084526128b981602086016020860161287d565b601f01601f19169290920160200192915050565b6020815260006119c660208301846128a1565b6000602082840312156128f257600080fd5b5035919050565b6000806040838503121561290c57600080fd5b61291583612846565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561296257612962612923565b604052919050565b6000602080838503121561297d57600080fd5b823567ffffffffffffffff8082111561299557600080fd5b818501915085601f8301126129a957600080fd5b8135818111156129bb576129bb612923565b8060051b91506129cc848301612939565b81815291830184019184810190888411156129e657600080fd5b938501935b83851015612a0b576129fc85612846565b825293850193908501906129eb565b98975050505050505050565b600080600060608486031215612a2c57600080fd5b612a3584612846565b9250612a4360208501612846565b9150604084013590509250925092565b60008060408385031215612a6657600080fd5b612a6f83612846565b915060208301358015158114612a8457600080fd5b809150509250929050565b602080825282518282018190526000919060409081850190868401855b82811015612ada57815180516001600160a01b03168552860151868501529284019290850190600101612aac565b5091979650505050505050565b600067ffffffffffffffff821115612b0157612b01612923565b50601f01601f191660200190565b6000612b22612b1d84612ae7565b612939565b9050828152838383011115612b3657600080fd5b828260208301376000602084830101529392505050565b600082601f830112612b5e57600080fd5b6119c683833560208501612b0f565b60008060008060008060008060008060006101608c8e031215612b8f57600080fd5b612b988c612846565b9a5067ffffffffffffffff8060208e01351115612bb457600080fd5b612bc48e60208f01358f01612b4d565b9a508060408e01351115612bd757600080fd5b612be78e60408f01358f01612b4d565b99508060608e01351115612bfa57600080fd5b612c0a8e60608f01358f01612b4d565b98508060808e01351115612c1d57600080fd5b612c2d8e60808f01358f01612b4d565b97508060a08e01351115612c4057600080fd5b50612c518d60a08e01358e01612b4d565b9a9d999c50979a9699959895975050505060c08401359360e081013593610100820135935061012082013592506101409091013590565b6020808252825182820181905260009190848201906040850190845b81811015612cc95783516001600160a01b031683529284019291840191600101612ca4565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612cc957835183529284019291840191600101612cf1565b60008060008060808587031215612d2357600080fd5b612d2c85612846565b9350612d3a60208601612846565b925060408501359150606085013567ffffffffffffffff811115612d5d57600080fd5b8501601f81018713612d6e57600080fd5b612d7d87823560208401612b0f565b91505092959194509250565b60008060408385031215612d9c57600080fd5b612da583612846565b9150612db360208401612846565b90509250929050565b600181811c90821680612dd057607f821691505b602082108103610fb157634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156109c0576109c0612df0565b818103818111156109c0576109c0612df0565b6000816000190483118215151615612e4657612e46612df0565b500290565b634e487b7160e01b600052601260045260246000fd5b600082612e7057612e70612e4b565b500490565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b600060018201612ed557612ed5612df0565b5060010190565b634e487b7160e01b600052603260045260246000fd5b601f821115610b9457600081815260208120601f850160051c81016020861015612f195750805b601f850160051c820191505b81811015612f3857828155600101612f25565b505050505050565b815167ffffffffffffffff811115612f5a57612f5a612923565b612f6e81612f688454612dbc565b84612ef2565b602080601f831160018114612fa35760008415612f8b5750858301515b600019600386901b1c1916600185901b178555612f38565b600085815260208120601f198616915b82811015612fd257888601518255948401946001909101908401612fb3565b5085821015612ff05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008261300f5761300f612e4b565b500690565b6000815461302181612dbc565b80855260206001838116801561303e576001811461305857613086565b60ff1985168884015283151560051b880183019550613086565b866000528260002060005b8581101561307e5781548a8201860152908301908401613063565b890184019650505b505050505092915050565b60c0815260006130a460c08301896128a1565b82810360208401526130b68189613014565b905082810360408401526130ca8188613014565b905082810360608401526130de8187613014565b6080840195909552505060a00152949350505050565b60006020828403121561310657600080fd5b815167ffffffffffffffff81111561311d57600080fd5b8201601f8101841361312e57600080fd5b805161313c612b1d82612ae7565b81815285602083850101111561315157600080fd5b61316282602083016020860161287d565b95945050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061323b908301846128a1565b9695505050505050565b60006020828403121561325757600080fd5b81516119c68161281356fea2646970667358221220802b0e92d0c19fcc6c751eedbf20deef5cb829eabaaa903f43e0da983441225864736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "params": {
          "tokenId": "Token ID to burn User burn function for token id "
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "returns the number of minted tokens within the edition"
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "numberCanMint()": {
        "notice": "Returns the number of editions allowed to mint (max_uint256 when open edition)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 820,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 823,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3165,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3509,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1120,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 1122,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 1126,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1130,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1134,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1140,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1982,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 593,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 713,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4566,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "atEditionId",
        "offset": 0,
        "slot": "201",
        "type": "t_struct(Counter)3172_storage"
      },
      {
        "astId": 4596,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "description",
        "offset": 0,
        "slot": "202",
        "type": "t_string_storage"
      },
      {
        "astId": 4598,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "animationUrl",
        "offset": 0,
        "slot": "203",
        "type": "t_string_storage"
      },
      {
        "astId": 4600,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "imageUrl",
        "offset": 0,
        "slot": "204",
        "type": "t_string_storage"
      },
      {
        "astId": 4602,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "editionSize",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 4606,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "allowedMinters",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4608,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "salePrice",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 4610,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "minPlayers",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 4613,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "active",
        "offset": 0,
        "slot": "209",
        "type": "t_bool"
      },
      {
        "astId": 4615,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "startTime",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 4618,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "EntryCount",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 4621,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "players",
        "offset": 0,
        "slot": "212",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 4624,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "RaffleWinner",
        "offset": 0,
        "slot": "213",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 4626,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "newSeed",
        "offset": 0,
        "slot": "214",
        "type": "t_uint256"
      },
      {
        "astId": 4629,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "prime",
        "offset": 0,
        "slot": "215",
        "type": "t_uint256"
      },
      {
        "astId": 4632,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "iterations",
        "offset": 0,
        "slot": "216",
        "type": "t_uint256"
      },
      {
        "astId": 4635,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "nonce",
        "offset": 0,
        "slot": "217",
        "type": "t_uint256"
      },
      {
        "astId": 4638,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "randomNumber",
        "offset": 0,
        "slot": "218",
        "type": "t_uint256"
      },
      {
        "astId": 4641,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "winningNumber",
        "offset": 0,
        "slot": "219",
        "type": "t_uint256"
      },
      {
        "astId": 4645,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "entry",
        "offset": 0,
        "slot": "220",
        "type": "t_array(t_struct(Entry)4662_storage)dyn_storage"
      },
      {
        "astId": 4649,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "addressToIndex",
        "offset": 0,
        "slot": "221",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4653,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "playerToIndex",
        "offset": 0,
        "slot": "222",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 4657,
        "contract": "contracts/RaffleNft.sol:RaffleNft",
        "label": "seed",
        "offset": 0,
        "slot": "223",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Entry)4662_storage)dyn_storage": {
        "base": "t_struct(Entry)4662_storage",
        "encoding": "dynamic_array",
        "label": "struct RaffleNft.Entry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)3172_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 3171,
            "contract": "contracts/RaffleNft.sol:RaffleNft",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Entry)4662_storage": {
        "encoding": "inplace",
        "label": "struct RaffleNft.Entry",
        "members": [
          {
            "astId": 4659,
            "contract": "contracts/RaffleNft.sol:RaffleNft",
            "label": "player",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4661,
            "contract": "contracts/RaffleNft.sol:RaffleNft",
            "label": "EntryNumber",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
