{
  "address": "0x84F1962ae2A92D1538eAD606467b513328EE28B6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "CollectionAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "createCollectionPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_accountOpenCost",
          "type": "uint256"
        }
      ],
      "name": "updateAccountOpenCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_txCost",
          "type": "uint256"
        }
      ],
      "name": "updateTransactionCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accountOpenCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchCollectionPool",
      "outputs": [
        {
          "internalType": "contract CollectionPool",
          "name": "userData",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "txCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x17972c38c831b5477f646b227d36a9b77c6883c804f52aaf8ac92b6397d56ba5",
  "receipt": {
    "to": null,
    "from": "0x8406A51A0E1B5F52Ff61226773e6328e5Da5d964",
    "contractAddress": "0xc92B7E6Cd47339e90bb58223A79476EfA9247a18",
    "transactionIndex": 0,
    "gasUsed": "1162144",
    "logsBloom": "0x
    "blockHash": "0xf03b29448bc6b6fd62eb318fdb7e97421bef11f379c847d5c0951e607fd59044",
    "transactionHash": "0x17972c38c831b5477f646b227d36a9b77c6883c804f52aaf8ac92b6397d56ba5",
    "logs": [],
    "blockNumber": 17316917,
    "cumulativeGasUsed": "1162144",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "792b8885f56bd928b21357114c6f0121",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"CollectionAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accountOpenCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createCollectionPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchCollectionPool\",\"outputs\":[{\"internalType\":\"contract CollectionPool\",\"name\":\"userData\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_accountOpenCost\",\"type\":\"uint256\"}],\"name\":\"updateAccountOpenCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txCost\",\"type\":\"uint256\"}],\"name\":\"updateTransactionCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CollectionPoolFactory.sol\":\"CollectionPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CollectionPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\n\\r\\nimport \\\"./CollectionPoolFactory.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Address Pool\\r\\n * @dev Store collections and make transfers\\r\\n */\\r\\ncontract CollectionPool {\\r\\n    uint256 private _totalCollections;\\r\\n    uint256 private _securityTimelock;\\r\\n    uint256 private _lastTimelockUpdate;\\r\\n    CollectionPoolFactory private _factory;\\r\\n\\r\\n    struct Collection {\\r\\n        string name;\\r\\n        string symbol;\\r\\n        address wallet;\\r\\n        uint256 dateAdded;\\r\\n    }\\r\\n\\r\\n    // Array of Collection structs (collections in address pool)\\r\\n    Collection[] private collections;\\r\\n\\r\\n    // Mapping to retrieve Array index from address or name\\r\\n    mapping(address => uint256) private addressToIndex;\\r\\n    mapping(string => uint256) private nameToIndex;\\r\\n    mapping(string => uint256) private symbolToIndex;\\r\\n    address public owner;\\r\\n\\r\\n    event collectionAdded(\\r\\n        string _name,\\r\\n        string _symbol,\\r\\n        address _address\\r\\n    );\\r\\n\\r\\n    constructor(address _poolOwner) {\\r\\n        owner = _poolOwner;\\r\\n        _totalCollections = 0;\\r\\n        _securityTimelock = 90; // in seconds\\r\\n        _lastTimelockUpdate = block.timestamp;\\r\\n        _factory = CollectionPoolFactory(msg.sender);\\r\\n    }\\r\\n\\r\\n    // MODIFIERS\\r\\n\\r\\n    // Only the owner of the contract may call\\r\\n    modifier onlyOwner() {\\r\\n        require(\\r\\n            msg.sender == owner,\\r\\n            \\\"Only the contract owner may call this function\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Only permitted after x time (z.B. new collections can't be paid for at least this amount of time)\\r\\n    modifier timelockElapsed() {\\r\\n        require(\\r\\n            block.timestamp >= _lastTimelockUpdate + _securityTimelock,\\r\\n            \\\"You must wait for the security timelock to elapse before this is permitted\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // CONTACT MANAGEMENT\\r\\n\\r\\n    // add a user / Collection struct to the collections Array\\r\\n    function addCollection(string calldata _name, string memory _symbol, address _address)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        Collection memory person = Collection(_name, _symbol,  _address, block.timestamp);\\r\\n        collections.push(person);\\r\\n        addressToIndex[_address] = _totalCollections;\\r\\n        nameToIndex[_name] = _totalCollections;\\r\\n        symbolToIndex[_symbol] = _totalCollections;\\r\\n        _totalCollections++;\\r\\n        emit collectionAdded(_name, _symbol, _address);\\r\\n    \\r\\n    }\\r\\n\\r\\n   \\r\\n\\r\\n    // Get all contact data for this CollectionPool\\r\\n    function readAllCollections()\\r\\n        public\\r\\n        view\\r\\n        onlyOwner\\r\\n        returns (Collection[] memory)\\r\\n    {\\r\\n        Collection[] memory result = new Collection[](_totalCollections);\\r\\n        for (uint256 i = 0; i < _totalCollections; i++) {\\r\\n            result[i] = collections[i];\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function readTotalCollections()\\r\\n        public\\r\\n        view\\r\\n        onlyOwner\\r\\n        returns (uint256 totalCollections)\\r\\n    {\\r\\n        totalCollections = _totalCollections;\\r\\n        return totalCollections;\\r\\n    }\\r\\n\\r\\n    function readSecurityTimelock()\\r\\n        public\\r\\n        view\\r\\n        onlyOwner\\r\\n        returns (uint256 securityTimelock)\\r\\n    {\\r\\n        securityTimelock = _securityTimelock;\\r\\n        return securityTimelock;\\r\\n    }\\r\\n\\r\\n    function readLastTimelockUpdate()\\r\\n        public\\r\\n        view\\r\\n        onlyOwner\\r\\n        returns (uint256 lastTimelockUpdate)\\r\\n    {\\r\\n        lastTimelockUpdate = _lastTimelockUpdate;\\r\\n        return lastTimelockUpdate;\\r\\n    }\\r\\n\\r\\n    // UPDATE VARIABLE FUNCTIONS\\r\\n\\r\\n    // Update this user's personal timelock\\r\\n    function updateTimelock(uint256 duration) public onlyOwner timelockElapsed {\\r\\n        _securityTimelock = duration;\\r\\n        _lastTimelockUpdate = block.timestamp;\\r\\n    }\\r\\n\\r\\n    // PAYMENT FUNCTIONS\\r\\n\\r\\n    // Get the latest TX cost from the Factory\\r\\n    function checkTxCost() public view returns (uint256 _price) {\\r\\n        _price = _factory.txCost();\\r\\n        return _price;\\r\\n    }\\r\\n\\r\\n  \\r\\n\\r\\n    // Leaving these two functions in in case of accidental transfer of money into contract\\r\\n    function checkBalance() public view onlyOwner returns (uint256 amount) {\\r\\n        amount = address(this).balance;\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    function withdraw() public onlyOwner {\\r\\n        uint256 amount = checkBalance();\\r\\n        (bool sent, ) = msg.sender.call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"There was a problem while withdrawing\\\");\\r\\n    }\\r\\n}\",\"keccak256\":\"0x1914c5160183785e58162378ba2b9691cc55c2fce8ce643dddad3600e6454a6c\",\"license\":\"GPL-3.0\"},\"contracts/CollectionPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\n\\r\\nimport \\\"./CollectionPool.sol\\\";\\r\\n\\r\\n\\r\\ncontract CollectionPoolFactory {\\r\\n    uint256 public accountOpenCost;\\r\\n    uint256 public txCost;\\r\\n    address public owner;\\r\\n\\r\\n    mapping(address => CollectionPool) private collectionPools;\\r\\n    \\r\\n    event CollectionAdded(\\r\\n        address contractAddress\\r\\n    );\\r\\n\\r\\n\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n        accountOpenCost = 0.2 ether; // in ETH\\r\\n        txCost = 0.001 ether; // in ETH\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(\\r\\n            msg.sender == owner,\\r\\n            \\\"Only the contract owner may call this function\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // COLLECTION POOL MANAGEMENT\\r\\n\\r\\n    // Return this user's COLLECTION POOL contract address\\r\\n    function fetchCollectionPool() public view returns (CollectionPool userData) {\\r\\n        userData = collectionPools[msg.sender];\\r\\n        return userData;\\r\\n    }\\r\\n\\r\\n    // Create a new CollectionPool struct for this user\\r\\n    function createCollectionPool()\\r\\n        public\\r\\n        payable\\r\\n        returns (address contractAddress)\\r\\n    {\\r\\n        require(msg.value >= accountOpenCost, \\\"Not enough ETH\\\");\\r\\n        CollectionPool newPool = new CollectionPool(msg.sender);\\r\\n        collectionPools[msg.sender] = newPool;\\r\\n        contractAddress = address(newPool);\\r\\n                emit CollectionAdded(contractAddress);\\r\\n\\r\\n        return contractAddress;\\r\\n    }\\r\\n\\r\\n    // UPDATE VARIABLE FUNCTIONS\\r\\n\\r\\n    // Update the price to open an account here\\r\\n    function updateAccountOpenCost(uint256 _accountOpenCost) public onlyOwner {\\r\\n        accountOpenCost = _accountOpenCost;\\r\\n    }\\r\\n\\r\\n    // Update the price to interact with this contract\\r\\n    function updateTransactionCost(uint256 _txCost) public onlyOwner {\\r\\n        txCost = _txCost;\\r\\n    }\\r\\n\\r\\n    // PAYMENT FUNCTIONS\\r\\n\\r\\n    function checkBalance() public view onlyOwner returns (uint256 amount) {\\r\\n        amount = address(this).balance;\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    function withdraw() public onlyOwner {\\r\\n        (bool sent, ) = msg.sender.call{value: checkBalance()}(\\\"\\\");\\r\\n        require(sent, \\\"There was a problem while withdrawing\\\");\\r\\n    }\\r\\n}\",\"keccak256\":\"0xec8f353f6fb7d7f0b0fbfacce3a5d7dca2e3cb13337eabda5ebef6aae484c534\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600280546001600160a01b031916331790556702c68af0bb14000060005566038d7ea4c680006001556112db806100496000396000f3fe6080604052600436106100865760003560e01c80639b2b101c116100595780639b2b101c14610126578063a26204c214610146578063b2a7e29d1461016a578063c71daccb14610180578063e51ef0381461019557600080fd5b806310a56b871461008b578063393ee6ec146100ad5780633ccfd60b146100f15780638da5cb5b14610106575b600080fd5b34801561009757600080fd5b506100ab6100a6366004610404565b61019d565b005b3480156100b957600080fd5b50336000908152600360205260409020546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100fd57600080fd5b506100ab6101d5565b34801561011257600080fd5b506002546100d4906001600160a01b031681565b34801561013257600080fd5b506100ab610141366004610404565b6102ad565b34801561015257600080fd5b5061015c60005481565b6040519081526020016100e8565b34801561017657600080fd5b5061015c60015481565b34801561018c57600080fd5b5061015c6102dc565b6100d461030e565b6002546001600160a01b031633146101d05760405162461bcd60e51b81526004016101c79061041d565b60405180910390fd5b600155565b6002546001600160a01b031633146101ff5760405162461bcd60e51b81526004016101c79061041d565b60003361020a6102dc565b604051600081818185875af1925050503d8060008114610246576040519150601f19603f3d011682016040523d82523d6000602084013e61024b565b606091505b50509050806102aa5760405162461bcd60e51b815260206004820152602560248201527f54686572652077617320612070726f626c656d207768696c65207769746864726044820152646177696e6760d81b60648201526084016101c7565b50565b6002546001600160a01b031633146102d75760405162461bcd60e51b81526004016101c79061041d565b600055565b6002546000906001600160a01b031633146103095760405162461bcd60e51b81526004016101c79061041d565b504790565b600080543410156103525760405162461bcd60e51b815260206004820152600e60248201526d09cdee840cadcdeeaced0408aa8960931b60448201526064016101c7565b600033604051610361906103f7565b6001600160a01b039091168152602001604051809103906000f08015801561038d573d6000803e3d6000fd5b503360009081526003602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915591519182529193508392507f7701426aaa4c0c88a30924a7aba88dce66b18c4020b54e4e19c9e0eb0abc2992910160405180910390a15090565b610e3a8061046c83390190565b60006020828403121561041657600080fd5b5035919050565b6020808252602e908201527f4f6e6c792074686520636f6e7472616374206f776e6572206d61792063616c6c60408201526d103a3434b990333ab731ba34b7b760911b60608201526080019056fe608060405234801561001057600080fd5b50604051610e3a380380610e3a83398101604081905261002f9161006a565b600880546001600160a01b039092166001600160a01b031992831617905560008055605a60015542600255600380549091163317905561009a565b60006020828403121561007c57600080fd5b81516001600160a01b038116811461009357600080fd5b9392505050565b610d91806100a96000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b89071d411610066578063b89071d414610110578063c71daccb14610123578063dede4a311461012b578063f14c8af914610133578063fa1ccffd1461013b57600080fd5b80633ccfd60b146100a357806342708a18146100ad57806378575a02146100c85780638da5cb5b146100d0578063adee9cc4146100fb575b600080fd5b6100ab61014e565b005b6100b5610238565b6040519081526020015b60405180910390f35b6100b56102ab565b6008546100e3906001600160a01b031681565b6040516001600160a01b0390911681526020016100bf565b6101036102df565b6040516100bf91906108c3565b6100ab61011e366004610999565b610543565b6100b561070e565b6100b5610740565b6100b5610774565b6100ab610149366004610ab0565b6107a8565b6008546001600160a01b031633146101815760405162461bcd60e51b815260040161017890610ac9565b60405180910390fd5b600061018b61070e565b604051909150600090339083908381818185875af1925050503d80600081146101d0576040519150601f19603f3d011682016040523d82523d6000602084013e6101d5565b606091505b50509050806102345760405162461bcd60e51b815260206004820152602560248201527f54686572652077617320612070726f626c656d207768696c65207769746864726044820152646177696e6760d81b6064820152608401610178565b5050565b6003546040805163b2a7e29d60e01b815290516000926001600160a01b03169163b2a7e29d9160048083019260209291908290030181865afa158015610282573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a69190610b17565b905090565b6008546000906001600160a01b031633146102d85760405162461bcd60e51b815260040161017890610ac9565b5060005490565b6008546060906001600160a01b0316331461030c5760405162461bcd60e51b815260040161017890610ac9565b6000805467ffffffffffffffff81111561032857610328610967565b60405190808252806020026020018201604052801561038d57816020015b61037a6040518060800160405280606081526020016060815260200160006001600160a01b03168152602001600081525090565b8152602001906001900390816103465790505b50905060005b60005481101561053d57600481815481106103b0576103b0610b30565b90600052602060002090600402016040518060800160405290816000820180546103d990610b46565b80601f016020809104026020016040519081016040528092919081815260200182805461040590610b46565b80156104525780601f1061042757610100808354040283529160200191610452565b820191906000526020600020905b81548152906001019060200180831161043557829003601f168201915b5050505050815260200160018201805461046b90610b46565b80601f016020809104026020016040519081016040528092919081815260200182805461049790610b46565b80156104e45780601f106104b9576101008083540402835291602001916104e4565b820191906000526020600020905b8154815290600101906020018083116104c757829003601f168201915b505050918352505060028201546001600160a01b03166020820152600390910154604090910152825183908390811061051f5761051f610b30565b6020026020010181905250808061053590610b96565b915050610393565b50905090565b6008546001600160a01b0316331461056d5760405162461bcd60e51b815260040161017890610ac9565b6040805160a06020601f870181900402820181019092526080810185815260009282919088908890819085018382808284376000920182905250938552505050602082018690526001600160a01b03851660408301524260609092019190915260048054600181018255918190528251929350839291027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b019081906106139082610bfe565b50602082015160018201906106289082610bfe565b506040828101516002830180546001600160a01b0319166001600160a01b039283161790556060909301516003909201919091556000805492851681526005602052819020829055516006906106819088908890610cbe565b9081526020016040518091039020819055506000546007846040516106a69190610cce565b908152604051908190036020019020556000805490806106c583610b96565b91905055507fe22a00779c7842a67e23d8080594e909936216396d8a61e03e3ffec4a9dbd784858585856040516106ff9493929190610cea565b60405180910390a15050505050565b6008546000906001600160a01b0316331461073b5760405162461bcd60e51b815260040161017890610ac9565b504790565b6008546000906001600160a01b0316331461076d5760405162461bcd60e51b815260040161017890610ac9565b5060025490565b6008546000906001600160a01b031633146107a15760405162461bcd60e51b815260040161017890610ac9565b5060015490565b6008546001600160a01b031633146107d25760405162461bcd60e51b815260040161017890610ac9565b6001546002546107e29190610d42565b42101561086a5760405162461bcd60e51b815260206004820152604a60248201527f596f75206d757374207761697420666f7220746865207365637572697479207460448201527f696d656c6f636b20746f20656c61707365206265666f72652074686973206973606482015269081c195c9b5a5d1d195960b21b608482015260a401610178565b60015542600255565b60005b8381101561088e578181015183820152602001610876565b50506000910152565b600081518084526108af816020860160208601610873565b601f01601f19169290920160200192915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561095957603f1989840301855281516080815181865261091082870182610897565b915050888201518582038a8701526109288282610897565b838a01516001600160a01b0316878b01526060938401519390960192909252505093860193908601906001016108ea565b509098975050505050505050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b038116811461099457600080fd5b919050565b600080600080606085870312156109af57600080fd5b843567ffffffffffffffff808211156109c757600080fd5b818701915087601f8301126109db57600080fd5b8135818111156109ea57600080fd5b602089818386010111156109fd57600080fd5b808401975081965080890135935082841115610a1857600080fd5b838901935089601f850112610a2c57600080fd5b8335915082821115610a4057610a40610967565b604051601f8301601f19908116603f01168101908482118183101715610a6857610a68610967565b816040528381528b83858801011115610a8057600080fd5b83838701848301376000838583010152809750505050505050610aa56040860161097d565b905092959194509250565b600060208284031215610ac257600080fd5b5035919050565b6020808252602e908201527f4f6e6c792074686520636f6e7472616374206f776e6572206d61792063616c6c60408201526d103a3434b990333ab731ba34b7b760911b606082015260800190565b600060208284031215610b2957600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680610b5a57607f821691505b602082108103610b7a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060018201610ba857610ba8610b80565b5060010190565b601f821115610bf957600081815260208120601f850160051c81016020861015610bd65750805b601f850160051c820191505b81811015610bf557828155600101610be2565b5050505b505050565b815167ffffffffffffffff811115610c1857610c18610967565b610c2c81610c268454610b46565b84610baf565b602080601f831160018114610c615760008415610c495750858301515b600019600386901b1c1916600185901b178555610bf5565b600085815260208120601f198616915b82811015610c9057888601518255948401946001909101908401610c71565b5085821015610cae5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8183823760009101908152919050565b60008251610ce0818460208701610873565b9190910192915050565b60608152836060820152838560808301376000608085830101526000601f19601f86011682016080838203016020840152610d286080820186610897565b91505060018060a01b038316604083015295945050505050565b80820180821115610d5557610d55610b80565b9291505056fea2646970667358221220f768c74875e1a164c0de4718b8bf7a326e2bc8e3eecfa8c6a695bc5c0d436f7164736f6c63430008100033a26469706673582212200e6f99a78ea9a16d00de40b30bed76bc8c85708eb833e8fba49c2e90a6dbc49064736f6c63430008100033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 328,
        "contract": "contracts/CollectionPoolFactory.sol:CollectionPoolFactory",
        "label": "accountOpenCost",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 330,
        "contract": "contracts/CollectionPoolFactory.sol:CollectionPoolFactory",
        "label": "txCost",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 332,
        "contract": "contracts/CollectionPoolFactory.sol:CollectionPoolFactory",
        "label": "owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 337,
        "contract": "contracts/CollectionPoolFactory.sol:CollectionPoolFactory",
        "label": "collectionPools",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_contract(CollectionPool)323)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(CollectionPool)323": {
        "encoding": "inplace",
        "label": "contract CollectionPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(CollectionPool)323)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract CollectionPool)",
        "numberOfBytes": "32",
        "value": "t_contract(CollectionPool)323"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
