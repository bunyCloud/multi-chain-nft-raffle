{
  "address": "0x5807574C534393dFD4094386b30C89fA2104baF2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "unencoded",
          "type": "bytes"
        }
      ],
      "name": "base64Encode",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "imageUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "animationUrl",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenOfEdition",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "editionSize",
          "type": "uint256"
        }
      ],
      "name": "createMetadataEdition",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "mediaData",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenOfEdition",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "editionSize",
          "type": "uint256"
        }
      ],
      "name": "createMetadataJSON",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "json",
          "type": "bytes"
        }
      ],
      "name": "encodeMetadataJSON",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "numberToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "imageUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "animationUrl",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenOfEdition",
          "type": "uint256"
        }
      ],
      "name": "tokenMediaData",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x2f8a3dbe687874c8d448a76dac65af256405c1ef2a91f4e702c0ae02d6c7932b",
  "receipt": {
    "to": null,
    "from": "0x8406A51A0E1B5F52Ff61226773e6328e5Da5d964",
    "contractAddress": "0x5807574C534393dFD4094386b30C89fA2104baF2",
    "transactionIndex": 0,
    "gasUsed": "760725",
    "logsBloom": "0x
    "blockHash": "0x0000485700001c14158448f9eacb019911555be7f8ef02a7fc72abfeafd82a74",
    "transactionHash": "0x2f8a3dbe687874c8d448a76dac65af256405c1ef2a91f4e702c0ae02d6c7932b",
    "logs": [],
    "blockNumber": 14674122,
    "cumulativeGasUsed": "760725",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8c770a2d7c2d2a48820e157543d4f641",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"unencoded\",\"type\":\"bytes\"}],\"name\":\"base64Encode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenOfEdition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"}],\"name\":\"createMetadataEdition\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mediaData\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenOfEdition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"}],\"name\":\"createMetadataJSON\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"json\",\"type\":\"bytes\"}],\"name\":\"encodeMetadataJSON\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"numberToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenOfEdition\",\"type\":\"uint256\"}],\"name\":\"tokenMediaData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Can safely be used for generic base64Encode and numberToString functions\",\"kind\":\"dev\",\"methods\":{\"base64Encode(bytes)\":{\"params\":{\"unencoded\":\"bytes to base64-encode\"}},\"createMetadataEdition(string,string,string,string,uint256,uint256)\":{\"params\":{\"animationUrl\":\"URL of animation to render for edition\",\"description\":\"Description of NFT in metadata\",\"editionSize\":\"Size of entire edition to show\",\"imageUrl\":\"URL of image to render for edition\",\"name\":\"Name of NFT in metadata\",\"tokenOfEdition\":\"Token ID for specific token\"}},\"createMetadataJSON(string,string,string,uint256,uint256)\":{\"params\":{\"description\":\"Description of NFT in metadata\",\"editionSize\":\"Size of entire edition to show\",\"mediaData\":\"Data for media to include in json object\",\"name\":\"Name of NFT in metadata\",\"tokenOfEdition\":\"Token ID for specific token\"}},\"encodeMetadataJSON(bytes)\":{\"params\":{\"json\":\"Raw json to base64 and turn into a data-uri\"}},\"numberToString(uint256)\":{\"params\":{\"value\":\"number to return as a string\"}},\"tokenMediaData(string,string,uint256)\":{\"params\":{\"animationUrl\":\"URL of animation to render for edition\",\"imageUrl\":\"URL of image to render for edition\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createMetadataEdition(string,string,string,string,uint256,uint256)\":{\"notice\":\"Generate edition metadata from storage information as base64-json blob Combines the media data and metadata\"},\"createMetadataJSON(string,string,string,uint256,uint256)\":{\"notice\":\"Function to create the metadata json string for the nft edition\"},\"encodeMetadataJSON(bytes)\":{\"notice\":\"Encodes the argument json bytes into base64-data uri format\"},\"numberToString(uint256)\":{\"notice\":\"Proxy to openzeppelin's toString function\"},\"tokenMediaData(string,string,uint256)\":{\"notice\":\"Generates edition metadata from storage information as base64-json blob Combines the media data and metadata\"}},\"notice\":\"Shared NFT logic for rendering metadata associated with editions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SharedNFTLogic.sol\":\"SharedNFTLogic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/IPublicSharedMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\n/// Shared public library for on-chain NFT functions\\ninterface IPublicSharedMetadata {\\n  /// @param unencoded bytes to base64-encode\\n  function base64Encode(bytes memory unencoded) external pure returns (string memory);\\n\\n  /// Encodes the argument json bytes into base64-data uri format\\n  /// @param json Raw json to base64 and turn into a data-uri\\n  function encodeMetadataJSON(bytes memory json) external pure returns (string memory);\\n\\n  /// Proxy to openzeppelin's toString function\\n  /// @param value number to return as a string\\n  function numberToString(uint256 value) external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0xaf1cbbb34e11975b02303c04d71796c8528341743fb9ba9f22f78d628d911caf\",\"license\":\"GPL-3.0\"},\"contracts/SharedNFTLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport { StringsUpgradeable } from '@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol';\\nimport { Base64 } from 'base64-sol/base64.sol';\\nimport { IPublicSharedMetadata } from './IPublicSharedMetadata.sol';\\n\\n/// Shared NFT logic for rendering metadata associated with editions\\n/// @dev Can safely be used for generic base64Encode and numberToString functions\\ncontract SharedNFTLogic is IPublicSharedMetadata {\\n  /// @param unencoded bytes to base64-encode\\n  function base64Encode(bytes memory unencoded) public pure override returns (string memory) {\\n    return Base64.encode(unencoded);\\n  }\\n\\n  /// Proxy to openzeppelin's toString function\\n  /// @param value number to return as a string\\n  function numberToString(uint256 value) public pure override returns (string memory) {\\n    return StringsUpgradeable.toString(value);\\n  }\\n\\n  /// Generate edition metadata from storage information as base64-json blob\\n  /// Combines the media data and metadata\\n  /// @param name Name of NFT in metadata\\n  /// @param description Description of NFT in metadata\\n  /// @param imageUrl URL of image to render for edition\\n  /// @param animationUrl URL of animation to render for edition\\n  /// @param tokenOfEdition Token ID for specific token\\n  /// @param editionSize Size of entire edition to show\\n  function createMetadataEdition(\\n    string memory name,\\n    string memory description,\\n    string memory imageUrl,\\n    string memory animationUrl,\\n    uint256 tokenOfEdition,\\n    uint256 editionSize\\n  ) external pure returns (string memory) {\\n    string memory _tokenMediaData = tokenMediaData(imageUrl, animationUrl, tokenOfEdition);\\n    bytes memory json = createMetadataJSON(name, description, _tokenMediaData, tokenOfEdition, editionSize);\\n    return encodeMetadataJSON(json);\\n  }\\n\\n  /// Function to create the metadata json string for the nft edition\\n  /// @param name Name of NFT in metadata\\n  /// @param description Description of NFT in metadata\\n  /// @param mediaData Data for media to include in json object\\n  /// @param tokenOfEdition Token ID for specific token\\n  /// @param editionSize Size of entire edition to show\\n  function createMetadataJSON(\\n    string memory name,\\n    string memory description,\\n    string memory mediaData,\\n    uint256 tokenOfEdition,\\n    uint256 editionSize\\n  ) public pure returns (bytes memory) {\\n    bytes memory editionSizeText;\\n    if (editionSize > 0) {\\n      editionSizeText = abi.encodePacked('/', numberToString(editionSize));\\n    }\\n    return\\n      abi.encodePacked(\\n        '{\\\"name\\\": \\\"',\\n        name,\\n        ' ',\\n        numberToString(tokenOfEdition),\\n        editionSizeText,\\n        '\\\", \\\"',\\n        'description\\\": \\\"',\\n        description,\\n        '\\\", \\\"',\\n        mediaData,\\n        'properties\\\": {\\\"number\\\": ',\\n        numberToString(tokenOfEdition),\\n        ', \\\"name\\\": \\\"',\\n        name,\\n        '\\\"}}'\\n      );\\n  }\\n\\n  /// Encodes the argument json bytes into base64-data uri format\\n  /// @param json Raw json to base64 and turn into a data-uri\\n  function encodeMetadataJSON(bytes memory json) public pure override returns (string memory) {\\n    return string(abi.encodePacked('data:application/json;base64,', base64Encode(json)));\\n  }\\n\\n  /// Generates edition metadata from storage information as base64-json blob\\n  /// Combines the media data and metadata\\n  /// @param imageUrl URL of image to render for edition\\n  /// @param animationUrl URL of animation to render for edition\\n  function tokenMediaData(string memory imageUrl, string memory animationUrl, uint256 tokenOfEdition) public pure returns (string memory) {\\n    bool hasImage = bytes(imageUrl).length > 0;\\n    bool hasAnimation = bytes(animationUrl).length > 0;\\n    if (hasImage && hasAnimation) {\\n      return\\n        string(\\n          abi.encodePacked(\\n            'image\\\": \\\"',\\n            imageUrl,\\n            '?id=',\\n            numberToString(tokenOfEdition),\\n            '\\\", \\\"animation_url\\\": \\\"',\\n            animationUrl,\\n            '?id=',\\n            numberToString(tokenOfEdition),\\n            '\\\", \\\"'\\n          )\\n        );\\n    }\\n    if (hasImage) {\\n      return string(abi.encodePacked('image\\\": \\\"', imageUrl, '?id=', numberToString(tokenOfEdition), '\\\", \\\"'));\\n    }\\n    if (hasAnimation) {\\n      return string(abi.encodePacked('animation_url\\\": \\\"', animationUrl, '?id=', numberToString(tokenOfEdition), '\\\", \\\"'));\\n    }\\n\\n    return '';\\n  }\\n}\\n\",\"keccak256\":\"0x986935a51bd9bfc02371248ed0d59a1a1150ccd113a912626ae6c7c1ebe3f043\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610cce806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063170dc6601461006757806358464f3014610090578063d01fde8c146100a3578063d5fb1b19146100b6578063df30dba0146100c9578063eb111ab6146100dc575b600080fd5b61007a610075366004610517565b6100ef565b6040516100879190610580565b60405180910390f35b61007a61009e36600461063f565b610100565b61007a6100b13660046106d9565b61017c565b61007a6100c43660046106d9565b6101ad565b61007a6100d7366004610722565b6101b8565b61007a6100ea3660046107e1565b6101f0565b60606100fa826102a9565b92915050565b606080821561013457610112836100ef565b604051602001610122919061086a565b60405160208183030381529060405290505b8661013e856100ef565b82888861014a896100ef565b8c6040516020016101619796959493929190610893565b60405160208183030381529060405291505095945050505050565b6060610187826101ad565b60405160200161019791906109bc565b6040516020818303038152906040529050919050565b60606100fa826103b2565b606060006101c78686866101f0565b905060006101d88989848888610100565b90506101e38161017c565b9998505050505050505050565b825182516060911580159115159082906102075750805b1561024b5785610216856100ef565b86610220876100ef565b6040516020016102339493929190610a01565b604051602081830303815290604052925050506102a2565b811561026c578561025b856100ef565b604051602001610233929190610abc565b801561028d578461027c856100ef565b604051602001610233929190610b22565b60405180602001604052806000815250925050505b9392505050565b6060816000036102d05750506040805180820190915260018152600360fc1b602082015290565b8160005b81156102fa57806102e481610ba6565b91506102f39050600a83610bd5565b91506102d4565b60008167ffffffffffffffff81111561031557610315610593565b6040519080825280601f01601f19166020018201604052801561033f576020820181803683370190505b5090505b84156103aa57610354600183610be9565b9150610361600a86610bfc565b61036c906030610c10565b60f81b81838151811061038157610381610c23565b60200101906001600160f81b031916908160001a9053506103a3600a86610bd5565b9450610343565b949350505050565b606081516000036103d157505060408051602081019091526000815290565b6000604051806060016040528060408152602001610c5960409139905060006003845160026104009190610c10565b61040a9190610bd5565b610415906004610c39565b90506000610424826020610c10565b67ffffffffffffffff81111561043c5761043c610593565b6040519080825280601f01601f191660200182016040528015610466576020820181803683370190505b509050818152600183018586518101602084015b818310156104d2576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f811685015182535060010161047a565b6003895106600181146104ec57600281146104fd57610509565b613d3d60f01b600119830152610509565b603d60f81b6000198301525b509398975050505050505050565b60006020828403121561052957600080fd5b5035919050565b60005b8381101561054b578181015183820152602001610533565b50506000910152565b6000815180845261056c816020860160208601610530565b601f01601f19169290920160200192915050565b6020815260006102a26020830184610554565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156105c4576105c4610593565b604051601f8501601f19908116603f011681019082821181831017156105ec576105ec610593565b8160405280935085815286868601111561060557600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261063057600080fd5b6102a2838335602085016105a9565b600080600080600060a0868803121561065757600080fd5b853567ffffffffffffffff8082111561066f57600080fd5b61067b89838a0161061f565b9650602088013591508082111561069157600080fd5b61069d89838a0161061f565b955060408801359150808211156106b357600080fd5b506106c08882890161061f565b9598949750949560608101359550608001359392505050565b6000602082840312156106eb57600080fd5b813567ffffffffffffffff81111561070257600080fd5b8201601f8101841361071357600080fd5b6103aa848235602084016105a9565b60008060008060008060c0878903121561073b57600080fd5b863567ffffffffffffffff8082111561075357600080fd5b61075f8a838b0161061f565b9750602089013591508082111561077557600080fd5b6107818a838b0161061f565b9650604089013591508082111561079757600080fd5b6107a38a838b0161061f565b955060608901359150808211156107b957600080fd5b506107c689828a0161061f565b9350506080870135915060a087013590509295509295509295565b6000806000606084860312156107f657600080fd5b833567ffffffffffffffff8082111561080e57600080fd5b61081a8783880161061f565b9450602086013591508082111561083057600080fd5b5061083d8682870161061f565b925050604084013590509250925092565b60008151610860818560208601610530565b9290920192915050565b602f60f81b815260008251610886816001850160208701610530565b9190910160010192915050565b693d913730b6b2911d101160b11b815287516000906108b981600a850160208d01610530565b600160fd1b600a9184019182015288516108da81600b840160208d01610530565b88519101906108f081600b840160208c01610530565b631116101160e11b600b929091019182018190526e3232b9b1b934b83a34b7b7111d101160891b600f830152875161092f81601e850160208c01610530565b601e9201918201526109ae61099f61099961098261097c610953602287018c61084e565b7f70726f70657274696573223a207b226e756d626572223a200000000000000000815260180190565b8961084e565b6a1610113730b6b2911d101160a91b8152600b0190565b8661084e565b62227d7d60e81b815260030190565b9a9950505050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516109f481601d850160208701610530565b91909101601d0192915050565b6834b6b0b3b2911d101160b91b81528451600090610a26816009850160208a01610530565b8083019050633f69643d60e01b8060098301528651610a4c81600d850160208b01610530565b741116101130b734b6b0ba34b7b72fbab936111d101160591b600d93909101928301528551610a82816022850160208a01610530565b60229201918201528351610a9d816026840160208801610530565b631116101160e11b60269290910191820152602a019695505050505050565b6834b6b0b3b2911d101160b91b81528251600090610ae1816009850160208801610530565b633f69643d60e01b6009918401918201528351610b0581600d840160208801610530565b631116101160e11b600d9290910191820152601101949350505050565b7030b734b6b0ba34b7b72fbab936111d101160791b81528251600090610b4f816011850160208801610530565b633f69643d60e01b6011918401918201528351610b73816015840160208801610530565b631116101160e11b60159290910191820152601901949350505050565b634e487b7160e01b600052601160045260246000fd5b600060018201610bb857610bb8610b90565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082610be457610be4610bbf565b500490565b818103818111156100fa576100fa610b90565b600082610c0b57610c0b610bbf565b500690565b808201808211156100fa576100fa610b90565b634e487b7160e01b600052603260045260246000fd5b6000816000190483118215151615610c5357610c53610b90565b50029056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220326dbb9084977eef218c60b18feb23a452579616cf1e9a49da67960c8183ef8664736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063170dc6601461006757806358464f3014610090578063d01fde8c146100a3578063d5fb1b19146100b6578063df30dba0146100c9578063eb111ab6146100dc575b600080fd5b61007a610075366004610517565b6100ef565b6040516100879190610580565b60405180910390f35b61007a61009e36600461063f565b610100565b61007a6100b13660046106d9565b61017c565b61007a6100c43660046106d9565b6101ad565b61007a6100d7366004610722565b6101b8565b61007a6100ea3660046107e1565b6101f0565b60606100fa826102a9565b92915050565b606080821561013457610112836100ef565b604051602001610122919061086a565b60405160208183030381529060405290505b8661013e856100ef565b82888861014a896100ef565b8c6040516020016101619796959493929190610893565b60405160208183030381529060405291505095945050505050565b6060610187826101ad565b60405160200161019791906109bc565b6040516020818303038152906040529050919050565b60606100fa826103b2565b606060006101c78686866101f0565b905060006101d88989848888610100565b90506101e38161017c565b9998505050505050505050565b825182516060911580159115159082906102075750805b1561024b5785610216856100ef565b86610220876100ef565b6040516020016102339493929190610a01565b604051602081830303815290604052925050506102a2565b811561026c578561025b856100ef565b604051602001610233929190610abc565b801561028d578461027c856100ef565b604051602001610233929190610b22565b60405180602001604052806000815250925050505b9392505050565b6060816000036102d05750506040805180820190915260018152600360fc1b602082015290565b8160005b81156102fa57806102e481610ba6565b91506102f39050600a83610bd5565b91506102d4565b60008167ffffffffffffffff81111561031557610315610593565b6040519080825280601f01601f19166020018201604052801561033f576020820181803683370190505b5090505b84156103aa57610354600183610be9565b9150610361600a86610bfc565b61036c906030610c10565b60f81b81838151811061038157610381610c23565b60200101906001600160f81b031916908160001a9053506103a3600a86610bd5565b9450610343565b949350505050565b606081516000036103d157505060408051602081019091526000815290565b6000604051806060016040528060408152602001610c5960409139905060006003845160026104009190610c10565b61040a9190610bd5565b610415906004610c39565b90506000610424826020610c10565b67ffffffffffffffff81111561043c5761043c610593565b6040519080825280601f01601f191660200182016040528015610466576020820181803683370190505b509050818152600183018586518101602084015b818310156104d2576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f811685015182535060010161047a565b6003895106600181146104ec57600281146104fd57610509565b613d3d60f01b600119830152610509565b603d60f81b6000198301525b509398975050505050505050565b60006020828403121561052957600080fd5b5035919050565b60005b8381101561054b578181015183820152602001610533565b50506000910152565b6000815180845261056c816020860160208601610530565b601f01601f19169290920160200192915050565b6020815260006102a26020830184610554565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156105c4576105c4610593565b604051601f8501601f19908116603f011681019082821181831017156105ec576105ec610593565b8160405280935085815286868601111561060557600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261063057600080fd5b6102a2838335602085016105a9565b600080600080600060a0868803121561065757600080fd5b853567ffffffffffffffff8082111561066f57600080fd5b61067b89838a0161061f565b9650602088013591508082111561069157600080fd5b61069d89838a0161061f565b955060408801359150808211156106b357600080fd5b506106c08882890161061f565b9598949750949560608101359550608001359392505050565b6000602082840312156106eb57600080fd5b813567ffffffffffffffff81111561070257600080fd5b8201601f8101841361071357600080fd5b6103aa848235602084016105a9565b60008060008060008060c0878903121561073b57600080fd5b863567ffffffffffffffff8082111561075357600080fd5b61075f8a838b0161061f565b9750602089013591508082111561077557600080fd5b6107818a838b0161061f565b9650604089013591508082111561079757600080fd5b6107a38a838b0161061f565b955060608901359150808211156107b957600080fd5b506107c689828a0161061f565b9350506080870135915060a087013590509295509295509295565b6000806000606084860312156107f657600080fd5b833567ffffffffffffffff8082111561080e57600080fd5b61081a8783880161061f565b9450602086013591508082111561083057600080fd5b5061083d8682870161061f565b925050604084013590509250925092565b60008151610860818560208601610530565b9290920192915050565b602f60f81b815260008251610886816001850160208701610530565b9190910160010192915050565b693d913730b6b2911d101160b11b815287516000906108b981600a850160208d01610530565b600160fd1b600a9184019182015288516108da81600b840160208d01610530565b88519101906108f081600b840160208c01610530565b631116101160e11b600b929091019182018190526e3232b9b1b934b83a34b7b7111d101160891b600f830152875161092f81601e850160208c01610530565b601e9201918201526109ae61099f61099961098261097c610953602287018c61084e565b7f70726f70657274696573223a207b226e756d626572223a200000000000000000815260180190565b8961084e565b6a1610113730b6b2911d101160a91b8152600b0190565b8661084e565b62227d7d60e81b815260030190565b9a9950505050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516109f481601d850160208701610530565b91909101601d0192915050565b6834b6b0b3b2911d101160b91b81528451600090610a26816009850160208a01610530565b8083019050633f69643d60e01b8060098301528651610a4c81600d850160208b01610530565b741116101130b734b6b0ba34b7b72fbab936111d101160591b600d93909101928301528551610a82816022850160208a01610530565b60229201918201528351610a9d816026840160208801610530565b631116101160e11b60269290910191820152602a019695505050505050565b6834b6b0b3b2911d101160b91b81528251600090610ae1816009850160208801610530565b633f69643d60e01b6009918401918201528351610b0581600d840160208801610530565b631116101160e11b600d9290910191820152601101949350505050565b7030b734b6b0ba34b7b72fbab936111d101160791b81528251600090610b4f816011850160208801610530565b633f69643d60e01b6011918401918201528351610b73816015840160208801610530565b631116101160e11b60159290910191820152601901949350505050565b634e487b7160e01b600052601160045260246000fd5b600060018201610bb857610bb8610b90565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082610be457610be4610bbf565b500490565b818103818111156100fa576100fa610b90565b600082610c0b57610c0b610bbf565b500690565b808201808211156100fa576100fa610b90565b634e487b7160e01b600052603260045260246000fd5b6000816000190483118215151615610c5357610c53610b90565b50029056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220326dbb9084977eef218c60b18feb23a452579616cf1e9a49da67960c8183ef8664736f6c63430008100033",
  "devdoc": {
    "details": "Can safely be used for generic base64Encode and numberToString functions",
    "kind": "dev",
    "methods": {
      "base64Encode(bytes)": {
        "params": {
          "unencoded": "bytes to base64-encode"
        }
      },
      "createMetadataEdition(string,string,string,string,uint256,uint256)": {
        "params": {
          "animationUrl": "URL of animation to render for edition",
          "description": "Description of NFT in metadata",
          "editionSize": "Size of entire edition to show",
          "imageUrl": "URL of image to render for edition",
          "name": "Name of NFT in metadata",
          "tokenOfEdition": "Token ID for specific token"
        }
      },
      "createMetadataJSON(string,string,string,uint256,uint256)": {
        "params": {
          "description": "Description of NFT in metadata",
          "editionSize": "Size of entire edition to show",
          "mediaData": "Data for media to include in json object",
          "name": "Name of NFT in metadata",
          "tokenOfEdition": "Token ID for specific token"
        }
      },
      "encodeMetadataJSON(bytes)": {
        "params": {
          "json": "Raw json to base64 and turn into a data-uri"
        }
      },
      "numberToString(uint256)": {
        "params": {
          "value": "number to return as a string"
        }
      },
      "tokenMediaData(string,string,uint256)": {
        "params": {
          "animationUrl": "URL of animation to render for edition",
          "imageUrl": "URL of image to render for edition"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createMetadataEdition(string,string,string,string,uint256,uint256)": {
        "notice": "Generate edition metadata from storage information as base64-json blob Combines the media data and metadata"
      },
      "createMetadataJSON(string,string,string,uint256,uint256)": {
        "notice": "Function to create the metadata json string for the nft edition"
      },
      "encodeMetadataJSON(bytes)": {
        "notice": "Encodes the argument json bytes into base64-data uri format"
      },
      "numberToString(uint256)": {
        "notice": "Proxy to openzeppelin's toString function"
      },
      "tokenMediaData(string,string,uint256)": {
        "notice": "Generates edition metadata from storage information as base64-json blob Combines the media data and metadata"
      }
    },
    "notice": "Shared NFT logic for rendering metadata associated with editions",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}