{
  "address": "0x7a9E8c1aC540EE5b0e94a85D6d1619226d8c57fE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_implementation",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "bunyBank",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "editionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "editionSize",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "editionContractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minPlayers",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "CreatedEdition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_bunyBank",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collection",
      "outputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "editionContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_editionSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_imageUrl",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_imageUrl",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_editionSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxTokens",
          "type": "uint256"
        }
      ],
      "name": "createEdition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "name": "getRaffleAtId",
      "outputs": [
        {
          "internalType": "contract BunyRaffleNft",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readAllCollections",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "editionContractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_editionSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "newId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_minPlayers",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_maxTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_salePrice",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_imageUrl",
              "type": "string"
            }
          ],
          "internalType": "struct BunyRaffleFactory.Collection[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "bunyBank",
          "type": "address"
        }
      ],
      "name": "setBunyBankAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4633ea8edb2018b41648d35ad04f096867677537957ed5035a63863febab60f2",
  "receipt": {
    "to": null,
    "from": "0x8406A51A0E1B5F52Ff61226773e6328e5Da5d964",
    "contractAddress": "0x7a9E8c1aC540EE5b0e94a85D6d1619226d8c57fE",
    "transactionIndex": 7,
    "gasUsed": "1169960",
    "logsBloom": "0x
    "blockHash": "0xeb2d5c6c2d810de3e7fbdd1c87333f0add0e419a2ab212f81083cc7dc0ed7de1",
    "transactionHash": "0x4633ea8edb2018b41648d35ad04f096867677537957ed5035a63863febab60f2",
    "logs": [],
    "blockNumber": 27484095,
    "cumulativeGasUsed": "1937418",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xECA137CEa757DC499430eEAD875041D9F62A464d",
    "0x1f83b42aA2b03F01EEC063aFd4b3E674F97fe9e8"
  ],
  "numDeployments": 1,
  "solcInputHash": "8c770a2d7c2d2a48820e157543d4f641",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"bunyBank\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"editionContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPlayers\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"CreatedEdition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_bunyBank\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collection\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"editionContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_editionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_imageUrl\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_imageUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_editionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokens\",\"type\":\"uint256\"}],\"name\":\"createEdition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"getRaffleAtId\",\"outputs\":[{\"internalType\":\"contract BunyRaffleNft\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readAllCollections\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"editionContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_editionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_imageUrl\",\"type\":\"string\"}],\"internalType\":\"struct BunyRaffleFactory.Collection[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"bunyBank\",\"type\":\"address\"}],\"name\":\"setBunyBankAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes factory with address of implementation logic\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BunyRaffleFactory.sol\":\"BunyRaffleFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\\\";\\n\",\"keccak256\":\"0x9a8e2a400966f5e21b7dc105bb7236e5dc986c93b5fc18eafdae08a96e803cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x3734e36dc4de32780bfd344a94b85b6aab985fd6e42672983ed251ba7754a2e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x5331c8909221d9f9f3851cfadd5959d0873413a2c27e30e0f2fa234158c1c6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x56035505d62f05f5e5040532b749ab25237f6dd87c7a514614acda96af996751\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/BunyRaffleFactory.sol\":{\"content\":\"///bunyRaffle\\r\\n\\r\\n// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport {ClonesUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\\\";\\r\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\r\\nimport \\\"./BunyRaffleNft.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\ncontract BunyRaffleFactory is OwnableUpgradeable {\\r\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\r\\n    CountersUpgradeable.Counter private atContract;\\r\\n    address public implementation;\\r\\n    string  _name = \\\"Buny Raffle 2023\\\";\\r\\n    string  _symbol = \\\"rBUNY\\\";\\r\\n    //string  _animationUrl = \\\"https://ipfs.io/ipfs/Qmd94YsrsK5jPbi675XiwyLwMhcM6HS6MULC7mqQGMnXtW\\\";\\r\\n    uint256  _prime = 432211379112113246928842014508850435796007;\\r\\n    address payable public _bunyBank;\\r\\n    uint256  _iterations = 1337;\\r\\n    uint256 public collectionCount = 0;\\r\\n    event CreatedEdition(uint256 indexed editionId, address indexed creator, uint256 editionSize, address indexed editionContractAddress, uint256 minPlayers, uint256 maxTokens, uint256 salePrice);\\r\\n    Collection[] public collection;\\r\\n\\r\\n\\r\\n\\r\\n  struct Collection {\\r\\n    string _name;\\r\\n    address editionContractAddress;\\r\\n    uint256 _editionSize;\\r\\n    uint256 newId;\\r\\n    uint256 _minPlayers;\\r\\n    uint256 _maxTokens;\\r\\n    uint256 _salePrice;\\r\\n    string _imageUrl;\\r\\n  }\\r\\n\\r\\n\\r\\n\\r\\n    /// Initializes factory with address of implementation logic\\r\\n    constructor(address _implementation, address payable bunyBank) {\\r\\n        implementation = _implementation;\\r\\n        _bunyBank = bunyBank;\\r\\n    }\\r\\n\\r\\n  function owner() public view override(OwnableUpgradeable) returns (address) {\\r\\n    return super.owner();\\r\\n  }\\r\\n\\r\\n   \\r\\n    function createEdition(\\r\\n        string memory _description,\\r\\n        string memory _imageUrl,\\r\\n        uint256 _editionSize,\\r\\n        uint256 _salePrice,\\r\\n        uint256 _minPlayers,\\r\\n        uint256 _maxTokens\\r\\n        ) external returns (uint256) {\\r\\n        uint256 newId = atContract.current();\\r\\n        address newContract = ClonesUpgradeable.cloneDeterministic(\\r\\n            implementation,\\r\\n            bytes32(abi.encodePacked(newId))\\r\\n        );\\r\\n        BunyRaffleNft(newContract).initialize(\\r\\n            msg.sender,\\r\\n            _name,\\r\\n            _symbol,\\r\\n            _description,\\r\\n            _imageUrl,\\r\\n            _editionSize,\\r\\n            _salePrice,\\r\\n            _minPlayers,\\r\\n            _bunyBank,\\r\\n            _maxTokens,\\r\\n            _prime,\\r\\n            _iterations\\r\\n        );\\r\\n        emit CreatedEdition(newId, msg.sender,  _editionSize, newContract, _minPlayers,  _maxTokens, _salePrice );\\r\\n         atContract.increment();\\r\\n         Collection memory x = Collection(_name, newContract, _editionSize, newId,  _minPlayers, _maxTokens, _salePrice, _imageUrl);\\r\\n    collection.push(x);\\r\\n    collectionCount ++;\\r\\n        return newId;\\r\\n    }\\r\\n   function setBunyBankAddress(address payable bunyBank) external onlyOwner {\\r\\n        require(bunyBank != address(0), \\\"Invalid BB address\\\");\\r\\n        _bunyBank = bunyBank;\\r\\n    }\\r\\n    \\r\\n\\r\\n  function readAllCollections() public view  returns (Collection[] memory) {\\r\\n    Collection[] memory result = new Collection[](collectionCount);\\r\\n    for (uint256 i = 0; i < collectionCount; i++) {\\r\\n      result[i] = collection[i];\\r\\n    }\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n    function getRaffleAtId(uint256 raffleId)\\r\\n        external\\r\\n        view\\r\\n        returns (BunyRaffleNft)\\r\\n    {\\r\\n        return\\r\\n            BunyRaffleNft(\\r\\n                ClonesUpgradeable.predictDeterministicAddress(\\r\\n                    implementation,\\r\\n                    bytes32(abi.encodePacked(raffleId)),\\r\\n                    address(this)\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n\\r\\n  \\r\\n}\\r\\n\",\"keccak256\":\"0x6d9a6b32693f2a044bc3c4c2cac6465176fc00f9a5650155d53c110063f5946c\",\"license\":\"GPL-3.0\"},\"contracts/BunyRaffleNft.sol\":{\"content\":\"//bunyNFt\\r\\n\\r\\n// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport { ERC721Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\r\\nimport {ERC721EnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\r\\nimport {  IERC721EnumerableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC721EnumerableUpgradeable.sol\\\";\\r\\nimport {  IERC721Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\r\\n\\r\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport { CountersUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\r\\nimport { AddressUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\nimport { SharedNFTLogic } from \\\"./SharedNFTLogic.sol\\\";\\r\\nimport { IEditionSingleMintable } from \\\"./IEditionSingleMintable.sol\\\";\\r\\nimport \\\"./SlothVDF.sol\\\";\\r\\n\\r\\ncontract BunyRaffleNft is ERC721Upgradeable, IEditionSingleMintable,  OwnableUpgradeable {\\r\\n  using CountersUpgradeable for CountersUpgradeable.Counter;\\r\\n  SharedNFTLogic private immutable sharedNFTLogic;\\r\\n  CountersUpgradeable.Counter private atEditionId;\\r\\n  event Rafflestarted(address minter, uint256 startTime);\\r\\n  event Editionsold(uint256 price, address owner, uint256 EntryCount, uint256 entryTime);\\r\\n  event WinnerPicked(address winner, uint256 winningNumber, uint256 prize);\\r\\n  string public description;\\r\\n  string public animationUrl;\\r\\n  string public imageUrl;\\r\\n  uint256 public editionSize;\\r\\n  uint256 public salePrice;\\r\\n  uint256 public minPlayers;\\r\\n  uint256 public maxTokens;\\r\\n  bool public active = false;\\r\\n  bool public winnerSelected = false;\\r\\n  bool public isComplete = false;\\r\\n  bool public isProof = false;\\r\\n  bool public prizeClaimed = false;\\r\\n  uint256 public startTime;\\r\\n  uint256 public endTime;\\r\\n  uint256 public EntryCount = 0;\\r\\n  uint256 public prime = 0;\\r\\n  uint256 public iterations = 0;\\r\\n  uint256 private nonce = 0;\\r\\n  uint256 public randomNumber = 0;\\r\\n  uint256 public winningNumber = 0;\\r\\n  address payable public Winner;\\r\\n  address payable public bunyBank;\\r\\n  Entry[] private entry;\\r\\n  RaffleWinner[] public raffleWinner;\\r\\n \\tuint256[] public nftTokenIds;\\r\\n  mapping(address => bool) public mintedTokens;\\r\\n  mapping(address => bool) public allowedMinters;\\r\\n  mapping(address => uint256) public seed;\\r\\n  mapping(address => bool) public isPlayer;\\r\\n\\r\\n\\r\\n  struct Entry {\\r\\n    address player;\\r\\n    uint256 EntryNumber;\\r\\n    uint256 entryTime;\\r\\n  }\\r\\n\\r\\n  struct RaffleWinner {\\r\\n    address payable winner;\\r\\n    uint256 winningTokenId;\\r\\n  }\\r\\n\\r\\n\\r\\n\\r\\n  constructor( SharedNFTLogic _sharedNFTLogic)  {\\r\\n    sharedNFTLogic = _sharedNFTLogic;\\r\\n      \\r\\n       }\\r\\n\\r\\n  function initialize(\\r\\n    address _owner,\\r\\n    string memory _name,\\r\\n    string memory _symbol,\\r\\n    string memory _description,\\r\\n    //string memory _animationUrl,\\r\\n    string memory _imageUrl,\\r\\n    uint256 _editionSize,\\r\\n    uint256 _salePrice,\\r\\n    uint256 _minPlayers,\\r\\n    address payable _bunyBank,\\r\\n    uint256 _maxTokens,\\r\\n    uint256 _prime,\\r\\n    uint256 _iterations\\r\\n\\r\\n  ) public initializer {\\r\\n    __ERC721_init(_name, _symbol);\\r\\n    __Ownable_init();\\r\\n    // Set ownership to original sender of contract call\\r\\n    transferOwnership(_owner);\\r\\n    description = _description;\\r\\n    //animationUrl = _animationUrl;\\r\\n    imageUrl = _imageUrl;\\r\\n    editionSize = _editionSize;\\r\\n    salePrice = _salePrice;\\r\\n    minPlayers = _minPlayers;\\r\\n    bunyBank = _bunyBank;\\r\\n    maxTokens = _maxTokens;\\r\\n    prime = _prime;\\r\\n    iterations = _iterations;\\r\\n    atEditionId.increment();\\r\\n  }\\r\\n\\r\\n  /// @dev returns the number of minted tokens within the edition\\r\\n   function totalSupply() public view returns (uint256) {\\r\\n     return atEditionId.current() - 1;\\r\\n    }\\r\\n\\r\\n     \\r\\n // return balance in wei\\r\\n    function getBalance() public view returns(uint){\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    // return prize balance\\r\\n     function getPrize() external view returns (uint256) {\\r\\n        uint256 balance = address(this).balance;\\r\\n        return balance * 9 / 10; //90%\\r\\n    }\\r\\n\\r\\n\\r\\n  function purchase() external payable returns (uint256) {\\r\\n    require(balanceOf(msg.sender) < maxTokens, \\\"You have reached the maximum tokens allowed per address\\\");\\r\\n    require(active, \\\"Raffle has not started. Owner must setApprovedMinter\\\");\\r\\n    require(msg.value == salePrice, \\\"No soup for you!\\\");\\r\\n    address[] memory toMint = new address[](1);\\r\\n    toMint[0] = msg.sender;\\r\\n    mintedTokens[msg.sender] = true;\\r\\n    nonce ++;\\r\\n    createSeed();\\r\\n    EntryCount ++;\\r\\n    isPlayer[msg.sender] = true;\\r\\n    nftTokenIds.push(EntryCount);\\r\\n    uint256 entryTime = block.timestamp;\\r\\n    Entry memory x = Entry(msg.sender, EntryCount, entryTime);\\r\\n    entry.push(x);\\r\\n      if (EntryCount == editionSize) {\\r\\n            isComplete = true;\\r\\n            active = false;\\r\\n        }\\r\\n    emit Editionsold(salePrice, msg.sender, EntryCount, entryTime);\\r\\n    return _mintEditions(toMint);\\r\\n  }\\r\\n\\r\\n\\r\\n    function createSeed() internal returns(uint256) {\\r\\n      nonce ++;\\r\\n      seed[msg.sender] = uint256(keccak256(abi.encodePacked(msg.sender, EntryCount, block.timestamp, blockhash(block.number - 1))));            \\r\\n      \\r\\n    }\\r\\n \\r\\n    function prove(uint256 proof) external  {\\r\\n      nonce ++;\\r\\n   // see if the proof is valid for the seed associated with the address\\r\\n      require(SlothVDF.verify(proof, seed[msg.sender], prime, iterations), \\\"Invalid proof\\\");\\r\\n   // use the proof as a provable random number\\r\\n          randomNumber = proof;\\r\\n            if (randomNumber > 0) {\\r\\n           isProof = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\nfunction getOwner(uint _id) public view returns (address) {\\r\\n    return ownerOf(_id);\\r\\n  }\\r\\n\\r\\n\\r\\nfunction pickWinner() public returns (uint256) {\\r\\n  require(randomNumber > 0, \\\"Generate provable random number first\\\");\\r\\n  require(isPlayer[msg.sender], \\\"User is not a active player. Only a registered ticket holder can start drawing\\\");\\r\\n  nonce ++;\\r\\n  winningNumber = uint256(keccak256(abi.encodePacked(block.number, randomNumber, blockhash(block.number - 1)))) % totalSupply();\\r\\n  address winner = getOwner(winningNumber);\\r\\n  uint256 prize = address(this).balance * 90 / 100;\\r\\n  Winner = payable(winner);\\r\\n  emit WinnerPicked(Winner, winningNumber, prize);\\r\\n  winnerSelected = true;\\r\\n  active = false;\\r\\n  RaffleWinner memory x = RaffleWinner(Winner, winningNumber);\\r\\n  raffleWinner.push(x);\\r\\n  Winner.transfer(prize);\\r\\n  withdrawBuny();\\r\\n  endTime = block.timestamp;\\r\\n  return winningNumber;\\r\\n}\\r\\n\\r\\n//failsafe?\\r\\n    function claimPrize(uint256 _winningNumber) public {\\r\\n    address payable tokenOwner = payable(ownerOf(_winningNumber));\\r\\n    require(msg.sender == tokenOwner, \\\"Only the owner of this token can withdraw the balance\\\");\\r\\n    require(winnerSelected, \\\"The contract has no balance to withdraw\\\");\\r\\n    uint256 balance = address(this).balance * 90/100;\\r\\n    (bool success, ) = tokenOwner.call{value: balance}(\\\"\\\");\\r\\n    prizeClaimed = true;\\r\\n    withdrawBuny();\\r\\n    require(success, \\\"Withdrawal failed\\\");\\r\\n  }\\r\\n\\r\\n\\r\\n  function _isAllowedToMint() internal view returns (bool) {\\r\\n    if (owner() == msg.sender) {\\r\\n      return true;\\r\\n    }\\r\\n    if (allowedMinters[address(0x0)]) {\\r\\n      return true;\\r\\n    }\\r\\n    return allowedMinters[msg.sender];\\r\\n  }\\r\\n\\r\\n  function mintEdition(address to) external override returns (uint256) {\\r\\n    require(_isAllowedToMint(), \\\"Needs to be an allowed minter\\\");\\r\\n    address[] memory toMint = new address[](1);\\r\\n    toMint[0] = to;\\r\\n    return _mintEditions(toMint);\\r\\n  }\\r\\n\\r\\n  function mintEditions(address[] memory recipients) external override returns (uint256) {\\r\\n    require(_isAllowedToMint(), \\\"Needs to be an allowed minter\\\");\\r\\n    return _mintEditions(recipients);\\r\\n  }\\r\\n\\r\\n  function owner() public view override(OwnableUpgradeable, IEditionSingleMintable) returns (address) {\\r\\n    return super.owner();\\r\\n  }\\r\\n\\r\\n  // helper function starts raffle once setApprovedMinter. \\r\\n  function enableRaffle() public onlyOwner {\\r\\n      active = true;\\r\\n    }\\r\\n\\r\\n    \\r\\n     function readAllEntries() public view  returns (Entry[] memory) {\\r\\n    Entry[] memory result = new Entry[](EntryCount);\\r\\n    for (uint256 i = 0; i < EntryCount; i++) {\\r\\n      result[i] = entry[i];\\r\\n    }\\r\\n    return result;\\r\\n  }\\r\\n  \\r\\n  // set contract address as Approved minter\\r\\n  // set active state to false\\r\\n  // log and emit current time\\r\\n  function setApprovedMinter(address minter, bool allowed) public onlyOwner {\\r\\n    allowedMinters[minter] = allowed;\\r\\n    enableRaffle();\\r\\n    startTime = block.timestamp;\\r\\n    emit Rafflestarted(minter, startTime);\\r\\n  }\\r\\n\\r\\n  \\r\\n\\r\\n\\r\\n  /// Returns the number of editions allowed to mint (max_uint256 when open edition)\\r\\n  function numberCanMint() public view override returns (uint256) {\\r\\n    // Return max int if open edition\\r\\n    if (editionSize == 0) {\\r\\n      return type(uint256).max;\\r\\n    }\\r\\n    // atEditionId is one-indexed hence the need to remove one here\\r\\n    return editionSize + 1 - atEditionId.current();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n      @dev Private function to mint als without any access checks.\\r\\n           Called by the public edition minting functions.\\r\\n     */\\r\\n  function _mintEditions(address[] memory recipients) internal returns (uint256) {\\r\\n    uint256 startAt = atEditionId.current();\\r\\n    uint256 endAt = startAt + recipients.length - 1;\\r\\n    require(editionSize == 0 || endAt <= editionSize, \\\"Sold out\\\");\\r\\n    while (atEditionId.current() <= endAt) {\\r\\n      _mint(recipients[atEditionId.current() - startAt], atEditionId.current());\\r\\n      atEditionId.increment();\\r\\n    }\\r\\n    return atEditionId.current();\\r\\n  }\\r\\n\\r\\n \\r\\n   \\r\\n    function withdrawBuny() internal {\\r\\n        uint256 amount = address(this).balance * 10 / 100;\\r\\n        require(isComplete, \\\"Raffle sale must be complete before withdraw function is enabled\\\");\\r\\n        require(amount > 0, \\\"Contract A has no balance to withdraw\\\");\\r\\n\\r\\n        bunyBank.transfer(amount);\\r\\n    }\\r\\n\\r\\n\\r\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\r\\n    require(_exists(tokenId), \\\"No token\\\");\\r\\n\\r\\n    return sharedNFTLogic.createMetadataEdition(name(), description, imageUrl, animationUrl, tokenId, editionSize);\\r\\n  }\\r\\n\\r\\n\\r\\n     function supportsInterface(\\r\\n        bytes4 interfaceId\\r\\n    ) public view virtual override( ERC721Upgradeable) returns (bool) {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x04b0298980f2a626218119697d3587a5d3df9dddd7d6d62dedf43a9df87b6734\",\"license\":\"GPL-3.0\"},\"contracts/IEditionSingleMintable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\ninterface IEditionSingleMintable {\\n  function mintEdition(address to) external returns (uint256);\\n\\n  function mintEditions(address[] memory to) external returns (uint256);\\n\\n  function numberCanMint() external view returns (uint256);\\n\\n  function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc90163949d024e5903bdf06e40cb6689ab30551e42dc771dcd46c8537cf04b80\",\"license\":\"GPL-3.0\"},\"contracts/IPublicSharedMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\n/// Shared public library for on-chain NFT functions\\ninterface IPublicSharedMetadata {\\n  /// @param unencoded bytes to base64-encode\\n  function base64Encode(bytes memory unencoded) external pure returns (string memory);\\n\\n  /// Encodes the argument json bytes into base64-data uri format\\n  /// @param json Raw json to base64 and turn into a data-uri\\n  function encodeMetadataJSON(bytes memory json) external pure returns (string memory);\\n\\n  /// Proxy to openzeppelin's toString function\\n  /// @param value number to return as a string\\n  function numberToString(uint256 value) external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0xaf1cbbb34e11975b02303c04d71796c8528341743fb9ba9f22f78d628d911caf\",\"license\":\"GPL-3.0\"},\"contracts/SharedNFTLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport { StringsUpgradeable } from '@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol';\\nimport { Base64 } from 'base64-sol/base64.sol';\\nimport { IPublicSharedMetadata } from './IPublicSharedMetadata.sol';\\n\\n/// Shared NFT logic for rendering metadata associated with editions\\n/// @dev Can safely be used for generic base64Encode and numberToString functions\\ncontract SharedNFTLogic is IPublicSharedMetadata {\\n  /// @param unencoded bytes to base64-encode\\n  function base64Encode(bytes memory unencoded) public pure override returns (string memory) {\\n    return Base64.encode(unencoded);\\n  }\\n\\n  /// Proxy to openzeppelin's toString function\\n  /// @param value number to return as a string\\n  function numberToString(uint256 value) public pure override returns (string memory) {\\n    return StringsUpgradeable.toString(value);\\n  }\\n\\n  /// Generate edition metadata from storage information as base64-json blob\\n  /// Combines the media data and metadata\\n  /// @param name Name of NFT in metadata\\n  /// @param description Description of NFT in metadata\\n  /// @param imageUrl URL of image to render for edition\\n  /// @param animationUrl URL of animation to render for edition\\n  /// @param tokenOfEdition Token ID for specific token\\n  /// @param editionSize Size of entire edition to show\\n  function createMetadataEdition(\\n    string memory name,\\n    string memory description,\\n    string memory imageUrl,\\n    string memory animationUrl,\\n    uint256 tokenOfEdition,\\n    uint256 editionSize\\n  ) external pure returns (string memory) {\\n    string memory _tokenMediaData = tokenMediaData(imageUrl, animationUrl, tokenOfEdition);\\n    bytes memory json = createMetadataJSON(name, description, _tokenMediaData, tokenOfEdition, editionSize);\\n    return encodeMetadataJSON(json);\\n  }\\n\\n  /// Function to create the metadata json string for the nft edition\\n  /// @param name Name of NFT in metadata\\n  /// @param description Description of NFT in metadata\\n  /// @param mediaData Data for media to include in json object\\n  /// @param tokenOfEdition Token ID for specific token\\n  /// @param editionSize Size of entire edition to show\\n  function createMetadataJSON(\\n    string memory name,\\n    string memory description,\\n    string memory mediaData,\\n    uint256 tokenOfEdition,\\n    uint256 editionSize\\n  ) public pure returns (bytes memory) {\\n    bytes memory editionSizeText;\\n    if (editionSize > 0) {\\n      editionSizeText = abi.encodePacked('/', numberToString(editionSize));\\n    }\\n    return\\n      abi.encodePacked(\\n        '{\\\"name\\\": \\\"',\\n        name,\\n        ' ',\\n        numberToString(tokenOfEdition),\\n        editionSizeText,\\n        '\\\", \\\"',\\n        'description\\\": \\\"',\\n        description,\\n        '\\\", \\\"',\\n        mediaData,\\n        'properties\\\": {\\\"number\\\": ',\\n        numberToString(tokenOfEdition),\\n        ', \\\"name\\\": \\\"',\\n        name,\\n        '\\\"}}'\\n      );\\n  }\\n\\n  /// Encodes the argument json bytes into base64-data uri format\\n  /// @param json Raw json to base64 and turn into a data-uri\\n  function encodeMetadataJSON(bytes memory json) public pure override returns (string memory) {\\n    return string(abi.encodePacked('data:application/json;base64,', base64Encode(json)));\\n  }\\n\\n  /// Generates edition metadata from storage information as base64-json blob\\n  /// Combines the media data and metadata\\n  /// @param imageUrl URL of image to render for edition\\n  /// @param animationUrl URL of animation to render for edition\\n  function tokenMediaData(string memory imageUrl, string memory animationUrl, uint256 tokenOfEdition) public pure returns (string memory) {\\n    bool hasImage = bytes(imageUrl).length > 0;\\n    bool hasAnimation = bytes(animationUrl).length > 0;\\n    if (hasImage && hasAnimation) {\\n      return\\n        string(\\n          abi.encodePacked(\\n            'image\\\": \\\"',\\n            imageUrl,\\n            '?id=',\\n            numberToString(tokenOfEdition),\\n            '\\\", \\\"animation_url\\\": \\\"',\\n            animationUrl,\\n            '?id=',\\n            numberToString(tokenOfEdition),\\n            '\\\", \\\"'\\n          )\\n        );\\n    }\\n    if (hasImage) {\\n      return string(abi.encodePacked('image\\\": \\\"', imageUrl, '?id=', numberToString(tokenOfEdition), '\\\", \\\"'));\\n    }\\n    if (hasAnimation) {\\n      return string(abi.encodePacked('animation_url\\\": \\\"', animationUrl, '?id=', numberToString(tokenOfEdition), '\\\", \\\"'));\\n    }\\n\\n    return '';\\n  }\\n}\\n\",\"keccak256\":\"0x986935a51bd9bfc02371248ed0d59a1a1150ccd113a912626ae6c7c1ebe3f043\",\"license\":\"GPL-3.0\"},\"contracts/SlothVDF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// https://eprint.iacr.org/2015/366.pdf\\r\\n \\r\\npragma solidity ^0.8.11;\\r\\n \\r\\nlibrary SlothVDF {\\r\\n \\r\\n    /// @dev pow(base, exponent, modulus)\\r\\n    /// @param base base\\r\\n    /// @param exponent exponent\\r\\n    /// @param modulus modulus\\r\\n    function bexmod(\\r\\n        uint256 base,\\r\\n        uint256 exponent,\\r\\n        uint256 modulus\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 _result = 1;\\r\\n        uint256 _base = base;\\r\\n        for (; exponent > 0; exponent >>= 1) {\\r\\n            if (exponent & 1 == 1) {\\r\\n                _result = mulmod(_result, _base, modulus);\\r\\n            }\\r\\n \\r\\n            _base = mulmod(_base, _base, modulus);\\r\\n        }\\r\\n        return _result;\\r\\n    }\\r\\n \\r\\n    /// @dev compute sloth starting from seed, over prime, for iterations\\r\\n    /// @param _seed seed\\r\\n    /// @param _prime prime\\r\\n    /// @param _iterations number of iterations\\r\\n    /// @return sloth result\\r\\n    function compute(\\r\\n        uint256 _seed,\\r\\n        uint256 _prime,\\r\\n        uint256 _iterations\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 _exponent = (_prime + 1) >> 2;\\r\\n        _seed %= _prime;\\r\\n        for (uint256 i; i < _iterations; ++i) {\\r\\n            _seed = bexmod(_seed, _exponent, _prime);\\r\\n        }\\r\\n        return _seed;\\r\\n    }\\r\\n     \\r\\n    /// @dev verify sloth result proof, starting from seed, over prime, for iterations\\r\\n    /// @param _proof result\\r\\n    /// @param _seed seed\\r\\n    /// @param _prime prime\\r\\n    /// @param _iterations number of iterations\\r\\n    /// @return true if y is a quadratic residue modulo p\\r\\n    function verify(\\r\\n        uint256 _proof,\\r\\n        uint256 _seed,\\r\\n        uint256 _prime,\\r\\n        uint256 _iterations\\r\\n    ) internal pure returns (bool) {\\r\\n        for (uint256 i; i < _iterations; ++i) {\\r\\n            _proof = mulmod(_proof, _proof, _prime);\\r\\n        }\\r\\n        _seed %= _prime;\\r\\n        if (_seed == _proof) return true;\\r\\n        if (_prime - _seed == _proof) return true;\\r\\n        return false;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x1340874467ab5f225efbbdcc4ebd16c08d9cc3d7dad579a82b7ebbbb0f2ff5ce\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052601060809081526f42756e7920526166666c65203230323360801b60a05260679062000031908262000186565b506040805180820190915260058152647242554e5960d81b60208201526068906200005d908262000186565b507104f627b3bbd341d240517fe3db99ad3b2c27606955610539606b556000606c553480156200008c57600080fd5b506040516200144638038062001446833981016040819052620000af916200026b565b606680546001600160a01b039384166001600160a01b031991821617909155606a8054929093169116179055620002aa565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200010c57607f821691505b6020821081036200012d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200018157600081815260208120601f850160051c810160208610156200015c5750805b601f850160051c820191505b818110156200017d5782815560010162000168565b5050505b505050565b81516001600160401b03811115620001a257620001a2620000e1565b620001ba81620001b38454620000f7565b8462000133565b602080601f831160018114620001f25760008415620001d95750858301515b600019600386901b1c1916600185901b1785556200017d565b600085815260208120601f198616915b82811015620002235788860151825594840194600190910190840162000202565b5085821015620002425787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b03811681146200026857600080fd5b50565b600080604083850312156200027f57600080fd5b82516200028c8162000252565b60208401519092506200029f8162000252565b809150509250929050565b61118c80620002ba6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063adee9cc411610071578063adee9cc414610116578063d57f966b1461012b578063df18d1fd14610142578063ef5c18bf14610155578063f077237714610168578063f2fde38b1461018f57600080fd5b80630dcd5f2b146100ae5780635c60da1b146100de578063715018a6146100f15780637427fd32146100fb5780638da5cb5b1461010e575b600080fd5b6100c16100bc366004610ba2565b6101a2565b6040516001600160a01b0390911681526020015b60405180910390f35b6066546100c1906001600160a01b031681565b6100f9610241565b005b606a546100c1906001600160a01b031681565b6100c1610255565b61011e61026e565b6040516100d59190610c01565b610134606c5481565b6040519081526020016100d5565b6100f9610150366004610ce5565b6104ef565b610134610163366004610dac565b610569565b61017b610176366004610ba2565b61085d565b6040516100d5989796959493929190610e33565b6100f961019d366004610ce5565b6109d8565b606654604080516020810184905260009261023b926001600160a01b0390911691016040516020818303038152906040526101dc90610e96565b30604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b8152606093841b60148201526f5af43d82803e903d91602b57fd5bf3ff60801b6028820152921b6038830152604c8201526037808220606c830152605591012090565b92915050565b610249610a51565b6102536000610ab0565b565b60006102696033546001600160a01b031690565b905090565b60606000606c5467ffffffffffffffff81111561028d5761028d610d09565b60405190808252806020026020018201604052801561030f57816020015b6102fc6040518061010001604052806060815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b8152602001906001900390816102ab5790505b50905060005b606c548110156104e957606d818154811061033257610332610eba565b90600052602060002090600802016040518061010001604052908160008201805461035c90610ed0565b80601f016020809104026020016040519081016040528092919081815260200182805461038890610ed0565b80156103d55780601f106103aa576101008083540402835291602001916103d5565b820191906000526020600020905b8154815290600101906020018083116103b857829003601f168201915b505050918352505060018201546001600160a01b03166020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260078201805460e09092019161043790610ed0565b80601f016020809104026020016040519081016040528092919081815260200182805461046390610ed0565b80156104b05780601f10610485576101008083540402835291602001916104b0565b820191906000526020600020905b81548152906001019060200180831161049357829003601f168201915b5050505050815250508282815181106104cb576104cb610eba565b602002602001018190525080806104e190610f04565b915050610315565b50919050565b6104f7610a51565b6001600160a01b0381166105475760405162461bcd60e51b8152602060048201526012602482015271496e76616c6964204242206164647265737360701b60448201526064015b60405180910390fd5b606a80546001600160a01b0319166001600160a01b0392909216919091179055565b60008061057560655490565b60665460408051602081018490529293506000926105b5926001600160a01b031691016040516020818303038152906040526105b090610e96565b610b02565b9050806001600160a01b0316630e2cbc3d33606760688d8d8d8d8d606a60009054906101000a90046001600160a01b03168e606954606b546040518d63ffffffff1660e01b81526004016106149c9b9a99989796959493929190610fa8565b600060405180830381600087803b15801561062e57600080fd5b505af1158015610642573d6000803e3d6000fd5b5050604080518a815260208101899052908101879052606081018990526001600160a01b038416925033915084907f226927875e8fc1b20c8057e25b363b96220e510f97e084791642716d186327d59060800160405180910390a46106ab606580546001019055565b6000604051806101000160405280606780546106c690610ed0565b80601f01602080910402602001604051908101604052809291908181526020018280546106f290610ed0565b801561073f5780601f106107145761010080835404028352916020019161073f565b820191906000526020600020905b81548152906001019060200180831161072257829003601f168201915b50505091835250506001600160a01b0384166020820152604081018a9052606081018590526080810188905260a0810187905260c0810189905260e0018a9052606d80546001810182556000919091528151919250829160089091027f5006b838207c6a9ae9b84d68f467dd4bb5c305fbfb6b04eab8faaabeec1e18d8019081906107ca9082611096565b5060208201516001820180546001600160a01b0319166001600160a01b0390921691909117905560408201516002820155606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e082015160078201906108379082611096565b5050606c80549150600061084a83610f04565b90915550929a9950505050505050505050565b606d818154811061086d57600080fd5b906000526020600020906008020160009150905080600001805461089090610ed0565b80601f01602080910402602001604051908101604052809291908181526020018280546108bc90610ed0565b80156109095780601f106108de57610100808354040283529160200191610909565b820191906000526020600020905b8154815290600101906020018083116108ec57829003601f168201915b5050505050908060010160009054906101000a90046001600160a01b03169080600201549080600301549080600401549080600501549080600601549080600701805461095590610ed0565b80601f016020809104026020016040519081016040528092919081815260200182805461098190610ed0565b80156109ce5780601f106109a3576101008083540402835291602001916109ce565b820191906000526020600020905b8154815290600101906020018083116109b157829003601f168201915b5050505050905088565b6109e0610a51565b6001600160a01b038116610a455760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161053e565b610a4e81610ab0565b50565b33610a5a610255565b6001600160a01b0316146102535760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161053e565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b03811661023b5760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c6564000000000000000000604482015260640161053e565b600060208284031215610bb457600080fd5b5035919050565b6000815180845260005b81811015610be157602081850181015186830182015201610bc5565b506000602082860101526020601f19601f83011685010191505092915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610cc257603f1989840301855281516101008151818652610c4f82870182610bbb565b838b01516001600160a01b0316878c0152898401518a880152606080850151908801526080808501519088015260a0848101519088015260c0808501519088015260e093840151878203948801949094529150610cae90508183610bbb565b968901969450505090860190600101610c28565b509098975050505050505050565b6001600160a01b0381168114610a4e57600080fd5b600060208284031215610cf757600080fd5b8135610d0281610cd0565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610d3057600080fd5b813567ffffffffffffffff80821115610d4b57610d4b610d09565b604051601f8301601f19908116603f01168101908282118183101715610d7357610d73610d09565b81604052838152866020858801011115610d8c57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c08789031215610dc557600080fd5b863567ffffffffffffffff80821115610ddd57600080fd5b610de98a838b01610d1f565b97506020890135915080821115610dff57600080fd5b50610e0c89828a01610d1f565b96999698505050506040850135946060810135946080820135945060a09091013592509050565b6000610100808352610e478184018c610bbb565b905060018060a01b038a1660208401528860408401528760608401528660808401528560a08401528460c084015282810360e0840152610e878185610bbb565b9b9a5050505050505050505050565b805160208083015191908110156104e95760001960209190910360031b1b16919050565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680610ee457607f821691505b6020821081036104e957634e487b7160e01b600052602260045260246000fd5b600060018201610f2457634e487b7160e01b600052601160045260246000fd5b5060010190565b60008154610f3881610ed0565b808552602060018381168015610f555760018114610f6f57610f9d565b60ff1985168884015283151560051b880183019550610f9d565b866000528260002060005b85811015610f955781548a8201860152908301908401610f7a565b890184019650505b505050505092915050565b600060018060a01b03808f1683526101806020840152610fcc61018084018f610f2b565b8381036040850152610fde818f610f2b565b90508381036060850152610ff2818e610bbb565b90508381036080850152611006818d610bbb565b60a085019b909b525060c08301989098525060e081019590955292909416610100840152610120830152610140820192909252610160015295945050505050565b601f82111561109157600081815260208120601f850160051c8101602086101561106e5750805b601f850160051c820191505b8181101561108d5782815560010161107a565b5050505b505050565b815167ffffffffffffffff8111156110b0576110b0610d09565b6110c4816110be8454610ed0565b84611047565b602080601f8311600181146110f957600084156110e15750858301515b600019600386901b1c1916600185901b17855561108d565b600085815260208120601f198616915b8281101561112857888601518255948401946001909101908401611109565b50858210156111465787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220c3c3b529419531a6bf11a8320de9e00692d7f01cf9c06412829ed90f696825d164736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063adee9cc411610071578063adee9cc414610116578063d57f966b1461012b578063df18d1fd14610142578063ef5c18bf14610155578063f077237714610168578063f2fde38b1461018f57600080fd5b80630dcd5f2b146100ae5780635c60da1b146100de578063715018a6146100f15780637427fd32146100fb5780638da5cb5b1461010e575b600080fd5b6100c16100bc366004610ba2565b6101a2565b6040516001600160a01b0390911681526020015b60405180910390f35b6066546100c1906001600160a01b031681565b6100f9610241565b005b606a546100c1906001600160a01b031681565b6100c1610255565b61011e61026e565b6040516100d59190610c01565b610134606c5481565b6040519081526020016100d5565b6100f9610150366004610ce5565b6104ef565b610134610163366004610dac565b610569565b61017b610176366004610ba2565b61085d565b6040516100d5989796959493929190610e33565b6100f961019d366004610ce5565b6109d8565b606654604080516020810184905260009261023b926001600160a01b0390911691016040516020818303038152906040526101dc90610e96565b30604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b8152606093841b60148201526f5af43d82803e903d91602b57fd5bf3ff60801b6028820152921b6038830152604c8201526037808220606c830152605591012090565b92915050565b610249610a51565b6102536000610ab0565b565b60006102696033546001600160a01b031690565b905090565b60606000606c5467ffffffffffffffff81111561028d5761028d610d09565b60405190808252806020026020018201604052801561030f57816020015b6102fc6040518061010001604052806060815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b8152602001906001900390816102ab5790505b50905060005b606c548110156104e957606d818154811061033257610332610eba565b90600052602060002090600802016040518061010001604052908160008201805461035c90610ed0565b80601f016020809104026020016040519081016040528092919081815260200182805461038890610ed0565b80156103d55780601f106103aa576101008083540402835291602001916103d5565b820191906000526020600020905b8154815290600101906020018083116103b857829003601f168201915b505050918352505060018201546001600160a01b03166020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260078201805460e09092019161043790610ed0565b80601f016020809104026020016040519081016040528092919081815260200182805461046390610ed0565b80156104b05780601f10610485576101008083540402835291602001916104b0565b820191906000526020600020905b81548152906001019060200180831161049357829003601f168201915b5050505050815250508282815181106104cb576104cb610eba565b602002602001018190525080806104e190610f04565b915050610315565b50919050565b6104f7610a51565b6001600160a01b0381166105475760405162461bcd60e51b8152602060048201526012602482015271496e76616c6964204242206164647265737360701b60448201526064015b60405180910390fd5b606a80546001600160a01b0319166001600160a01b0392909216919091179055565b60008061057560655490565b60665460408051602081018490529293506000926105b5926001600160a01b031691016040516020818303038152906040526105b090610e96565b610b02565b9050806001600160a01b0316630e2cbc3d33606760688d8d8d8d8d606a60009054906101000a90046001600160a01b03168e606954606b546040518d63ffffffff1660e01b81526004016106149c9b9a99989796959493929190610fa8565b600060405180830381600087803b15801561062e57600080fd5b505af1158015610642573d6000803e3d6000fd5b5050604080518a815260208101899052908101879052606081018990526001600160a01b038416925033915084907f226927875e8fc1b20c8057e25b363b96220e510f97e084791642716d186327d59060800160405180910390a46106ab606580546001019055565b6000604051806101000160405280606780546106c690610ed0565b80601f01602080910402602001604051908101604052809291908181526020018280546106f290610ed0565b801561073f5780601f106107145761010080835404028352916020019161073f565b820191906000526020600020905b81548152906001019060200180831161072257829003601f168201915b50505091835250506001600160a01b0384166020820152604081018a9052606081018590526080810188905260a0810187905260c0810189905260e0018a9052606d80546001810182556000919091528151919250829160089091027f5006b838207c6a9ae9b84d68f467dd4bb5c305fbfb6b04eab8faaabeec1e18d8019081906107ca9082611096565b5060208201516001820180546001600160a01b0319166001600160a01b0390921691909117905560408201516002820155606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e082015160078201906108379082611096565b5050606c80549150600061084a83610f04565b90915550929a9950505050505050505050565b606d818154811061086d57600080fd5b906000526020600020906008020160009150905080600001805461089090610ed0565b80601f01602080910402602001604051908101604052809291908181526020018280546108bc90610ed0565b80156109095780601f106108de57610100808354040283529160200191610909565b820191906000526020600020905b8154815290600101906020018083116108ec57829003601f168201915b5050505050908060010160009054906101000a90046001600160a01b03169080600201549080600301549080600401549080600501549080600601549080600701805461095590610ed0565b80601f016020809104026020016040519081016040528092919081815260200182805461098190610ed0565b80156109ce5780601f106109a3576101008083540402835291602001916109ce565b820191906000526020600020905b8154815290600101906020018083116109b157829003601f168201915b5050505050905088565b6109e0610a51565b6001600160a01b038116610a455760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161053e565b610a4e81610ab0565b50565b33610a5a610255565b6001600160a01b0316146102535760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161053e565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b03811661023b5760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c6564000000000000000000604482015260640161053e565b600060208284031215610bb457600080fd5b5035919050565b6000815180845260005b81811015610be157602081850181015186830182015201610bc5565b506000602082860101526020601f19601f83011685010191505092915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610cc257603f1989840301855281516101008151818652610c4f82870182610bbb565b838b01516001600160a01b0316878c0152898401518a880152606080850151908801526080808501519088015260a0848101519088015260c0808501519088015260e093840151878203948801949094529150610cae90508183610bbb565b968901969450505090860190600101610c28565b509098975050505050505050565b6001600160a01b0381168114610a4e57600080fd5b600060208284031215610cf757600080fd5b8135610d0281610cd0565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610d3057600080fd5b813567ffffffffffffffff80821115610d4b57610d4b610d09565b604051601f8301601f19908116603f01168101908282118183101715610d7357610d73610d09565b81604052838152866020858801011115610d8c57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c08789031215610dc557600080fd5b863567ffffffffffffffff80821115610ddd57600080fd5b610de98a838b01610d1f565b97506020890135915080821115610dff57600080fd5b50610e0c89828a01610d1f565b96999698505050506040850135946060810135946080820135945060a09091013592509050565b6000610100808352610e478184018c610bbb565b905060018060a01b038a1660208401528860408401528760608401528660808401528560a08401528460c084015282810360e0840152610e878185610bbb565b9b9a5050505050505050505050565b805160208083015191908110156104e95760001960209190910360031b1b16919050565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680610ee457607f821691505b6020821081036104e957634e487b7160e01b600052602260045260246000fd5b600060018201610f2457634e487b7160e01b600052601160045260246000fd5b5060010190565b60008154610f3881610ed0565b808552602060018381168015610f555760018114610f6f57610f9d565b60ff1985168884015283151560051b880183019550610f9d565b866000528260002060005b85811015610f955781548a8201860152908301908401610f7a565b890184019650505b505050505092915050565b600060018060a01b03808f1683526101806020840152610fcc61018084018f610f2b565b8381036040850152610fde818f610f2b565b90508381036060850152610ff2818e610bbb565b90508381036080850152611006818d610bbb565b60a085019b909b525060c08301989098525060e081019590955292909416610100840152610120830152610140820192909252610160015295945050505050565b601f82111561109157600081815260208120601f850160051c8101602086101561106e5750805b601f850160051c820191505b8181101561108d5782815560010161107a565b5050505b505050565b815167ffffffffffffffff8111156110b0576110b0610d09565b6110c4816110be8454610ed0565b84611047565b602080601f8311600181146110f957600084156110e15750858301515b600019600386901b1c1916600185901b17855561108d565b600085815260208120601f198616915b8281101561112857888601518255948401946001909101908401611109565b50858210156111465787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220c3c3b529419531a6bf11a8320de9e00692d7f01cf9c06412829ed90f696825d164736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Initializes factory with address of implementation logic"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 823,
        "contract": "contracts/BunyRaffleFactory.sol:BunyRaffleFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 826,
        "contract": "contracts/BunyRaffleFactory.sol:BunyRaffleFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3168,
        "contract": "contracts/BunyRaffleFactory.sol:BunyRaffleFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 593,
        "contract": "contracts/BunyRaffleFactory.sol:BunyRaffleFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 713,
        "contract": "contracts/BunyRaffleFactory.sol:BunyRaffleFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8741,
        "contract": "contracts/BunyRaffleFactory.sol:BunyRaffleFactory",
        "label": "atContract",
        "offset": 0,
        "slot": "101",
        "type": "t_struct(Counter)3175_storage"
      },
      {
        "astId": 8743,
        "contract": "contracts/BunyRaffleFactory.sol:BunyRaffleFactory",
        "label": "implementation",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 8746,
        "contract": "contracts/BunyRaffleFactory.sol:BunyRaffleFactory",
        "label": "_name",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 8749,
        "contract": "contracts/BunyRaffleFactory.sol:BunyRaffleFactory",
        "label": "_symbol",
        "offset": 0,
        "slot": "104",
        "type": "t_string_storage"
      },
      {
        "astId": 8752,
        "contract": "contracts/BunyRaffleFactory.sol:BunyRaffleFactory",
        "label": "_prime",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 8754,
        "contract": "contracts/BunyRaffleFactory.sol:BunyRaffleFactory",
        "label": "_bunyBank",
        "offset": 0,
        "slot": "106",
        "type": "t_address_payable"
      },
      {
        "astId": 8757,
        "contract": "contracts/BunyRaffleFactory.sol:BunyRaffleFactory",
        "label": "_iterations",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 8760,
        "contract": "contracts/BunyRaffleFactory.sol:BunyRaffleFactory",
        "label": "collectionCount",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 8780,
        "contract": "contracts/BunyRaffleFactory.sol:BunyRaffleFactory",
        "label": "collection",
        "offset": 0,
        "slot": "109",
        "type": "t_array(t_struct(Collection)8797_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Collection)8797_storage)dyn_storage": {
        "base": "t_struct(Collection)8797_storage",
        "encoding": "dynamic_array",
        "label": "struct BunyRaffleFactory.Collection[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Collection)8797_storage": {
        "encoding": "inplace",
        "label": "struct BunyRaffleFactory.Collection",
        "members": [
          {
            "astId": 8782,
            "contract": "contracts/BunyRaffleFactory.sol:BunyRaffleFactory",
            "label": "_name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 8784,
            "contract": "contracts/BunyRaffleFactory.sol:BunyRaffleFactory",
            "label": "editionContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 8786,
            "contract": "contracts/BunyRaffleFactory.sol:BunyRaffleFactory",
            "label": "_editionSize",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8788,
            "contract": "contracts/BunyRaffleFactory.sol:BunyRaffleFactory",
            "label": "newId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8790,
            "contract": "contracts/BunyRaffleFactory.sol:BunyRaffleFactory",
            "label": "_minPlayers",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8792,
            "contract": "contracts/BunyRaffleFactory.sol:BunyRaffleFactory",
            "label": "_maxTokens",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8794,
            "contract": "contracts/BunyRaffleFactory.sol:BunyRaffleFactory",
            "label": "_salePrice",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 8796,
            "contract": "contracts/BunyRaffleFactory.sol:BunyRaffleFactory",
            "label": "_imageUrl",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Counter)3175_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 3174,
            "contract": "contracts/BunyRaffleFactory.sol:BunyRaffleFactory",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
