{
  "address": "0xBD23fD4C249DB92214022c8985C546ada3A4A5B1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract SharedNFTLogic",
          "name": "_sharedNFTLogic",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "EntryCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entryTime",
          "type": "uint256"
        }
      ],
      "name": "Editionsold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        }
      ],
      "name": "Rafflestarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "winningNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prize",
          "type": "uint256"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EntryCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Winner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "active",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedMinters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "animationUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bunyBank",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_winningNumber",
          "type": "uint256"
        }
      ],
      "name": "claimPrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "editionSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableRaffle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "imageUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_imageUrl",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_editionSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minPlayers",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_bunyBank",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_prime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_iterations",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isComplete",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPlayer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "iterations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mintEdition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        }
      ],
      "name": "mintEditions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nftTokenIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberCanMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pickWinner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prizeClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proof",
          "type": "uint256"
        }
      ],
      "name": "prove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "raffleWinner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "winner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "winningTokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readAllEntries",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "EntryNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "entryTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct BunyRaffleNft.Entry[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "salePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "seed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "setApprovedMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winnerSelected",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winningNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc737e5dbf4a6b4c656dbe72c955b5e13ea389b7e030f62f9d6f7b4436c0a7517",
  "receipt": {
    "to": null,
    "from": "0x8406A51A0E1B5F52Ff61226773e6328e5Da5d964",
    "contractAddress": "0xBD23fD4C249DB92214022c8985C546ada3A4A5B1",
    "transactionIndex": 0,
    "gasUsed": "2908969",
    "logsBloom": "0x
    "blockHash": "0x07f8bd56964fc1c79ccc236295324eed340880ff7cc2626916c18e95ef7ac47d",
    "transactionHash": "0xc737e5dbf4a6b4c656dbe72c955b5e13ea389b7e030f62f9d6f7b4436c0a7517",
    "logs": [],
    "blockNumber": 225288091,
    "cumulativeGasUsed": "2908969",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5807574C534393dFD4094386b30C89fA2104baF2"
  ],
  "numDeployments": 1,
  "solcInputHash": "8c770a2d7c2d2a48820e157543d4f641",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract SharedNFTLogic\",\"name\":\"_sharedNFTLogic\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"EntryCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryTime\",\"type\":\"uint256\"}],\"name\":\"Editionsold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"Rafflestarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EntryCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Winner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedMinters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"animationUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bunyBank\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_winningNumber\",\"type\":\"uint256\"}],\"name\":\"claimPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"editionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imageUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_imageUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_editionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPlayers\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_bunyBank\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_prime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_iterations\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isComplete\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPlayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iterations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintEdition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"mintEditions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftTokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberCanMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizeClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"}],\"name\":\"prove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raffleWinner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"winningTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readAllEntries\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"EntryNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryTime\",\"type\":\"uint256\"}],\"internalType\":\"struct BunyRaffleNft.Entry[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"seed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setApprovedMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerSelected\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winningNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"returns the number of minted tokens within the edition\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"numberCanMint()\":{\"notice\":\"Returns the number of editions allowed to mint (max_uint256 when open edition)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BunyRaffleNft.sol\":\"BunyRaffleNft\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\\\";\\n\",\"keccak256\":\"0x9a8e2a400966f5e21b7dc105bb7236e5dc986c93b5fc18eafdae08a96e803cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x5331c8909221d9f9f3851cfadd5959d0873413a2c27e30e0f2fa234158c1c6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x56035505d62f05f5e5040532b749ab25237f6dd87c7a514614acda96af996751\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/BunyRaffleNft.sol\":{\"content\":\"//bunyNFt\\r\\n\\r\\n// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport { ERC721Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\r\\nimport {ERC721EnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\r\\nimport {  IERC721EnumerableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC721EnumerableUpgradeable.sol\\\";\\r\\nimport {  IERC721Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\r\\n\\r\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport { CountersUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\r\\nimport { AddressUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\nimport { SharedNFTLogic } from \\\"./SharedNFTLogic.sol\\\";\\r\\nimport { IEditionSingleMintable } from \\\"./IEditionSingleMintable.sol\\\";\\r\\nimport \\\"./SlothVDF.sol\\\";\\r\\n\\r\\ncontract BunyRaffleNft is ERC721Upgradeable, IEditionSingleMintable,  OwnableUpgradeable {\\r\\n  using CountersUpgradeable for CountersUpgradeable.Counter;\\r\\n  SharedNFTLogic private immutable sharedNFTLogic;\\r\\n  CountersUpgradeable.Counter private atEditionId;\\r\\n  event Rafflestarted(address minter, uint256 startTime);\\r\\n  event Editionsold(uint256 price, address owner, uint256 EntryCount, uint256 entryTime);\\r\\n  event WinnerPicked(address winner, uint256 winningNumber, uint256 prize);\\r\\n  string public description;\\r\\n  string public animationUrl;\\r\\n  string public imageUrl;\\r\\n  uint256 public editionSize;\\r\\n  uint256 public salePrice;\\r\\n  uint256 public minPlayers;\\r\\n  uint256 public maxTokens;\\r\\n  bool public active = false;\\r\\n  bool public winnerSelected = false;\\r\\n  bool public isComplete = false;\\r\\n  bool public isProof = false;\\r\\n  bool public prizeClaimed = false;\\r\\n  uint256 public startTime;\\r\\n  uint256 public endTime;\\r\\n  uint256 public EntryCount = 0;\\r\\n  uint256 public prime = 0;\\r\\n  uint256 public iterations = 0;\\r\\n  uint256 private nonce = 0;\\r\\n  uint256 public randomNumber = 0;\\r\\n  uint256 public winningNumber = 0;\\r\\n  address payable public Winner;\\r\\n  address payable public bunyBank;\\r\\n  Entry[] private entry;\\r\\n  RaffleWinner[] public raffleWinner;\\r\\n \\tuint256[] public nftTokenIds;\\r\\n  mapping(address => bool) public mintedTokens;\\r\\n  mapping(address => bool) public allowedMinters;\\r\\n  mapping(address => uint256) public seed;\\r\\n  mapping(address => bool) public isPlayer;\\r\\n\\r\\n\\r\\n  struct Entry {\\r\\n    address player;\\r\\n    uint256 EntryNumber;\\r\\n    uint256 entryTime;\\r\\n  }\\r\\n\\r\\n  struct RaffleWinner {\\r\\n    address payable winner;\\r\\n    uint256 winningTokenId;\\r\\n  }\\r\\n\\r\\n\\r\\n\\r\\n  constructor( SharedNFTLogic _sharedNFTLogic)  {\\r\\n    sharedNFTLogic = _sharedNFTLogic;\\r\\n      \\r\\n       }\\r\\n\\r\\n  function initialize(\\r\\n    address _owner,\\r\\n    string memory _name,\\r\\n    string memory _symbol,\\r\\n    string memory _description,\\r\\n    //string memory _animationUrl,\\r\\n    string memory _imageUrl,\\r\\n    uint256 _editionSize,\\r\\n    uint256 _salePrice,\\r\\n    uint256 _minPlayers,\\r\\n    address payable _bunyBank,\\r\\n    uint256 _maxTokens,\\r\\n    uint256 _prime,\\r\\n    uint256 _iterations\\r\\n\\r\\n  ) public initializer {\\r\\n    __ERC721_init(_name, _symbol);\\r\\n    __Ownable_init();\\r\\n    // Set ownership to original sender of contract call\\r\\n    transferOwnership(_owner);\\r\\n    description = _description;\\r\\n    //animationUrl = _animationUrl;\\r\\n    imageUrl = _imageUrl;\\r\\n    editionSize = _editionSize;\\r\\n    salePrice = _salePrice;\\r\\n    minPlayers = _minPlayers;\\r\\n    bunyBank = _bunyBank;\\r\\n    maxTokens = _maxTokens;\\r\\n    prime = _prime;\\r\\n    iterations = _iterations;\\r\\n    atEditionId.increment();\\r\\n  }\\r\\n\\r\\n  /// @dev returns the number of minted tokens within the edition\\r\\n   function totalSupply() public view returns (uint256) {\\r\\n     return atEditionId.current() - 1;\\r\\n    }\\r\\n\\r\\n     \\r\\n // return balance in wei\\r\\n    function getBalance() public view returns(uint){\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    // return prize balance\\r\\n     function getPrize() external view returns (uint256) {\\r\\n        uint256 balance = address(this).balance;\\r\\n        return balance * 9 / 10; //90%\\r\\n    }\\r\\n\\r\\n\\r\\n  function purchase() external payable returns (uint256) {\\r\\n    require(balanceOf(msg.sender) < maxTokens, \\\"You have reached the maximum tokens allowed per address\\\");\\r\\n    require(active, \\\"Raffle has not started. Owner must setApprovedMinter\\\");\\r\\n    require(msg.value == salePrice, \\\"No soup for you!\\\");\\r\\n    address[] memory toMint = new address[](1);\\r\\n    toMint[0] = msg.sender;\\r\\n    mintedTokens[msg.sender] = true;\\r\\n    nonce ++;\\r\\n    createSeed();\\r\\n    EntryCount ++;\\r\\n    isPlayer[msg.sender] = true;\\r\\n    nftTokenIds.push(EntryCount);\\r\\n    uint256 entryTime = block.timestamp;\\r\\n    Entry memory x = Entry(msg.sender, EntryCount, entryTime);\\r\\n    entry.push(x);\\r\\n      if (EntryCount == editionSize) {\\r\\n            isComplete = true;\\r\\n            active = false;\\r\\n        }\\r\\n    emit Editionsold(salePrice, msg.sender, EntryCount, entryTime);\\r\\n    return _mintEditions(toMint);\\r\\n  }\\r\\n\\r\\n\\r\\n    function createSeed() internal returns(uint256) {\\r\\n      nonce ++;\\r\\n      seed[msg.sender] = uint256(keccak256(abi.encodePacked(msg.sender, EntryCount, block.timestamp, blockhash(block.number - 1))));            \\r\\n      \\r\\n    }\\r\\n \\r\\n    function prove(uint256 proof) external  {\\r\\n      nonce ++;\\r\\n   // see if the proof is valid for the seed associated with the address\\r\\n      require(SlothVDF.verify(proof, seed[msg.sender], prime, iterations), \\\"Invalid proof\\\");\\r\\n   // use the proof as a provable random number\\r\\n          randomNumber = proof;\\r\\n            if (randomNumber > 0) {\\r\\n           isProof = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\nfunction getOwner(uint _id) public view returns (address) {\\r\\n    return ownerOf(_id);\\r\\n  }\\r\\n\\r\\n\\r\\nfunction pickWinner() public returns (uint256) {\\r\\n  require(randomNumber > 0, \\\"Generate provable random number first\\\");\\r\\n  require(isPlayer[msg.sender], \\\"User is not a active player. Only a registered ticket holder can start drawing\\\");\\r\\n  nonce ++;\\r\\n  winningNumber = uint256(keccak256(abi.encodePacked(block.number, randomNumber, blockhash(block.number - 1)))) % totalSupply();\\r\\n  address winner = getOwner(winningNumber);\\r\\n  uint256 prize = address(this).balance * 90 / 100;\\r\\n  Winner = payable(winner);\\r\\n  emit WinnerPicked(Winner, winningNumber, prize);\\r\\n  winnerSelected = true;\\r\\n  active = false;\\r\\n  RaffleWinner memory x = RaffleWinner(Winner, winningNumber);\\r\\n  raffleWinner.push(x);\\r\\n  Winner.transfer(prize);\\r\\n  withdrawBuny();\\r\\n  endTime = block.timestamp;\\r\\n  return winningNumber;\\r\\n}\\r\\n\\r\\n//failsafe?\\r\\n    function claimPrize(uint256 _winningNumber) public {\\r\\n    address payable tokenOwner = payable(ownerOf(_winningNumber));\\r\\n    require(msg.sender == tokenOwner, \\\"Only the owner of this token can withdraw the balance\\\");\\r\\n    require(winnerSelected, \\\"The contract has no balance to withdraw\\\");\\r\\n    uint256 balance = address(this).balance * 90/100;\\r\\n    (bool success, ) = tokenOwner.call{value: balance}(\\\"\\\");\\r\\n    prizeClaimed = true;\\r\\n    withdrawBuny();\\r\\n    require(success, \\\"Withdrawal failed\\\");\\r\\n  }\\r\\n\\r\\n\\r\\n  function _isAllowedToMint() internal view returns (bool) {\\r\\n    if (owner() == msg.sender) {\\r\\n      return true;\\r\\n    }\\r\\n    if (allowedMinters[address(0x0)]) {\\r\\n      return true;\\r\\n    }\\r\\n    return allowedMinters[msg.sender];\\r\\n  }\\r\\n\\r\\n  function mintEdition(address to) external override returns (uint256) {\\r\\n    require(_isAllowedToMint(), \\\"Needs to be an allowed minter\\\");\\r\\n    address[] memory toMint = new address[](1);\\r\\n    toMint[0] = to;\\r\\n    return _mintEditions(toMint);\\r\\n  }\\r\\n\\r\\n  function mintEditions(address[] memory recipients) external override returns (uint256) {\\r\\n    require(_isAllowedToMint(), \\\"Needs to be an allowed minter\\\");\\r\\n    return _mintEditions(recipients);\\r\\n  }\\r\\n\\r\\n  function owner() public view override(OwnableUpgradeable, IEditionSingleMintable) returns (address) {\\r\\n    return super.owner();\\r\\n  }\\r\\n\\r\\n  // helper function starts raffle once setApprovedMinter. \\r\\n  function enableRaffle() public onlyOwner {\\r\\n      active = true;\\r\\n    }\\r\\n\\r\\n    \\r\\n     function readAllEntries() public view  returns (Entry[] memory) {\\r\\n    Entry[] memory result = new Entry[](EntryCount);\\r\\n    for (uint256 i = 0; i < EntryCount; i++) {\\r\\n      result[i] = entry[i];\\r\\n    }\\r\\n    return result;\\r\\n  }\\r\\n  \\r\\n  // set contract address as Approved minter\\r\\n  // set active state to false\\r\\n  // log and emit current time\\r\\n  function setApprovedMinter(address minter, bool allowed) public onlyOwner {\\r\\n    allowedMinters[minter] = allowed;\\r\\n    enableRaffle();\\r\\n    startTime = block.timestamp;\\r\\n    emit Rafflestarted(minter, startTime);\\r\\n  }\\r\\n\\r\\n  \\r\\n\\r\\n\\r\\n  /// Returns the number of editions allowed to mint (max_uint256 when open edition)\\r\\n  function numberCanMint() public view override returns (uint256) {\\r\\n    // Return max int if open edition\\r\\n    if (editionSize == 0) {\\r\\n      return type(uint256).max;\\r\\n    }\\r\\n    // atEditionId is one-indexed hence the need to remove one here\\r\\n    return editionSize + 1 - atEditionId.current();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n      @dev Private function to mint als without any access checks.\\r\\n           Called by the public edition minting functions.\\r\\n     */\\r\\n  function _mintEditions(address[] memory recipients) internal returns (uint256) {\\r\\n    uint256 startAt = atEditionId.current();\\r\\n    uint256 endAt = startAt + recipients.length - 1;\\r\\n    require(editionSize == 0 || endAt <= editionSize, \\\"Sold out\\\");\\r\\n    while (atEditionId.current() <= endAt) {\\r\\n      _mint(recipients[atEditionId.current() - startAt], atEditionId.current());\\r\\n      atEditionId.increment();\\r\\n    }\\r\\n    return atEditionId.current();\\r\\n  }\\r\\n\\r\\n \\r\\n   \\r\\n    function withdrawBuny() internal {\\r\\n        uint256 amount = address(this).balance * 10 / 100;\\r\\n        require(isComplete, \\\"Raffle sale must be complete before withdraw function is enabled\\\");\\r\\n        require(amount > 0, \\\"Contract A has no balance to withdraw\\\");\\r\\n\\r\\n        bunyBank.transfer(amount);\\r\\n    }\\r\\n\\r\\n\\r\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\r\\n    require(_exists(tokenId), \\\"No token\\\");\\r\\n\\r\\n    return sharedNFTLogic.createMetadataEdition(name(), description, imageUrl, animationUrl, tokenId, editionSize);\\r\\n  }\\r\\n\\r\\n\\r\\n     function supportsInterface(\\r\\n        bytes4 interfaceId\\r\\n    ) public view virtual override( ERC721Upgradeable) returns (bool) {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x04b0298980f2a626218119697d3587a5d3df9dddd7d6d62dedf43a9df87b6734\",\"license\":\"GPL-3.0\"},\"contracts/IEditionSingleMintable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\ninterface IEditionSingleMintable {\\n  function mintEdition(address to) external returns (uint256);\\n\\n  function mintEditions(address[] memory to) external returns (uint256);\\n\\n  function numberCanMint() external view returns (uint256);\\n\\n  function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc90163949d024e5903bdf06e40cb6689ab30551e42dc771dcd46c8537cf04b80\",\"license\":\"GPL-3.0\"},\"contracts/IPublicSharedMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\n/// Shared public library for on-chain NFT functions\\ninterface IPublicSharedMetadata {\\n  /// @param unencoded bytes to base64-encode\\n  function base64Encode(bytes memory unencoded) external pure returns (string memory);\\n\\n  /// Encodes the argument json bytes into base64-data uri format\\n  /// @param json Raw json to base64 and turn into a data-uri\\n  function encodeMetadataJSON(bytes memory json) external pure returns (string memory);\\n\\n  /// Proxy to openzeppelin's toString function\\n  /// @param value number to return as a string\\n  function numberToString(uint256 value) external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0xaf1cbbb34e11975b02303c04d71796c8528341743fb9ba9f22f78d628d911caf\",\"license\":\"GPL-3.0\"},\"contracts/SharedNFTLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport { StringsUpgradeable } from '@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol';\\nimport { Base64 } from 'base64-sol/base64.sol';\\nimport { IPublicSharedMetadata } from './IPublicSharedMetadata.sol';\\n\\n/// Shared NFT logic for rendering metadata associated with editions\\n/// @dev Can safely be used for generic base64Encode and numberToString functions\\ncontract SharedNFTLogic is IPublicSharedMetadata {\\n  /// @param unencoded bytes to base64-encode\\n  function base64Encode(bytes memory unencoded) public pure override returns (string memory) {\\n    return Base64.encode(unencoded);\\n  }\\n\\n  /// Proxy to openzeppelin's toString function\\n  /// @param value number to return as a string\\n  function numberToString(uint256 value) public pure override returns (string memory) {\\n    return StringsUpgradeable.toString(value);\\n  }\\n\\n  /// Generate edition metadata from storage information as base64-json blob\\n  /// Combines the media data and metadata\\n  /// @param name Name of NFT in metadata\\n  /// @param description Description of NFT in metadata\\n  /// @param imageUrl URL of image to render for edition\\n  /// @param animationUrl URL of animation to render for edition\\n  /// @param tokenOfEdition Token ID for specific token\\n  /// @param editionSize Size of entire edition to show\\n  function createMetadataEdition(\\n    string memory name,\\n    string memory description,\\n    string memory imageUrl,\\n    string memory animationUrl,\\n    uint256 tokenOfEdition,\\n    uint256 editionSize\\n  ) external pure returns (string memory) {\\n    string memory _tokenMediaData = tokenMediaData(imageUrl, animationUrl, tokenOfEdition);\\n    bytes memory json = createMetadataJSON(name, description, _tokenMediaData, tokenOfEdition, editionSize);\\n    return encodeMetadataJSON(json);\\n  }\\n\\n  /// Function to create the metadata json string for the nft edition\\n  /// @param name Name of NFT in metadata\\n  /// @param description Description of NFT in metadata\\n  /// @param mediaData Data for media to include in json object\\n  /// @param tokenOfEdition Token ID for specific token\\n  /// @param editionSize Size of entire edition to show\\n  function createMetadataJSON(\\n    string memory name,\\n    string memory description,\\n    string memory mediaData,\\n    uint256 tokenOfEdition,\\n    uint256 editionSize\\n  ) public pure returns (bytes memory) {\\n    bytes memory editionSizeText;\\n    if (editionSize > 0) {\\n      editionSizeText = abi.encodePacked('/', numberToString(editionSize));\\n    }\\n    return\\n      abi.encodePacked(\\n        '{\\\"name\\\": \\\"',\\n        name,\\n        ' ',\\n        numberToString(tokenOfEdition),\\n        editionSizeText,\\n        '\\\", \\\"',\\n        'description\\\": \\\"',\\n        description,\\n        '\\\", \\\"',\\n        mediaData,\\n        'properties\\\": {\\\"number\\\": ',\\n        numberToString(tokenOfEdition),\\n        ', \\\"name\\\": \\\"',\\n        name,\\n        '\\\"}}'\\n      );\\n  }\\n\\n  /// Encodes the argument json bytes into base64-data uri format\\n  /// @param json Raw json to base64 and turn into a data-uri\\n  function encodeMetadataJSON(bytes memory json) public pure override returns (string memory) {\\n    return string(abi.encodePacked('data:application/json;base64,', base64Encode(json)));\\n  }\\n\\n  /// Generates edition metadata from storage information as base64-json blob\\n  /// Combines the media data and metadata\\n  /// @param imageUrl URL of image to render for edition\\n  /// @param animationUrl URL of animation to render for edition\\n  function tokenMediaData(string memory imageUrl, string memory animationUrl, uint256 tokenOfEdition) public pure returns (string memory) {\\n    bool hasImage = bytes(imageUrl).length > 0;\\n    bool hasAnimation = bytes(animationUrl).length > 0;\\n    if (hasImage && hasAnimation) {\\n      return\\n        string(\\n          abi.encodePacked(\\n            'image\\\": \\\"',\\n            imageUrl,\\n            '?id=',\\n            numberToString(tokenOfEdition),\\n            '\\\", \\\"animation_url\\\": \\\"',\\n            animationUrl,\\n            '?id=',\\n            numberToString(tokenOfEdition),\\n            '\\\", \\\"'\\n          )\\n        );\\n    }\\n    if (hasImage) {\\n      return string(abi.encodePacked('image\\\": \\\"', imageUrl, '?id=', numberToString(tokenOfEdition), '\\\", \\\"'));\\n    }\\n    if (hasAnimation) {\\n      return string(abi.encodePacked('animation_url\\\": \\\"', animationUrl, '?id=', numberToString(tokenOfEdition), '\\\", \\\"'));\\n    }\\n\\n    return '';\\n  }\\n}\\n\",\"keccak256\":\"0x986935a51bd9bfc02371248ed0d59a1a1150ccd113a912626ae6c7c1ebe3f043\",\"license\":\"GPL-3.0\"},\"contracts/SlothVDF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// https://eprint.iacr.org/2015/366.pdf\\r\\n \\r\\npragma solidity ^0.8.11;\\r\\n \\r\\nlibrary SlothVDF {\\r\\n \\r\\n    /// @dev pow(base, exponent, modulus)\\r\\n    /// @param base base\\r\\n    /// @param exponent exponent\\r\\n    /// @param modulus modulus\\r\\n    function bexmod(\\r\\n        uint256 base,\\r\\n        uint256 exponent,\\r\\n        uint256 modulus\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 _result = 1;\\r\\n        uint256 _base = base;\\r\\n        for (; exponent > 0; exponent >>= 1) {\\r\\n            if (exponent & 1 == 1) {\\r\\n                _result = mulmod(_result, _base, modulus);\\r\\n            }\\r\\n \\r\\n            _base = mulmod(_base, _base, modulus);\\r\\n        }\\r\\n        return _result;\\r\\n    }\\r\\n \\r\\n    /// @dev compute sloth starting from seed, over prime, for iterations\\r\\n    /// @param _seed seed\\r\\n    /// @param _prime prime\\r\\n    /// @param _iterations number of iterations\\r\\n    /// @return sloth result\\r\\n    function compute(\\r\\n        uint256 _seed,\\r\\n        uint256 _prime,\\r\\n        uint256 _iterations\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 _exponent = (_prime + 1) >> 2;\\r\\n        _seed %= _prime;\\r\\n        for (uint256 i; i < _iterations; ++i) {\\r\\n            _seed = bexmod(_seed, _exponent, _prime);\\r\\n        }\\r\\n        return _seed;\\r\\n    }\\r\\n     \\r\\n    /// @dev verify sloth result proof, starting from seed, over prime, for iterations\\r\\n    /// @param _proof result\\r\\n    /// @param _seed seed\\r\\n    /// @param _prime prime\\r\\n    /// @param _iterations number of iterations\\r\\n    /// @return true if y is a quadratic residue modulo p\\r\\n    function verify(\\r\\n        uint256 _proof,\\r\\n        uint256 _seed,\\r\\n        uint256 _prime,\\r\\n        uint256 _iterations\\r\\n    ) internal pure returns (bool) {\\r\\n        for (uint256 i; i < _iterations; ++i) {\\r\\n            _proof = mulmod(_proof, _proof, _prime);\\r\\n        }\\r\\n        _seed %= _prime;\\r\\n        if (_seed == _proof) return true;\\r\\n        if (_prime - _seed == _proof) return true;\\r\\n        return false;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x1340874467ab5f225efbbdcc4ebd16c08d9cc3d7dad579a82b7ebbbb0f2ff5ce\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405260d1805464ffffffffff19169055600060d481905560d581905560d681905560d781905560d881905560d9553480156200003d57600080fd5b506040516200341738038062003417833981016040819052620000609162000072565b6001600160a01b0316608052620000a4565b6000602082840312156200008557600080fd5b81516001600160a01b03811681146200009d57600080fd5b9392505050565b608051613357620000c06000396000611ac301526133576000f3fe6080604052600436106103815760003560e01c806370a08231116101d1578063b2fa1c9e11610102578063d1b84c19116100a0578063f18aceda1161006f578063f18aceda146109f2578063f2fde38b14610a07578063f4ed0f4614610a27578063f51f96dd14610a3d57600080fd5b8063d1b84c191461097b578063d70981541461099c578063e8315742146109bc578063e985e9c5146109d257600080fd5b8063c41a360a116100dc578063c41a360a1461090f578063c7ee005e1461092f578063c87b56dd14610945578063ccbac9f51461096557600080fd5b8063b2fa1c9e146108ba578063b88d4fde146108da578063c34f6b0d146108fa57600080fd5b80639042bbf31161016f578063a22cb46511610149578063a22cb46514610845578063a66ff0af14610865578063aba8315014610885578063b2b98ed21461089a57600080fd5b80639042bbf3146107f857806395d89b411461081a578063a1ea842f1461082f57600080fd5b80637284e416116101ab5780637284e4161461079957806378e97925146107ae5780638d382812146107c45780638da5cb5b146107e357600080fd5b806370a0823114610734578063715018a6146107545780637241dfa01461076957600080fd5b806323b872dd116102b65780634358d2be116102545780635dfd7a57116102235780635dfd7a57146106ad5780636352211e146106cd57806364c19175146106ed57806364edfbf01461072c57600080fd5b80634358d2be1461064a5780634664611e1461066057806348ed4535146106765780635d495aea1461069857600080fd5b80633197cbb6116102905780633197cbb6146105cf578063397b5b24146105e5578063423afa66146105fa57806342842e0e1461062a57600080fd5b806323b872dd146105795780632770c8951461059957806329ec16dd146105af57600080fd5b806309d94448116103235780630f6a9349116102fd5780630f6a93491461051157806312065fe01461053157806318160ddd1461054457806322d544a31461055957600080fd5b806309d94448146104bc5780630b65b6e7146104dc5780630e2cbc3d146104f157600080fd5b806306fdde031161035f57806306fdde0314610410578063081812fc14610432578063095ea7b31461046a57806309c95e101461048c57600080fd5b806301ffc9a71461038657806302fb0c5e146103bb578063063c67b7146103d5575b600080fd5b34801561039257600080fd5b506103a66103a1366004612940565b610a53565b60405190151581526020015b60405180910390f35b3480156103c757600080fd5b5060d1546103a69060ff1681565b3480156103e157600080fd5b506104026103f0366004612982565b60e16020526000908152604090205481565b6040519081526020016103b2565b34801561041c57600080fd5b50610425610a64565b6040516103b291906129ef565b34801561043e57600080fd5b5061045261044d366004612a02565b610af6565b6040516001600160a01b0390911681526020016103b2565b34801561047657600080fd5b5061048a610485366004612a1b565b610b1d565b005b34801561049857600080fd5b506103a66104a7366004612982565b60e26020526000908152604090205460ff1681565b3480156104c857600080fd5b5060db54610452906001600160a01b031681565b3480156104e857600080fd5b50610402610c37565b3480156104fd57600080fd5b5061048a61050c366004612b14565b610c6a565b34801561051d57600080fd5b5061040261052c366004612c3a565b610df6565b34801561053d57600080fd5b5047610402565b34801561055057600080fd5b50610402610e55565b34801561056557600080fd5b50610402610574366004612a02565b610e62565b34801561058557600080fd5b5061048a610594366004612cec565b610e83565b3480156105a557600080fd5b5061040260cf5481565b3480156105bb57600080fd5b5061048a6105ca366004612d2d565b610eb4565b3480156105db57600080fd5b5061040260d35481565b3480156105f157600080fd5b50610425610f35565b34801561060657600080fd5b506103a6610615366004612982565b60e06020526000908152604090205460ff1681565b34801561063657600080fd5b5061048a610645366004612cec565b610fc3565b34801561065657600080fd5b5061040260d65481565b34801561066c57600080fd5b5061040260d95481565b34801561068257600080fd5b5061068b610fde565b6040516103b29190612d6b565b3480156106a457600080fd5b506104026110f9565b3480156106b957600080fd5b5061048a6106c8366004612a02565b6113e6565b3480156106d957600080fd5b506104526106e8366004612a02565b61147c565b3480156106f957600080fd5b5061070d610708366004612a02565b6114dc565b604080516001600160a01b0390931683526020830191909152016103b2565b610402611514565b34801561074057600080fd5b5061040261074f366004612982565b61186a565b34801561076057600080fd5b5061048a6118f0565b34801561077557600080fd5b506103a6610784366004612982565b60df6020526000908152604090205460ff1681565b3480156107a557600080fd5b50610425611904565b3480156107ba57600080fd5b5061040260d25481565b3480156107d057600080fd5b5060d1546103a690610100900460ff1681565b3480156107ef57600080fd5b50610452611911565b34801561080457600080fd5b5060d1546103a690640100000000900460ff1681565b34801561082657600080fd5b50610425611925565b34801561083b57600080fd5b5061040260d45481565b34801561085157600080fd5b5061048a610860366004612d2d565b611934565b34801561087157600080fd5b50610402610880366004612982565b611943565b34801561089157600080fd5b506104256119ff565b3480156108a657600080fd5b5060da54610452906001600160a01b031681565b3480156108c657600080fd5b5060d1546103a69062010000900460ff1681565b3480156108e657600080fd5b5061048a6108f5366004612dcd565b611a0c565b34801561090657600080fd5b50610402611a44565b34801561091b57600080fd5b5061045261092a366004612a02565b611a64565b34801561093b57600080fd5b5061040260d55481565b34801561095157600080fd5b50610425610960366004612a02565b611a6f565b34801561097157600080fd5b5061040260d85481565b34801561098757600080fd5b5060d1546103a6906301000000900460ff1681565b3480156109a857600080fd5b5061048a6109b7366004612a02565b611b68565b3480156109c857600080fd5b5061040260d05481565b3480156109de57600080fd5b506103a66109ed366004612e4d565b611d21565b3480156109fe57600080fd5b5061048a611d4f565b348015610a1357600080fd5b5061048a610a22366004612982565b611d66565b348015610a3357600080fd5b5061040260cd5481565b348015610a4957600080fd5b5061040260ce5481565b6000610a5e82611ddc565b92915050565b606060658054610a7390612e7b565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9f90612e7b565b8015610aec5780601f10610ac157610100808354040283529160200191610aec565b820191906000526020600020905b815481529060010190602001808311610acf57829003601f168201915b5050505050905090565b6000610b0182611e2c565b506000908152606960205260409020546001600160a01b031690565b6000610b288261147c565b9050806001600160a01b0316836001600160a01b031603610b9a5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610bb65750610bb68133611d21565b610c285760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610b91565b610c328383611e8b565b505050565b600060cd54600003610c4a575060001990565b60c95460cd54610c5b906001612ec5565b610c659190612ed8565b905090565b600054610100900460ff1615808015610c8a5750600054600160ff909116105b80610ca45750303b158015610ca4575060005460ff166001145b610d075760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b91565b6000805460ff191660011790558015610d2a576000805461ff0019166101001790555b610d348c8c611ef9565b610d3c611f2a565b610d458d611d66565b60ca610d518b82612f39565b5060cc610d5e8a82612f39565b5060cd88905560ce87905560cf86905560db80546001600160a01b0319166001600160a01b03871617905560d084905560d583905560d682905560c9805460010190558015610de7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050505050565b6000610e00611f59565b610e4c5760405162461bcd60e51b815260206004820152601d60248201527f4e6565647320746f20626520616e20616c6c6f776564206d696e7465720000006044820152606401610b91565b610a5e82611fc8565b60006001610c5b60c95490565b60de8181548110610e7257600080fd5b600091825260209091200154905081565b610e8d33826120a9565b610ea95760405162461bcd60e51b8152600401610b9190612ff9565b610c32838383612107565b610ebc6122a3565b6001600160a01b038216600090815260e060205260409020805460ff1916821515179055610ee8611d4f565b4260d2819055604080516001600160a01b038516815260208101929092527f7618c8e7673fd316d308182b29784aad6b915e32612c6b9d67f50ef4e1b7d6e4910160405180910390a15050565b60cb8054610f4290612e7b565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6e90612e7b565b8015610fbb5780601f10610f9057610100808354040283529160200191610fbb565b820191906000526020600020905b815481529060010190602001808311610f9e57829003601f168201915b505050505081565b610c3283838360405180602001604052806000815250611a0c565b6060600060d45467ffffffffffffffff811115610ffd57610ffd612a47565b60405190808252806020026020018201604052801561105b57816020015b611048604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b81526020019060019003908161101b5790505b50905060005b60d4548110156110f35760dc818154811061107e5761107e613047565b600091825260209182902060408051606081018252600390930290910180546001600160a01b031683526001810154938301939093526002909201549181019190915282518390839081106110d5576110d5613047565b602002602001018190525080806110eb9061305d565b915050611061565b50919050565b60008060d8541161115a5760405162461bcd60e51b815260206004820152602560248201527f47656e65726174652070726f7661626c652072616e646f6d206e756d62657220604482015264199a5c9cdd60da1b6064820152608401610b91565b33600090815260e2602052604090205460ff166111f65760405162461bcd60e51b815260206004820152604e60248201527f55736572206973206e6f7420612061637469766520706c617965722e204f6e6c60448201527f7920612072656769737465726564207469636b657420686f6c6465722063616e60648201526d2073746172742064726177696e6760901b608482015260a401610b91565b60d780549060006112068361305d565b9190505550611213610e55565b60d8544390611223600183612ed8565b6040805160208101949094528301919091524060608201526080016040516020818303038152906040528051906020012060001c611261919061308c565b60d981905560009061127290611a64565b90506000606461128347605a6130a0565b61128d91906130bf565b60da80546001600160a01b0319166001600160a01b03851690811790915560d95460408051928352602083019190915281018290529091507f7e57d825a2478cc8123a008d7d1e20c0f6e8cbca89a7bc100c9b05ecb3698deb9060600160405180910390a160d1805461ffff191661010017905560408051808201825260da80546001600160a01b03908116835260d9546020840190815260dd80546001810182556000918252855160029091027fac507b9f8bf86ad8bb770f71cd2b1992902ae0314d93fc0f2bb011d70e796226810180549286166001600160a01b03199093169290921790915591517fac507b9f8bf86ad8bb770f71cd2b1992902ae0314d93fc0f2bb011d70e79622790920191909155915493519293169184156108fc0291859190818181858888f193505050501580156113cf573d6000803e3d6000fd5b506113d8612302565b50504260d355505060d95490565b60d780549060006113f68361305d565b909155505033600090815260e1602052604090205460d55460d65461141e9284929091612436565b61145a5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b6044820152606401610b91565b60d881905580156114795760d1805463ff000000191663010000001790555b50565b6000818152606760205260408120546001600160a01b031680610a5e5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610b91565b60dd81815481106114ec57600080fd5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b600060d0546115223361186a565b106115955760405162461bcd60e51b815260206004820152603760248201527f596f752068617665207265616368656420746865206d6178696d756d20746f6b60448201527f656e7320616c6c6f7765642070657220616464726573730000000000000000006064820152608401610b91565b60d15460ff166116045760405162461bcd60e51b815260206004820152603460248201527f526166666c6520686173206e6f7420737461727465642e204f776e6572206d7560448201527339ba1039b2ba20b8383937bb32b226b4b73a32b960611b6064820152608401610b91565b60ce5434146116485760405162461bcd60e51b815260206004820152601060248201526f4e6f20736f757020666f7220796f752160801b6044820152606401610b91565b60408051600180825281830190925260009160208083019080368337019050509050338160008151811061167e5761167e613047565b6001600160a01b0390921660209283029190910182015233600090815260df90915260408120805460ff1916600117905560d78054916116bd8361305d565b91905055506116ca6124a4565b5060d480549060006116db8361305d565b909155505033600081815260e2602090815260408083208054600160ff19909116811790915560d4805460de80548085019091557ffae8130c0619f84b4b44f01b84806f04e82e536d70e05f2356977fa318aecc1a0181905583516060810185529687529386019384524292860183815260dc8054938401815590955285517f3162b0988d4210bff484413ed451d170a03887272177efc0b7d000f10abe9edf600390930292830180546001600160a01b0319166001600160a01b0390921691909117905592517f3162b0988d4210bff484413ed451d170a03887272177efc0b7d000f10abe9ee082015592517f3162b0988d4210bff484413ed451d170a03887272177efc0b7d000f10abe9ee19093019290925560cd5490549192910361180f5760d1805462ff00ff1916620100001790555b60ce5460d45460408051928352336020840152820152606081018390527f5c05e149773613d59c93e2584c4cbc9ca960d58add53b646b126f27a345eaeab9060800160405180910390a161186283611fc8565b935050505090565b60006001600160a01b0382166118d45760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610b91565b506001600160a01b031660009081526068602052604090205490565b6118f86122a3565b6119026000612527565b565b60ca8054610f4290612e7b565b6000610c656097546001600160a01b031690565b606060668054610a7390612e7b565b61193f338383612579565b5050565b600061194d611f59565b6119995760405162461bcd60e51b815260206004820152601d60248201527f4e6565647320746f20626520616e20616c6c6f776564206d696e7465720000006044820152606401610b91565b6040805160018082528183019092526000916020808301908036833701905050905082816000815181106119cf576119cf613047565b60200260200101906001600160a01b031690816001600160a01b0316815250506119f881611fc8565b9392505050565b60cc8054610f4290612e7b565b611a1633836120a9565b611a325760405162461bcd60e51b8152600401610b9190612ff9565b611a3e84848484612647565b50505050565b600047600a611a548260096130a0565b611a5e91906130bf565b91505090565b6000610a5e8261147c565b6000818152606760205260409020546060906001600160a01b0316611ac15760405162461bcd60e51b81526020600482015260086024820152672737903a37b5b2b760c11b6044820152606401610b91565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663df30dba0611af8610a64565b60ca60cc60cb8760cd546040518763ffffffff1660e01b8152600401611b2396959493929190613150565b600060405180830381865afa158015611b40573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a5e91908101906131b3565b6000611b738261147c565b9050336001600160a01b03821614611beb5760405162461bcd60e51b815260206004820152603560248201527f4f6e6c7920746865206f776e6572206f66207468697320746f6b656e2063616e604482015274207769746864726177207468652062616c616e636560581b6064820152608401610b91565b60d154610100900460ff16611c525760405162461bcd60e51b815260206004820152602760248201527f54686520636f6e747261637420686173206e6f2062616c616e636520746f20776044820152666974686472617760c81b6064820152608401610b91565b60006064611c6147605a6130a0565b611c6b91906130bf565b90506000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611cba576040519150601f19603f3d011682016040523d82523d6000602084013e611cbf565b606091505b505060d1805464ff0000000019166401000000001790559050611ce0612302565b80611a3e5760405162461bcd60e51b815260206004820152601160248201527015da5d1a191c985dd85b0819985a5b1959607a1b6044820152606401610b91565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b611d576122a3565b60d1805460ff19166001179055565b611d6e6122a3565b6001600160a01b038116611dd35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b91565b61147981612527565b60006001600160e01b031982166380ac58cd60e01b1480611e0d57506001600160e01b03198216635b5e139f60e01b145b80610a5e57506301ffc9a760e01b6001600160e01b0319831614610a5e565b6000818152606760205260409020546001600160a01b03166114795760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610b91565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611ec08261147c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600054610100900460ff16611f205760405162461bcd60e51b8152600401610b919061322a565b61193f828261267a565b600054610100900460ff16611f515760405162461bcd60e51b8152600401610b919061322a565b6119026126ba565b600033611f64611911565b6001600160a01b031603611f785750600190565b6000805260e06020527f88c7c6e2e6608585cc594f384e2acdf8215a4a261b6a00df05fe03af932e95775460ff1615611fb15750600190565b5033600090815260e0602052604090205460ff1690565b600080611fd460c95490565b905060006001845183611fe79190612ec5565b611ff19190612ed8565b905060cd5460001480612006575060cd548111155b61203d5760405162461bcd60e51b815260206004820152600860248201526714dbdb19081bdd5d60c21b6044820152606401610b91565b8061204760c95490565b1161209d5761208a848361205a60c95490565b6120649190612ed8565b8151811061207457612074613047565b602002602001015161208560c95490565b6126ea565b61209860c980546001019055565b61203d565b60c9545b949350505050565b6000806120b58361147c565b9050806001600160a01b0316846001600160a01b031614806120dc57506120dc8185611d21565b806120a15750836001600160a01b03166120f584610af6565b6001600160a01b031614949350505050565b826001600160a01b031661211a8261147c565b6001600160a01b03161461217e5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610b91565b6001600160a01b0382166121e05760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610b91565b6121eb600082611e8b565b6001600160a01b0383166000908152606860205260408120805460019290612214908490612ed8565b90915550506001600160a01b0382166000908152606860205260408120805460019290612242908490612ec5565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b336122ac611911565b6001600160a01b0316146119025760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b91565b6000606461231147600a6130a0565b61231b91906130bf565b60d15490915062010000900460ff1661239e576040805162461bcd60e51b81526020600482015260248101919091527f526166666c652073616c65206d75737420626520636f6d706c6574652062656660448201527f6f72652077697468647261772066756e6374696f6e20697320656e61626c65646064820152608401610b91565b600081116123fc5760405162461bcd60e51b815260206004820152602560248201527f436f6e7472616374204120686173206e6f2062616c616e636520746f20776974604482015264686472617760d81b6064820152608401610b91565b60db546040516001600160a01b039091169082156108fc029083906000818181858888f1935050505015801561193f573d6000803e3d6000fd5b6000805b8281101561246557838061245057612450613076565b868709955061245e8161305d565b905061243a565b50612470838561308c565b9350848403612481575060016120a1565b8461248c8585612ed8565b03612499575060016120a1565b506000949350505050565b60d78054600091826124b58361305d565b909155505060d4543390426124cb600143612ed8565b60405160609490941b6bffffffffffffffffffffffff191660208501526034840192909252605483015240607482015260940160408051601f19818403018152918152815160209283012033600090815260e190935291205590565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036125da5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610b91565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612652848484612107565b61265e8484848461282c565b611a3e5760405162461bcd60e51b8152600401610b9190613275565b600054610100900460ff166126a15760405162461bcd60e51b8152600401610b919061322a565b60656126ad8382612f39565b506066610c328282612f39565b600054610100900460ff166126e15760405162461bcd60e51b8152600401610b919061322a565b61190233612527565b6001600160a01b0382166127405760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610b91565b6000818152606760205260409020546001600160a01b0316156127a55760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610b91565b6001600160a01b03821660009081526068602052604081208054600192906127ce908490612ec5565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b1561292257604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906128709033908990889088906004016132c7565b6020604051808303816000875af19250505080156128ab575060408051601f3d908101601f191682019092526128a891810190613304565b60015b612908573d8080156128d9576040519150601f19603f3d011682016040523d82523d6000602084013e6128de565b606091505b5080516000036129005760405162461bcd60e51b8152600401610b9190613275565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506120a1565b5060016120a1565b6001600160e01b03198116811461147957600080fd5b60006020828403121561295257600080fd5b81356119f88161292a565b6001600160a01b038116811461147957600080fd5b803561297d8161295d565b919050565b60006020828403121561299457600080fd5b81356119f88161295d565b60005b838110156129ba5781810151838201526020016129a2565b50506000910152565b600081518084526129db81602086016020860161299f565b601f01601f19169290920160200192915050565b6020815260006119f860208301846129c3565b600060208284031215612a1457600080fd5b5035919050565b60008060408385031215612a2e57600080fd5b8235612a398161295d565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612a8657612a86612a47565b604052919050565b600067ffffffffffffffff821115612aa857612aa8612a47565b50601f01601f191660200190565b6000612ac9612ac484612a8e565b612a5d565b9050828152838383011115612add57600080fd5b828260208301376000602084830101529392505050565b600082601f830112612b0557600080fd5b6119f883833560208501612ab6565b6000806000806000806000806000806000806101808d8f031215612b3757600080fd5b612b408d612972565b9b5067ffffffffffffffff60208e01351115612b5b57600080fd5b612b6b8e60208f01358f01612af4565b9a5067ffffffffffffffff60408e01351115612b8657600080fd5b612b968e60408f01358f01612af4565b995067ffffffffffffffff60608e01351115612bb157600080fd5b612bc18e60608f01358f01612af4565b985067ffffffffffffffff60808e01351115612bdc57600080fd5b612bec8e60808f01358f01612af4565b975060a08d0135965060c08d0135955060e08d01359450612c106101008e01612972565b93506101208d013592506101408d013591506101608d013590509295989b509295989b509295989b565b60006020808385031215612c4d57600080fd5b823567ffffffffffffffff80821115612c6557600080fd5b818501915085601f830112612c7957600080fd5b813581811115612c8b57612c8b612a47565b8060051b9150612c9c848301612a5d565b8181529183018401918481019088841115612cb657600080fd5b938501935b83851015612ce05784359250612cd08361295d565b8282529385019390850190612cbb565b98975050505050505050565b600080600060608486031215612d0157600080fd5b8335612d0c8161295d565b92506020840135612d1c8161295d565b929592945050506040919091013590565b60008060408385031215612d4057600080fd5b8235612d4b8161295d565b915060208301358015158114612d6057600080fd5b809150509250929050565b602080825282518282018190526000919060409081850190868401855b82811015612dc057815180516001600160a01b0316855286810151878601528501518585015260609093019290850190600101612d88565b5091979650505050505050565b60008060008060808587031215612de357600080fd5b8435612dee8161295d565b93506020850135612dfe8161295d565b925060408501359150606085013567ffffffffffffffff811115612e2157600080fd5b8501601f81018713612e3257600080fd5b612e4187823560208401612ab6565b91505092959194509250565b60008060408385031215612e6057600080fd5b8235612e6b8161295d565b91506020830135612d608161295d565b600181811c90821680612e8f57607f821691505b6020821081036110f357634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610a5e57610a5e612eaf565b81810381811115610a5e57610a5e612eaf565b601f821115610c3257600081815260208120601f850160051c81016020861015612f125750805b601f850160051c820191505b81811015612f3157828155600101612f1e565b505050505050565b815167ffffffffffffffff811115612f5357612f53612a47565b612f6781612f618454612e7b565b84612eeb565b602080601f831160018114612f9c5760008415612f845750858301515b600019600386901b1c1916600185901b178555612f31565b600085815260208120601f198616915b82811015612fcb57888601518255948401946001909101908401612fac565b5085821015612fe95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60006001820161306f5761306f612eaf565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261309b5761309b613076565b500690565b60008160001904831182151516156130ba576130ba612eaf565b500290565b6000826130ce576130ce613076565b500490565b600081546130e081612e7b565b8085526020600183811680156130fd576001811461311757613145565b60ff1985168884015283151560051b880183019550613145565b866000528260002060005b8581101561313d5781548a8201860152908301908401613122565b890184019650505b505050505092915050565b60c08152600061316360c08301896129c3565b828103602084015261317581896130d3565b9050828103604084015261318981886130d3565b9050828103606084015261319d81876130d3565b6080840195909552505060a00152949350505050565b6000602082840312156131c557600080fd5b815167ffffffffffffffff8111156131dc57600080fd5b8201601f810184136131ed57600080fd5b80516131fb612ac482612a8e565b81815285602083850101111561321057600080fd5b61322182602083016020860161299f565b95945050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906132fa908301846129c3565b9695505050505050565b60006020828403121561331657600080fd5b81516119f88161292a56fea2646970667358221220c46f099f3eb03c59fb82de756ada42a98f12236765be7da5db78895f7a75d1f764736f6c63430008100033",
  "deployedBytecode": "0x6080604052600436106103815760003560e01c806370a08231116101d1578063b2fa1c9e11610102578063d1b84c19116100a0578063f18aceda1161006f578063f18aceda146109f2578063f2fde38b14610a07578063f4ed0f4614610a27578063f51f96dd14610a3d57600080fd5b8063d1b84c191461097b578063d70981541461099c578063e8315742146109bc578063e985e9c5146109d257600080fd5b8063c41a360a116100dc578063c41a360a1461090f578063c7ee005e1461092f578063c87b56dd14610945578063ccbac9f51461096557600080fd5b8063b2fa1c9e146108ba578063b88d4fde146108da578063c34f6b0d146108fa57600080fd5b80639042bbf31161016f578063a22cb46511610149578063a22cb46514610845578063a66ff0af14610865578063aba8315014610885578063b2b98ed21461089a57600080fd5b80639042bbf3146107f857806395d89b411461081a578063a1ea842f1461082f57600080fd5b80637284e416116101ab5780637284e4161461079957806378e97925146107ae5780638d382812146107c45780638da5cb5b146107e357600080fd5b806370a0823114610734578063715018a6146107545780637241dfa01461076957600080fd5b806323b872dd116102b65780634358d2be116102545780635dfd7a57116102235780635dfd7a57146106ad5780636352211e146106cd57806364c19175146106ed57806364edfbf01461072c57600080fd5b80634358d2be1461064a5780634664611e1461066057806348ed4535146106765780635d495aea1461069857600080fd5b80633197cbb6116102905780633197cbb6146105cf578063397b5b24146105e5578063423afa66146105fa57806342842e0e1461062a57600080fd5b806323b872dd146105795780632770c8951461059957806329ec16dd146105af57600080fd5b806309d94448116103235780630f6a9349116102fd5780630f6a93491461051157806312065fe01461053157806318160ddd1461054457806322d544a31461055957600080fd5b806309d94448146104bc5780630b65b6e7146104dc5780630e2cbc3d146104f157600080fd5b806306fdde031161035f57806306fdde0314610410578063081812fc14610432578063095ea7b31461046a57806309c95e101461048c57600080fd5b806301ffc9a71461038657806302fb0c5e146103bb578063063c67b7146103d5575b600080fd5b34801561039257600080fd5b506103a66103a1366004612940565b610a53565b60405190151581526020015b60405180910390f35b3480156103c757600080fd5b5060d1546103a69060ff1681565b3480156103e157600080fd5b506104026103f0366004612982565b60e16020526000908152604090205481565b6040519081526020016103b2565b34801561041c57600080fd5b50610425610a64565b6040516103b291906129ef565b34801561043e57600080fd5b5061045261044d366004612a02565b610af6565b6040516001600160a01b0390911681526020016103b2565b34801561047657600080fd5b5061048a610485366004612a1b565b610b1d565b005b34801561049857600080fd5b506103a66104a7366004612982565b60e26020526000908152604090205460ff1681565b3480156104c857600080fd5b5060db54610452906001600160a01b031681565b3480156104e857600080fd5b50610402610c37565b3480156104fd57600080fd5b5061048a61050c366004612b14565b610c6a565b34801561051d57600080fd5b5061040261052c366004612c3a565b610df6565b34801561053d57600080fd5b5047610402565b34801561055057600080fd5b50610402610e55565b34801561056557600080fd5b50610402610574366004612a02565b610e62565b34801561058557600080fd5b5061048a610594366004612cec565b610e83565b3480156105a557600080fd5b5061040260cf5481565b3480156105bb57600080fd5b5061048a6105ca366004612d2d565b610eb4565b3480156105db57600080fd5b5061040260d35481565b3480156105f157600080fd5b50610425610f35565b34801561060657600080fd5b506103a6610615366004612982565b60e06020526000908152604090205460ff1681565b34801561063657600080fd5b5061048a610645366004612cec565b610fc3565b34801561065657600080fd5b5061040260d65481565b34801561066c57600080fd5b5061040260d95481565b34801561068257600080fd5b5061068b610fde565b6040516103b29190612d6b565b3480156106a457600080fd5b506104026110f9565b3480156106b957600080fd5b5061048a6106c8366004612a02565b6113e6565b3480156106d957600080fd5b506104526106e8366004612a02565b61147c565b3480156106f957600080fd5b5061070d610708366004612a02565b6114dc565b604080516001600160a01b0390931683526020830191909152016103b2565b610402611514565b34801561074057600080fd5b5061040261074f366004612982565b61186a565b34801561076057600080fd5b5061048a6118f0565b34801561077557600080fd5b506103a6610784366004612982565b60df6020526000908152604090205460ff1681565b3480156107a557600080fd5b50610425611904565b3480156107ba57600080fd5b5061040260d25481565b3480156107d057600080fd5b5060d1546103a690610100900460ff1681565b3480156107ef57600080fd5b50610452611911565b34801561080457600080fd5b5060d1546103a690640100000000900460ff1681565b34801561082657600080fd5b50610425611925565b34801561083b57600080fd5b5061040260d45481565b34801561085157600080fd5b5061048a610860366004612d2d565b611934565b34801561087157600080fd5b50610402610880366004612982565b611943565b34801561089157600080fd5b506104256119ff565b3480156108a657600080fd5b5060da54610452906001600160a01b031681565b3480156108c657600080fd5b5060d1546103a69062010000900460ff1681565b3480156108e657600080fd5b5061048a6108f5366004612dcd565b611a0c565b34801561090657600080fd5b50610402611a44565b34801561091b57600080fd5b5061045261092a366004612a02565b611a64565b34801561093b57600080fd5b5061040260d55481565b34801561095157600080fd5b50610425610960366004612a02565b611a6f565b34801561097157600080fd5b5061040260d85481565b34801561098757600080fd5b5060d1546103a6906301000000900460ff1681565b3480156109a857600080fd5b5061048a6109b7366004612a02565b611b68565b3480156109c857600080fd5b5061040260d05481565b3480156109de57600080fd5b506103a66109ed366004612e4d565b611d21565b3480156109fe57600080fd5b5061048a611d4f565b348015610a1357600080fd5b5061048a610a22366004612982565b611d66565b348015610a3357600080fd5b5061040260cd5481565b348015610a4957600080fd5b5061040260ce5481565b6000610a5e82611ddc565b92915050565b606060658054610a7390612e7b565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9f90612e7b565b8015610aec5780601f10610ac157610100808354040283529160200191610aec565b820191906000526020600020905b815481529060010190602001808311610acf57829003601f168201915b5050505050905090565b6000610b0182611e2c565b506000908152606960205260409020546001600160a01b031690565b6000610b288261147c565b9050806001600160a01b0316836001600160a01b031603610b9a5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610bb65750610bb68133611d21565b610c285760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610b91565b610c328383611e8b565b505050565b600060cd54600003610c4a575060001990565b60c95460cd54610c5b906001612ec5565b610c659190612ed8565b905090565b600054610100900460ff1615808015610c8a5750600054600160ff909116105b80610ca45750303b158015610ca4575060005460ff166001145b610d075760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b91565b6000805460ff191660011790558015610d2a576000805461ff0019166101001790555b610d348c8c611ef9565b610d3c611f2a565b610d458d611d66565b60ca610d518b82612f39565b5060cc610d5e8a82612f39565b5060cd88905560ce87905560cf86905560db80546001600160a01b0319166001600160a01b03871617905560d084905560d583905560d682905560c9805460010190558015610de7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050505050565b6000610e00611f59565b610e4c5760405162461bcd60e51b815260206004820152601d60248201527f4e6565647320746f20626520616e20616c6c6f776564206d696e7465720000006044820152606401610b91565b610a5e82611fc8565b60006001610c5b60c95490565b60de8181548110610e7257600080fd5b600091825260209091200154905081565b610e8d33826120a9565b610ea95760405162461bcd60e51b8152600401610b9190612ff9565b610c32838383612107565b610ebc6122a3565b6001600160a01b038216600090815260e060205260409020805460ff1916821515179055610ee8611d4f565b4260d2819055604080516001600160a01b038516815260208101929092527f7618c8e7673fd316d308182b29784aad6b915e32612c6b9d67f50ef4e1b7d6e4910160405180910390a15050565b60cb8054610f4290612e7b565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6e90612e7b565b8015610fbb5780601f10610f9057610100808354040283529160200191610fbb565b820191906000526020600020905b815481529060010190602001808311610f9e57829003601f168201915b505050505081565b610c3283838360405180602001604052806000815250611a0c565b6060600060d45467ffffffffffffffff811115610ffd57610ffd612a47565b60405190808252806020026020018201604052801561105b57816020015b611048604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b81526020019060019003908161101b5790505b50905060005b60d4548110156110f35760dc818154811061107e5761107e613047565b600091825260209182902060408051606081018252600390930290910180546001600160a01b031683526001810154938301939093526002909201549181019190915282518390839081106110d5576110d5613047565b602002602001018190525080806110eb9061305d565b915050611061565b50919050565b60008060d8541161115a5760405162461bcd60e51b815260206004820152602560248201527f47656e65726174652070726f7661626c652072616e646f6d206e756d62657220604482015264199a5c9cdd60da1b6064820152608401610b91565b33600090815260e2602052604090205460ff166111f65760405162461bcd60e51b815260206004820152604e60248201527f55736572206973206e6f7420612061637469766520706c617965722e204f6e6c60448201527f7920612072656769737465726564207469636b657420686f6c6465722063616e60648201526d2073746172742064726177696e6760901b608482015260a401610b91565b60d780549060006112068361305d565b9190505550611213610e55565b60d8544390611223600183612ed8565b6040805160208101949094528301919091524060608201526080016040516020818303038152906040528051906020012060001c611261919061308c565b60d981905560009061127290611a64565b90506000606461128347605a6130a0565b61128d91906130bf565b60da80546001600160a01b0319166001600160a01b03851690811790915560d95460408051928352602083019190915281018290529091507f7e57d825a2478cc8123a008d7d1e20c0f6e8cbca89a7bc100c9b05ecb3698deb9060600160405180910390a160d1805461ffff191661010017905560408051808201825260da80546001600160a01b03908116835260d9546020840190815260dd80546001810182556000918252855160029091027fac507b9f8bf86ad8bb770f71cd2b1992902ae0314d93fc0f2bb011d70e796226810180549286166001600160a01b03199093169290921790915591517fac507b9f8bf86ad8bb770f71cd2b1992902ae0314d93fc0f2bb011d70e79622790920191909155915493519293169184156108fc0291859190818181858888f193505050501580156113cf573d6000803e3d6000fd5b506113d8612302565b50504260d355505060d95490565b60d780549060006113f68361305d565b909155505033600090815260e1602052604090205460d55460d65461141e9284929091612436565b61145a5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b6044820152606401610b91565b60d881905580156114795760d1805463ff000000191663010000001790555b50565b6000818152606760205260408120546001600160a01b031680610a5e5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610b91565b60dd81815481106114ec57600080fd5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b600060d0546115223361186a565b106115955760405162461bcd60e51b815260206004820152603760248201527f596f752068617665207265616368656420746865206d6178696d756d20746f6b60448201527f656e7320616c6c6f7765642070657220616464726573730000000000000000006064820152608401610b91565b60d15460ff166116045760405162461bcd60e51b815260206004820152603460248201527f526166666c6520686173206e6f7420737461727465642e204f776e6572206d7560448201527339ba1039b2ba20b8383937bb32b226b4b73a32b960611b6064820152608401610b91565b60ce5434146116485760405162461bcd60e51b815260206004820152601060248201526f4e6f20736f757020666f7220796f752160801b6044820152606401610b91565b60408051600180825281830190925260009160208083019080368337019050509050338160008151811061167e5761167e613047565b6001600160a01b0390921660209283029190910182015233600090815260df90915260408120805460ff1916600117905560d78054916116bd8361305d565b91905055506116ca6124a4565b5060d480549060006116db8361305d565b909155505033600081815260e2602090815260408083208054600160ff19909116811790915560d4805460de80548085019091557ffae8130c0619f84b4b44f01b84806f04e82e536d70e05f2356977fa318aecc1a0181905583516060810185529687529386019384524292860183815260dc8054938401815590955285517f3162b0988d4210bff484413ed451d170a03887272177efc0b7d000f10abe9edf600390930292830180546001600160a01b0319166001600160a01b0390921691909117905592517f3162b0988d4210bff484413ed451d170a03887272177efc0b7d000f10abe9ee082015592517f3162b0988d4210bff484413ed451d170a03887272177efc0b7d000f10abe9ee19093019290925560cd5490549192910361180f5760d1805462ff00ff1916620100001790555b60ce5460d45460408051928352336020840152820152606081018390527f5c05e149773613d59c93e2584c4cbc9ca960d58add53b646b126f27a345eaeab9060800160405180910390a161186283611fc8565b935050505090565b60006001600160a01b0382166118d45760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610b91565b506001600160a01b031660009081526068602052604090205490565b6118f86122a3565b6119026000612527565b565b60ca8054610f4290612e7b565b6000610c656097546001600160a01b031690565b606060668054610a7390612e7b565b61193f338383612579565b5050565b600061194d611f59565b6119995760405162461bcd60e51b815260206004820152601d60248201527f4e6565647320746f20626520616e20616c6c6f776564206d696e7465720000006044820152606401610b91565b6040805160018082528183019092526000916020808301908036833701905050905082816000815181106119cf576119cf613047565b60200260200101906001600160a01b031690816001600160a01b0316815250506119f881611fc8565b9392505050565b60cc8054610f4290612e7b565b611a1633836120a9565b611a325760405162461bcd60e51b8152600401610b9190612ff9565b611a3e84848484612647565b50505050565b600047600a611a548260096130a0565b611a5e91906130bf565b91505090565b6000610a5e8261147c565b6000818152606760205260409020546060906001600160a01b0316611ac15760405162461bcd60e51b81526020600482015260086024820152672737903a37b5b2b760c11b6044820152606401610b91565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663df30dba0611af8610a64565b60ca60cc60cb8760cd546040518763ffffffff1660e01b8152600401611b2396959493929190613150565b600060405180830381865afa158015611b40573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a5e91908101906131b3565b6000611b738261147c565b9050336001600160a01b03821614611beb5760405162461bcd60e51b815260206004820152603560248201527f4f6e6c7920746865206f776e6572206f66207468697320746f6b656e2063616e604482015274207769746864726177207468652062616c616e636560581b6064820152608401610b91565b60d154610100900460ff16611c525760405162461bcd60e51b815260206004820152602760248201527f54686520636f6e747261637420686173206e6f2062616c616e636520746f20776044820152666974686472617760c81b6064820152608401610b91565b60006064611c6147605a6130a0565b611c6b91906130bf565b90506000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611cba576040519150601f19603f3d011682016040523d82523d6000602084013e611cbf565b606091505b505060d1805464ff0000000019166401000000001790559050611ce0612302565b80611a3e5760405162461bcd60e51b815260206004820152601160248201527015da5d1a191c985dd85b0819985a5b1959607a1b6044820152606401610b91565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b611d576122a3565b60d1805460ff19166001179055565b611d6e6122a3565b6001600160a01b038116611dd35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b91565b61147981612527565b60006001600160e01b031982166380ac58cd60e01b1480611e0d57506001600160e01b03198216635b5e139f60e01b145b80610a5e57506301ffc9a760e01b6001600160e01b0319831614610a5e565b6000818152606760205260409020546001600160a01b03166114795760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610b91565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611ec08261147c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600054610100900460ff16611f205760405162461bcd60e51b8152600401610b919061322a565b61193f828261267a565b600054610100900460ff16611f515760405162461bcd60e51b8152600401610b919061322a565b6119026126ba565b600033611f64611911565b6001600160a01b031603611f785750600190565b6000805260e06020527f88c7c6e2e6608585cc594f384e2acdf8215a4a261b6a00df05fe03af932e95775460ff1615611fb15750600190565b5033600090815260e0602052604090205460ff1690565b600080611fd460c95490565b905060006001845183611fe79190612ec5565b611ff19190612ed8565b905060cd5460001480612006575060cd548111155b61203d5760405162461bcd60e51b815260206004820152600860248201526714dbdb19081bdd5d60c21b6044820152606401610b91565b8061204760c95490565b1161209d5761208a848361205a60c95490565b6120649190612ed8565b8151811061207457612074613047565b602002602001015161208560c95490565b6126ea565b61209860c980546001019055565b61203d565b60c9545b949350505050565b6000806120b58361147c565b9050806001600160a01b0316846001600160a01b031614806120dc57506120dc8185611d21565b806120a15750836001600160a01b03166120f584610af6565b6001600160a01b031614949350505050565b826001600160a01b031661211a8261147c565b6001600160a01b03161461217e5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610b91565b6001600160a01b0382166121e05760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610b91565b6121eb600082611e8b565b6001600160a01b0383166000908152606860205260408120805460019290612214908490612ed8565b90915550506001600160a01b0382166000908152606860205260408120805460019290612242908490612ec5565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b336122ac611911565b6001600160a01b0316146119025760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b91565b6000606461231147600a6130a0565b61231b91906130bf565b60d15490915062010000900460ff1661239e576040805162461bcd60e51b81526020600482015260248101919091527f526166666c652073616c65206d75737420626520636f6d706c6574652062656660448201527f6f72652077697468647261772066756e6374696f6e20697320656e61626c65646064820152608401610b91565b600081116123fc5760405162461bcd60e51b815260206004820152602560248201527f436f6e7472616374204120686173206e6f2062616c616e636520746f20776974604482015264686472617760d81b6064820152608401610b91565b60db546040516001600160a01b039091169082156108fc029083906000818181858888f1935050505015801561193f573d6000803e3d6000fd5b6000805b8281101561246557838061245057612450613076565b868709955061245e8161305d565b905061243a565b50612470838561308c565b9350848403612481575060016120a1565b8461248c8585612ed8565b03612499575060016120a1565b506000949350505050565b60d78054600091826124b58361305d565b909155505060d4543390426124cb600143612ed8565b60405160609490941b6bffffffffffffffffffffffff191660208501526034840192909252605483015240607482015260940160408051601f19818403018152918152815160209283012033600090815260e190935291205590565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036125da5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610b91565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612652848484612107565b61265e8484848461282c565b611a3e5760405162461bcd60e51b8152600401610b9190613275565b600054610100900460ff166126a15760405162461bcd60e51b8152600401610b919061322a565b60656126ad8382612f39565b506066610c328282612f39565b600054610100900460ff166126e15760405162461bcd60e51b8152600401610b919061322a565b61190233612527565b6001600160a01b0382166127405760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610b91565b6000818152606760205260409020546001600160a01b0316156127a55760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610b91565b6001600160a01b03821660009081526068602052604081208054600192906127ce908490612ec5565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b1561292257604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906128709033908990889088906004016132c7565b6020604051808303816000875af19250505080156128ab575060408051601f3d908101601f191682019092526128a891810190613304565b60015b612908573d8080156128d9576040519150601f19603f3d011682016040523d82523d6000602084013e6128de565b606091505b5080516000036129005760405162461bcd60e51b8152600401610b9190613275565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506120a1565b5060016120a1565b6001600160e01b03198116811461147957600080fd5b60006020828403121561295257600080fd5b81356119f88161292a565b6001600160a01b038116811461147957600080fd5b803561297d8161295d565b919050565b60006020828403121561299457600080fd5b81356119f88161295d565b60005b838110156129ba5781810151838201526020016129a2565b50506000910152565b600081518084526129db81602086016020860161299f565b601f01601f19169290920160200192915050565b6020815260006119f860208301846129c3565b600060208284031215612a1457600080fd5b5035919050565b60008060408385031215612a2e57600080fd5b8235612a398161295d565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612a8657612a86612a47565b604052919050565b600067ffffffffffffffff821115612aa857612aa8612a47565b50601f01601f191660200190565b6000612ac9612ac484612a8e565b612a5d565b9050828152838383011115612add57600080fd5b828260208301376000602084830101529392505050565b600082601f830112612b0557600080fd5b6119f883833560208501612ab6565b6000806000806000806000806000806000806101808d8f031215612b3757600080fd5b612b408d612972565b9b5067ffffffffffffffff60208e01351115612b5b57600080fd5b612b6b8e60208f01358f01612af4565b9a5067ffffffffffffffff60408e01351115612b8657600080fd5b612b968e60408f01358f01612af4565b995067ffffffffffffffff60608e01351115612bb157600080fd5b612bc18e60608f01358f01612af4565b985067ffffffffffffffff60808e01351115612bdc57600080fd5b612bec8e60808f01358f01612af4565b975060a08d0135965060c08d0135955060e08d01359450612c106101008e01612972565b93506101208d013592506101408d013591506101608d013590509295989b509295989b509295989b565b60006020808385031215612c4d57600080fd5b823567ffffffffffffffff80821115612c6557600080fd5b818501915085601f830112612c7957600080fd5b813581811115612c8b57612c8b612a47565b8060051b9150612c9c848301612a5d565b8181529183018401918481019088841115612cb657600080fd5b938501935b83851015612ce05784359250612cd08361295d565b8282529385019390850190612cbb565b98975050505050505050565b600080600060608486031215612d0157600080fd5b8335612d0c8161295d565b92506020840135612d1c8161295d565b929592945050506040919091013590565b60008060408385031215612d4057600080fd5b8235612d4b8161295d565b915060208301358015158114612d6057600080fd5b809150509250929050565b602080825282518282018190526000919060409081850190868401855b82811015612dc057815180516001600160a01b0316855286810151878601528501518585015260609093019290850190600101612d88565b5091979650505050505050565b60008060008060808587031215612de357600080fd5b8435612dee8161295d565b93506020850135612dfe8161295d565b925060408501359150606085013567ffffffffffffffff811115612e2157600080fd5b8501601f81018713612e3257600080fd5b612e4187823560208401612ab6565b91505092959194509250565b60008060408385031215612e6057600080fd5b8235612e6b8161295d565b91506020830135612d608161295d565b600181811c90821680612e8f57607f821691505b6020821081036110f357634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610a5e57610a5e612eaf565b81810381811115610a5e57610a5e612eaf565b601f821115610c3257600081815260208120601f850160051c81016020861015612f125750805b601f850160051c820191505b81811015612f3157828155600101612f1e565b505050505050565b815167ffffffffffffffff811115612f5357612f53612a47565b612f6781612f618454612e7b565b84612eeb565b602080601f831160018114612f9c5760008415612f845750858301515b600019600386901b1c1916600185901b178555612f31565b600085815260208120601f198616915b82811015612fcb57888601518255948401946001909101908401612fac565b5085821015612fe95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60006001820161306f5761306f612eaf565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261309b5761309b613076565b500690565b60008160001904831182151516156130ba576130ba612eaf565b500290565b6000826130ce576130ce613076565b500490565b600081546130e081612e7b565b8085526020600183811680156130fd576001811461311757613145565b60ff1985168884015283151560051b880183019550613145565b866000528260002060005b8581101561313d5781548a8201860152908301908401613122565b890184019650505b505050505092915050565b60c08152600061316360c08301896129c3565b828103602084015261317581896130d3565b9050828103604084015261318981886130d3565b9050828103606084015261319d81876130d3565b6080840195909552505060a00152949350505050565b6000602082840312156131c557600080fd5b815167ffffffffffffffff8111156131dc57600080fd5b8201601f810184136131ed57600080fd5b80516131fb612ac482612a8e565b81815285602083850101111561321057600080fd5b61322182602083016020860161299f565b95945050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906132fa908301846129c3565b9695505050505050565b60006020828403121561331657600080fd5b81516119f88161292a56fea2646970667358221220c46f099f3eb03c59fb82de756ada42a98f12236765be7da5db78895f7a75d1f764736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "returns the number of minted tokens within the edition"
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "numberCanMint()": {
        "notice": "Returns the number of editions allowed to mint (max_uint256 when open edition)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 823,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 826,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3168,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3512,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1123,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 1125,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 1129,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1133,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1137,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1143,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1985,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 593,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 713,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9053,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "atEditionId",
        "offset": 0,
        "slot": "201",
        "type": "t_struct(Counter)3175_storage"
      },
      {
        "astId": 9079,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "description",
        "offset": 0,
        "slot": "202",
        "type": "t_string_storage"
      },
      {
        "astId": 9081,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "animationUrl",
        "offset": 0,
        "slot": "203",
        "type": "t_string_storage"
      },
      {
        "astId": 9083,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "imageUrl",
        "offset": 0,
        "slot": "204",
        "type": "t_string_storage"
      },
      {
        "astId": 9085,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "editionSize",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 9087,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "salePrice",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 9089,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "minPlayers",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 9091,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "maxTokens",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 9094,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "active",
        "offset": 0,
        "slot": "209",
        "type": "t_bool"
      },
      {
        "astId": 9097,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "winnerSelected",
        "offset": 1,
        "slot": "209",
        "type": "t_bool"
      },
      {
        "astId": 9100,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "isComplete",
        "offset": 2,
        "slot": "209",
        "type": "t_bool"
      },
      {
        "astId": 9103,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "isProof",
        "offset": 3,
        "slot": "209",
        "type": "t_bool"
      },
      {
        "astId": 9106,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "prizeClaimed",
        "offset": 4,
        "slot": "209",
        "type": "t_bool"
      },
      {
        "astId": 9108,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "startTime",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 9110,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "endTime",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 9113,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "EntryCount",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 9116,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "prime",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 9119,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "iterations",
        "offset": 0,
        "slot": "214",
        "type": "t_uint256"
      },
      {
        "astId": 9122,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "nonce",
        "offset": 0,
        "slot": "215",
        "type": "t_uint256"
      },
      {
        "astId": 9125,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "randomNumber",
        "offset": 0,
        "slot": "216",
        "type": "t_uint256"
      },
      {
        "astId": 9128,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "winningNumber",
        "offset": 0,
        "slot": "217",
        "type": "t_uint256"
      },
      {
        "astId": 9130,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "Winner",
        "offset": 0,
        "slot": "218",
        "type": "t_address_payable"
      },
      {
        "astId": 9132,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "bunyBank",
        "offset": 0,
        "slot": "219",
        "type": "t_address_payable"
      },
      {
        "astId": 9136,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "entry",
        "offset": 0,
        "slot": "220",
        "type": "t_array(t_struct(Entry)9166_storage)dyn_storage"
      },
      {
        "astId": 9140,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "raffleWinner",
        "offset": 0,
        "slot": "221",
        "type": "t_array(t_struct(RaffleWinner)9171_storage)dyn_storage"
      },
      {
        "astId": 9143,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "nftTokenIds",
        "offset": 0,
        "slot": "222",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 9147,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "mintedTokens",
        "offset": 0,
        "slot": "223",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9151,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "allowedMinters",
        "offset": 0,
        "slot": "224",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9155,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "seed",
        "offset": 0,
        "slot": "225",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9159,
        "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
        "label": "isPlayer",
        "offset": 0,
        "slot": "226",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Entry)9166_storage)dyn_storage": {
        "base": "t_struct(Entry)9166_storage",
        "encoding": "dynamic_array",
        "label": "struct BunyRaffleNft.Entry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RaffleWinner)9171_storage)dyn_storage": {
        "base": "t_struct(RaffleWinner)9171_storage",
        "encoding": "dynamic_array",
        "label": "struct BunyRaffleNft.RaffleWinner[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)3175_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 3174,
            "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Entry)9166_storage": {
        "encoding": "inplace",
        "label": "struct BunyRaffleNft.Entry",
        "members": [
          {
            "astId": 9161,
            "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
            "label": "player",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9163,
            "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
            "label": "EntryNumber",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9165,
            "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
            "label": "entryTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RaffleWinner)9171_storage": {
        "encoding": "inplace",
        "label": "struct BunyRaffleNft.RaffleWinner",
        "members": [
          {
            "astId": 9168,
            "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
            "label": "winner",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 9170,
            "contract": "contracts/BunyRaffleNft.sol:BunyRaffleNft",
            "label": "winningTokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}