{
  "language": "Solidity",
  "sources": {
    "contracts/BunyBank.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract BunyBank {\r\n    address owner;\r\n    mapping(address => uint256) tokenBalances;\r\n    string public ContractName = \"Buny Bank v1\";\r\n    \r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function deposit() public payable {\r\n    }\r\n    \r\n    receive() external payable {}\r\n\r\n\r\n    function withdraw(uint amount) public {\r\n        require(msg.sender == owner, \"Only the owner can withdraw funds.\");\r\n        require(amount <= address(this).balance, \"Insufficient balance.\");\r\n        payable(msg.sender).transfer(amount);\r\n    }\r\n    \r\n    function withdrawTo(address payable recipient, uint amount) public {\r\n        require(msg.sender == owner, \"Only the owner can withdraw funds.\");\r\n        require(amount <= address(this).balance, \"Insufficient balance.\");\r\n        recipient.transfer(amount);\r\n    }\r\n    \r\n    function getBalance() public view returns(uint) {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function receive(address token, uint256 amount) public {\r\n        require(msg.sender == token, \"Only the token contract can call this function.\");\r\n        require(ERC20(token).transferFrom(msg.sender, address(this), amount), \"Token transfer failed.\");\r\n        tokenBalances[token] += amount;\r\n    }\r\n    \r\n    function getTokenBalance(address token) public view returns (uint256) {\r\n        return ERC20(token).balanceOf(address(this));\r\n    }\r\n    \r\n  \r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}