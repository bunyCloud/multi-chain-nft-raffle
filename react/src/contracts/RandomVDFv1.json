{
  "address": "0xA117BCE6Af2682d418C1cF39d8Bf2e2F186d7D2C",
  "abi": [
    {
      "inputs": [],
      "name": "createSeed",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "iterations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proof",
          "type": "uint256"
        }
      ],
      "name": "prove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "seeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x16a3c93d95684db4170d88b86616a38042a8ae1c9a394b03393df03b70e6e0e2",
  "receipt": {
    "to": null,
    "from": "0x8406A51A0E1B5F52Ff61226773e6328e5Da5d964",
    "contractAddress": "0xA117BCE6Af2682d418C1cF39d8Bf2e2F186d7D2C",
    "transactionIndex": 0,
    "gasUsed": "274624",
    "logsBloom": "0x
    "blockHash": "0x9ddd267c72d82b4756ce49383f69fd0f0b3a5d8541937ffa6769b23193b97525",
    "transactionHash": "0x16a3c93d95684db4170d88b86616a38042a8ae1c9a394b03393df03b70e6e0e2",
    "logs": [],
    "blockNumber": 18582317,
    "cumulativeGasUsed": "274624",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "616533764cf68b625c78f9d489405d10",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"createSeed\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iterations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"}],\"name\":\"prove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"seeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RandomVDF.sol\":\"RandomVDFv1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RandomVDF.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n \\r\\nimport './SlothVDF.sol';\\r\\n \\r\\ncontract RandomVDFv1  {\\r\\n     \\r\\n    // large prime\\r\\n    uint256 public prime = 432211379112113246928842014508850435796007;\\r\\n    // adjust for block finality\\r\\n    uint256 public iterations = 1000;\\r\\n    // increment nonce to increase entropy\\r\\n    uint256 private nonce;\\r\\n    // address -> vdf seed\\r\\n    mapping(address => uint256) public seeds;\\r\\n \\r\\n    function createSeed() external payable {\\r\\n        // commit funds/tokens/etc here\\r\\n        // create a pseudo random seed as the input\\r\\n        seeds[msg.sender] = uint256(keccak256(abi.encodePacked(msg.sender, nonce++, block.timestamp, blockhash(block.number - 1))));\\r\\n    }\\r\\n \\r\\n    function prove(uint256 proof) external {\\r\\n        // see if the proof is valid for the seed associated with the address\\r\\n        require(SlothVDF.verify(proof, seeds[msg.sender], prime, iterations), 'Invalid proof');\\r\\n \\r\\n        // use the proof as a provable random number\\r\\n        uint256 _random = proof;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x737cd5e970913992438362427223bcf1e26a28bc094fb8b3debfe11397c1a9c4\",\"license\":\"MIT\"},\"contracts/SlothVDF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// https://eprint.iacr.org/2015/366.pdf\\r\\n \\r\\npragma solidity ^0.8.11;\\r\\n \\r\\nlibrary SlothVDF {\\r\\n \\r\\n    /// @dev pow(base, exponent, modulus)\\r\\n    /// @param base base\\r\\n    /// @param exponent exponent\\r\\n    /// @param modulus modulus\\r\\n    function bexmod(\\r\\n        uint256 base,\\r\\n        uint256 exponent,\\r\\n        uint256 modulus\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 _result = 1;\\r\\n        uint256 _base = base;\\r\\n        for (; exponent > 0; exponent >>= 1) {\\r\\n            if (exponent & 1 == 1) {\\r\\n                _result = mulmod(_result, _base, modulus);\\r\\n            }\\r\\n \\r\\n            _base = mulmod(_base, _base, modulus);\\r\\n        }\\r\\n        return _result;\\r\\n    }\\r\\n \\r\\n    /// @dev compute sloth starting from seed, over prime, for iterations\\r\\n    /// @param _seed seed\\r\\n    /// @param _prime prime\\r\\n    /// @param _iterations number of iterations\\r\\n    /// @return sloth result\\r\\n    function compute(\\r\\n        uint256 _seed,\\r\\n        uint256 _prime,\\r\\n        uint256 _iterations\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 _exponent = (_prime + 1) >> 2;\\r\\n        _seed %= _prime;\\r\\n        for (uint256 i; i < _iterations; ++i) {\\r\\n            _seed = bexmod(_seed, _exponent, _prime);\\r\\n        }\\r\\n        return _seed;\\r\\n    }\\r\\n     \\r\\n    /// @dev verify sloth result proof, starting from seed, over prime, for iterations\\r\\n    /// @param _proof result\\r\\n    /// @param _seed seed\\r\\n    /// @param _prime prime\\r\\n    /// @param _iterations number of iterations\\r\\n    /// @return true if y is a quadratic residue modulo p\\r\\n    function verify(\\r\\n        uint256 _proof,\\r\\n        uint256 _seed,\\r\\n        uint256 _prime,\\r\\n        uint256 _iterations\\r\\n    ) internal pure returns (bool) {\\r\\n        for (uint256 i; i < _iterations; ++i) {\\r\\n            _proof = mulmod(_proof, _proof, _prime);\\r\\n        }\\r\\n        _seed %= _prime;\\r\\n        if (_seed == _proof) return true;\\r\\n        if (_prime - _seed == _proof) return true;\\r\\n        return false;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x1340874467ab5f225efbbdcc4ebd16c08d9cc3d7dad579a82b7ebbbb0f2ff5ce\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040527104f627b3bbd341d240517fe3db99ad3b2c276000556103e860015534801561002c57600080fd5b506103338061003c6000396000f3fe60806040526004361061004a5760003560e01c80633eacd8a71461004f5780634358d2be1461005957806348d0528a146100815780635dfd7a57146100ae578063c7ee005e146100ce575b600080fd5b6100576100e4565b005b34801561006557600080fd5b5061006f60015481565b60405190815260200160405180910390f35b34801561008d57600080fd5b5061006f61009c366004610234565b60036020526000908152604090205481565b3480156100ba57600080fd5b506100576100c9366004610264565b610160565b3480156100da57600080fd5b5061006f60005481565b60028054339160006100f583610293565b90915550426101056001436102ac565b60405160609490941b6bffffffffffffffffffffffff191660208501526034840192909252605483015240607482015260940160408051601f1981840301815291815281516020928301203360009081526003909352912055565b33600090815260036020526040812054905460015461018292849290916101c5565b6101c25760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b604482015260640160405180910390fd5b50565b6000805b828110156101f45783806101df576101df6102c5565b86870995506101ed81610293565b90506101c9565b506101ff83856102db565b93508484036102105750600161022c565b8461021b85856102ac565b036102285750600161022c565b5060005b949350505050565b60006020828403121561024657600080fd5b81356001600160a01b038116811461025d57600080fd5b9392505050565b60006020828403121561027657600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b6000600182016102a5576102a561027d565b5060010190565b818103818111156102bf576102bf61027d565b92915050565b634e487b7160e01b600052601260045260246000fd5b6000826102f857634e487b7160e01b600052601260045260246000fd5b50069056fea26469706673582212200d2181e31ece02282dae49ec0480ed55d9697150162b9a05b8aa6336f83a9dbc64736f6c63430008100033",
  "deployedBytecode": "0x60806040526004361061004a5760003560e01c80633eacd8a71461004f5780634358d2be1461005957806348d0528a146100815780635dfd7a57146100ae578063c7ee005e146100ce575b600080fd5b6100576100e4565b005b34801561006557600080fd5b5061006f60015481565b60405190815260200160405180910390f35b34801561008d57600080fd5b5061006f61009c366004610234565b60036020526000908152604090205481565b3480156100ba57600080fd5b506100576100c9366004610264565b610160565b3480156100da57600080fd5b5061006f60005481565b60028054339160006100f583610293565b90915550426101056001436102ac565b60405160609490941b6bffffffffffffffffffffffff191660208501526034840192909252605483015240607482015260940160408051601f1981840301815291815281516020928301203360009081526003909352912055565b33600090815260036020526040812054905460015461018292849290916101c5565b6101c25760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b604482015260640160405180910390fd5b50565b6000805b828110156101f45783806101df576101df6102c5565b86870995506101ed81610293565b90506101c9565b506101ff83856102db565b93508484036102105750600161022c565b8461021b85856102ac565b036102285750600161022c565b5060005b949350505050565b60006020828403121561024657600080fd5b81356001600160a01b038116811461025d57600080fd5b9392505050565b60006020828403121561027657600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b6000600182016102a5576102a561027d565b5060010190565b818103818111156102bf576102bf61027d565b92915050565b634e487b7160e01b600052601260045260246000fd5b6000826102f857634e487b7160e01b600052601260045260246000fd5b50069056fea26469706673582212200d2181e31ece02282dae49ec0480ed55d9697150162b9a05b8aa6336f83a9dbc64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5,
        "contract": "contracts/RandomVDF.sol:RandomVDFv1",
        "label": "prime",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8,
        "contract": "contracts/RandomVDF.sol:RandomVDFv1",
        "label": "iterations",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 10,
        "contract": "contracts/RandomVDF.sol:RandomVDFv1",
        "label": "nonce",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 14,
        "contract": "contracts/RandomVDF.sol:RandomVDFv1",
        "label": "seeds",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
