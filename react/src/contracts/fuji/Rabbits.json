{
  "address": "0x732975dF7d263A3451a800742eb45Eb0226C3554",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "friend_key",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "addFriend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pubkey",
          "type": "address"
        }
      ],
      "name": "checkUserExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "createAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyFriendList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pubkey",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct Rabbits.friend[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pubkey",
          "type": "address"
        }
      ],
      "name": "getUsername",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "friend_key",
          "type": "address"
        }
      ],
      "name": "readMessage",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "msg",
              "type": "string"
            }
          ],
          "internalType": "struct Rabbits.message[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "friend_key",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_msg",
          "type": "string"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe1cb09c855cbe6cc1c007080d70cbba24c64b8e4b0ddba2f434aed9350f93eab",
  "receipt": {
    "to": null,
    "from": "0x8406A51A0E1B5F52Ff61226773e6328e5Da5d964",
    "contractAddress": "0x732975dF7d263A3451a800742eb45Eb0226C3554",
    "transactionIndex": 0,
    "gasUsed": "944493",
    "logsBloom": "0x
    "blockHash": "0x3d80ab3401ac882459026c060bde7c8cce4735248263201b78bed89a5825bcf7",
    "transactionHash": "0xe1cb09c855cbe6cc1c007080d70cbba24c64b8e4b0ddba2f434aed9350f93eab",
    "logs": [],
    "blockNumber": 16634495,
    "cumulativeGasUsed": "944493",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7982ca2db3fc33712c9412d0a1703fc0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"friend_key\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"addFriend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pubkey\",\"type\":\"address\"}],\"name\":\"checkUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"createAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyFriendList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pubkey\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct Rabbits.friend[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pubkey\",\"type\":\"address\"}],\"name\":\"getUsername\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"friend_key\",\"type\":\"address\"}],\"name\":\"readMessage\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"msg\",\"type\":\"string\"}],\"internalType\":\"struct Rabbits.message[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"friend_key\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_msg\",\"type\":\"string\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Rabbits.sol\":\"Rabbits\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Rabbits.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\n\\r\\ncontract Rabbits {\\r\\n\\r\\n    // Stores the default name of an user and her friends info\\r\\n    struct user {\\r\\n        string name;\\r\\n        friend[] friendList;\\r\\n    }\\r\\n\\r\\n    // Each friend is identified by its address and name assigned by the second party\\r\\n    struct friend {\\r\\n        address pubkey;\\r\\n        string name;\\r\\n    }\\r\\n\\r\\n    // message construct stores the single chat message and its metadata\\r\\n    struct message {\\r\\n        address sender;\\r\\n        uint256 timestamp;\\r\\n        string msg;\\r\\n    }\\r\\n\\r\\n    // Collection of users registered on the application\\r\\n    mapping(address => user) userList;\\r\\n    // Collection of messages communicated in a channel between two users\\r\\n    mapping(bytes32 => message[]) allMessages; // key : Hash(user1,user2)\\r\\n\\r\\n    // It checks whether a user(identified by its public key)\\r\\n    // has created an account on this application or not\\r\\n    function checkUserExists(address pubkey) public view returns(bool) {\\r\\n        return bytes(userList[pubkey].name).length > 0;\\r\\n    }\\r\\n\\r\\n    // Registers the caller(msg.sender) to our app with a non-empty username\\r\\n    function createAccount(string calldata name) external {\\r\\n        require(checkUserExists(msg.sender)==false, \\\"User already exists!\\\");\\r\\n        require(bytes(name).length>0, \\\"Username cannot be empty!\\\"); \\r\\n        userList[msg.sender].name = name;\\r\\n    }\\r\\n\\r\\n    // Returns the default name provided by an user\\r\\n    function getUsername(address pubkey) external view returns(string memory) {\\r\\n        require(checkUserExists(pubkey), \\\"User is not registered!\\\");\\r\\n        return userList[pubkey].name;\\r\\n    }\\r\\n\\r\\n    // Adds new user as your friend with an associated nickname\\r\\n    function addFriend(address friend_key, string calldata name) external {\\r\\n        require(checkUserExists(msg.sender), \\\"Create an account first!\\\");\\r\\n        require(checkUserExists(friend_key), \\\"User is not registered!\\\");\\r\\n        require(msg.sender!=friend_key, \\\"Users cannot add themselves as friends!\\\");\\r\\n        require(checkAlreadyFriends(msg.sender,friend_key)==false, \\\"These users are already friends!\\\");\\r\\n\\r\\n        _addFriend(msg.sender, friend_key, name);\\r\\n        _addFriend(friend_key, msg.sender, userList[msg.sender].name);\\r\\n    }\\r\\n\\r\\n    // Checks if two users are already friends or not\\r\\n    function checkAlreadyFriends(address pubkey1, address pubkey2) internal view returns(bool) {\\r\\n\\r\\n        if(userList[pubkey1].friendList.length > userList[pubkey2].friendList.length)\\r\\n        {\\r\\n            address tmp = pubkey1;\\r\\n            pubkey1 = pubkey2;\\r\\n            pubkey2 = tmp;\\r\\n        }\\r\\n\\r\\n        for(uint i=0; i<userList[pubkey1].friendList.length; ++i)\\r\\n        {\\r\\n            if(userList[pubkey1].friendList[i].pubkey == pubkey2)\\r\\n                return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    // A helper function to update the friendList\\r\\n    function _addFriend(address me, address friend_key, string memory name) internal {\\r\\n        friend memory newFriend = friend(friend_key,name);\\r\\n        userList[me].friendList.push(newFriend);\\r\\n    }\\r\\n\\r\\n    // Returns list of friends of the sender\\r\\n    function getMyFriendList() external view returns(friend[] memory) {\\r\\n        return userList[msg.sender].friendList;\\r\\n    }\\r\\n\\r\\n    // Returns a unique code for the channel created between the two users\\r\\n    // Hash(key1,key2) where key1 is lexicographically smaller than key2\\r\\n    function _getChatCode(address pubkey1, address pubkey2) internal pure returns(bytes32) {\\r\\n        if(pubkey1 < pubkey2)\\r\\n            return keccak256(abi.encodePacked(pubkey1, pubkey2));\\r\\n        else\\r\\n            return keccak256(abi.encodePacked(pubkey2, pubkey1));\\r\\n    }\\r\\n\\r\\n    // Sends a new message to a given friend\\r\\n    function sendMessage(address friend_key, string calldata _msg) external {\\r\\n        require(checkUserExists(msg.sender), \\\"Create an account first!\\\");\\r\\n        require(checkUserExists(friend_key), \\\"User is not registered!\\\");\\r\\n        require(checkAlreadyFriends(msg.sender,friend_key), \\\"You are not friends with the given user\\\");\\r\\n\\r\\n        bytes32 chatCode = _getChatCode(msg.sender, friend_key);\\r\\n        message memory newMsg = message(msg.sender, block.timestamp, _msg);\\r\\n        allMessages[chatCode].push(newMsg);\\r\\n    }\\r\\n\\r\\n    // Returns all the chat messages communicated in a channel\\r\\n    function readMessage(address friend_key) external view returns(message[] memory) {\\r\\n        bytes32 chatCode = _getChatCode(msg.sender, friend_key);\\r\\n        return allMessages[chatCode];\\r\\n    }\\r\\n}\",\"keccak256\":\"0x30b8581a45a5359e8c5639bee9b3b221b984cc19a7bf100d7a265fad7538a305\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611020806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80633b9f708d1161005b5780633b9f708d146100df578063bd0f4d0d146100f2578063ce43c03214610107578063de6f24bb1461012757600080fd5b8063133f50f514610082578063255e9c11146100aa578063298daf5b146100ca575b600080fd5b610095610090366004610b07565b61013a565b60405190151581526020015b60405180910390f35b6100bd6100b8366004610b07565b61016a565b6040516100a19190610b6f565b6100dd6100d8366004610c40565b61029d565b005b6100dd6100ed366004610c82565b61035b565b6100fa610575565b6040516100a19190610cd5565b61011a610115366004610b07565b610687565b6040516100a19190610d44565b6100dd610135366004610c82565b610756565b6001600160a01b0381166000908152602081905260408120805482919061016090610d57565b9050119050919050565b60606000610178338461090a565b905060016000828152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610291576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001810154938301939093526002830180549293929184019161020090610d57565b80601f016020809104026020016040519081016040528092919081815260200182805461022c90610d57565b80156102795780601f1061024e57610100808354040283529160200191610279565b820191906000526020600020905b81548152906001019060200180831161025c57829003601f168201915b505050505081525050815260200190600101906101ad565b50505050915050919050565b6102a63361013a565b156102ef5760405162461bcd60e51b81526020600482015260146024820152735573657220616c7265616479206578697374732160601b60448201526064015b60405180910390fd5b8061033c5760405162461bcd60e51b815260206004820152601960248201527f557365726e616d652063616e6e6f7420626520656d707479210000000000000060448201526064016102e6565b336000908152602081905260409020610356828483610df5565b505050565b6103643361013a565b6103ab5760405162461bcd60e51b815260206004820152601860248201527743726561746520616e206163636f756e742066697273742160401b60448201526064016102e6565b6103b48361013a565b6103d05760405162461bcd60e51b81526004016102e690610eb6565b6001600160a01b03831633036104385760405162461bcd60e51b815260206004820152602760248201527f55736572732063616e6e6f7420616464207468656d73656c76657320617320666044820152667269656e64732160c81b60648201526084016102e6565b61044233846109a1565b1561048f5760405162461bcd60e51b815260206004820181905260248201527f54686573652075736572732061726520616c726561647920667269656e64732160448201526064016102e6565b6104d0338484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a7292505050565b336000818152602081905260409020805461035692869290916104f290610d57565b80601f016020809104026020016040519081016040528092919081815260200182805461051e90610d57565b801561056b5780601f106105405761010080835404028352916020019161056b565b820191906000526020600020905b81548152906001019060200180831161054e57829003601f168201915b5050505050610a72565b33600090815260208181526040808320600101805482518185028101850190935280835260609492939192909184015b8282101561067e576000848152602090819020604080518082019091526002850290910180546001600160a01b0316825260018101805492939192918401916105ed90610d57565b80601f016020809104026020016040519081016040528092919081815260200182805461061990610d57565b80156106665780601f1061063b57610100808354040283529160200191610666565b820191906000526020600020905b81548152906001019060200180831161064957829003601f168201915b505050505081525050815260200190600101906105a5565b50505050905090565b60606106928261013a565b6106ae5760405162461bcd60e51b81526004016102e690610eb6565b6001600160a01b038216600090815260208190526040902080546106d190610d57565b80601f01602080910402602001604051908101604052809291908181526020018280546106fd90610d57565b801561074a5780601f1061071f5761010080835404028352916020019161074a565b820191906000526020600020905b81548152906001019060200180831161072d57829003601f168201915b50505050509050919050565b61075f3361013a565b6107a65760405162461bcd60e51b815260206004820152601860248201527743726561746520616e206163636f756e742066697273742160401b60448201526064016102e6565b6107af8361013a565b6107cb5760405162461bcd60e51b81526004016102e690610eb6565b6107d533846109a1565b6108315760405162461bcd60e51b815260206004820152602760248201527f596f7520617265206e6f7420667269656e64732077697468207468652067697660448201526632b7103ab9b2b960c91b60648201526084016102e6565b600061083d338561090a565b905060006040518060600160405280336001600160a01b0316815260200142815260200185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250508481526001602081815260408084208054808501825590855293829020865160039095020180546001600160a01b0319166001600160a01b039095169490941784559085015191830191909155830151929350839290915060028201906109009082610eed565b5050505050505050565b6000816001600160a01b0316836001600160a01b0316101561096d576040516bffffffffffffffffffffffff19606085811b8216602084015284901b1660348201526048015b60405160208183030381529060405280519060200120905061099b565b6040516bffffffffffffffffffffffff19606084811b8216602084015285901b166034820152604801610950565b92915050565b6001600160a01b0380821660009081526020819052604080822060019081015493861683529082200154909110156109d7579091905b60005b6001600160a01b038416600090815260208190526040902060010154811015610a68576001600160a01b03848116600090815260208190526040902060010180549185169183908110610a2f57610a2f610fad565b60009182526020909120600290910201546001600160a01b031603610a5857600191505061099b565b610a6181610fc3565b90506109da565b5060009392505050565b6040805180820182526001600160a01b0384811682526020808301858152878316600090815280835294852060019081018054808301825590875292909520845160029093020180546001600160a01b03191692909316919091178255519192839290820190610ae29082610eed565b50505050505050565b80356001600160a01b0381168114610b0257600080fd5b919050565b600060208284031215610b1957600080fd5b610b2282610aeb565b9392505050565b6000815180845260005b81811015610b4f57602081850181015186830182015201610b33565b506000602082860101526020601f19601f83011685010191505092915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610be957888303603f19018552815180516001600160a01b0316845287810151888501528601516060878501819052610bd581860183610b29565b968901969450505090860190600101610b96565b509098975050505050505050565b60008083601f840112610c0957600080fd5b50813567ffffffffffffffff811115610c2157600080fd5b602083019150836020828501011115610c3957600080fd5b9250929050565b60008060208385031215610c5357600080fd5b823567ffffffffffffffff811115610c6a57600080fd5b610c7685828601610bf7565b90969095509350505050565b600080600060408486031215610c9757600080fd5b610ca084610aeb565b9250602084013567ffffffffffffffff811115610cbc57600080fd5b610cc886828701610bf7565b9497909650939450505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610be957888303603f19018552815180516001600160a01b03168452870151878401879052610d3187850182610b29565b9588019593505090860190600101610cfc565b602081526000610b226020830184610b29565b600181811c90821680610d6b57607f821691505b602082108103610d8b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b601f82111561035657600081815260208120601f850160051c81016020861015610dce5750805b601f850160051c820191505b81811015610ded57828155600101610dda565b505050505050565b67ffffffffffffffff831115610e0d57610e0d610d91565b610e2183610e1b8354610d57565b83610da7565b6000601f841160018114610e555760008515610e3d5750838201355b600019600387901b1c1916600186901b178355610eaf565b600083815260209020601f19861690835b82811015610e865786850135825560209485019460019092019101610e66565b5086821015610ea35760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b60208082526017908201527f55736572206973206e6f74207265676973746572656421000000000000000000604082015260600190565b815167ffffffffffffffff811115610f0757610f07610d91565b610f1b81610f158454610d57565b84610da7565b602080601f831160018114610f505760008415610f385750858301515b600019600386901b1c1916600185901b178555610ded565b600085815260208120601f198616915b82811015610f7f57888601518255948401946001909101908401610f60565b5085821015610f9d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b600060018201610fe357634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220b7dd71eae6c96142966a851b4e8bfb8f23adf04d568a63f6c70c13a7efac601064736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80633b9f708d1161005b5780633b9f708d146100df578063bd0f4d0d146100f2578063ce43c03214610107578063de6f24bb1461012757600080fd5b8063133f50f514610082578063255e9c11146100aa578063298daf5b146100ca575b600080fd5b610095610090366004610b07565b61013a565b60405190151581526020015b60405180910390f35b6100bd6100b8366004610b07565b61016a565b6040516100a19190610b6f565b6100dd6100d8366004610c40565b61029d565b005b6100dd6100ed366004610c82565b61035b565b6100fa610575565b6040516100a19190610cd5565b61011a610115366004610b07565b610687565b6040516100a19190610d44565b6100dd610135366004610c82565b610756565b6001600160a01b0381166000908152602081905260408120805482919061016090610d57565b9050119050919050565b60606000610178338461090a565b905060016000828152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610291576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001810154938301939093526002830180549293929184019161020090610d57565b80601f016020809104026020016040519081016040528092919081815260200182805461022c90610d57565b80156102795780601f1061024e57610100808354040283529160200191610279565b820191906000526020600020905b81548152906001019060200180831161025c57829003601f168201915b505050505081525050815260200190600101906101ad565b50505050915050919050565b6102a63361013a565b156102ef5760405162461bcd60e51b81526020600482015260146024820152735573657220616c7265616479206578697374732160601b60448201526064015b60405180910390fd5b8061033c5760405162461bcd60e51b815260206004820152601960248201527f557365726e616d652063616e6e6f7420626520656d707479210000000000000060448201526064016102e6565b336000908152602081905260409020610356828483610df5565b505050565b6103643361013a565b6103ab5760405162461bcd60e51b815260206004820152601860248201527743726561746520616e206163636f756e742066697273742160401b60448201526064016102e6565b6103b48361013a565b6103d05760405162461bcd60e51b81526004016102e690610eb6565b6001600160a01b03831633036104385760405162461bcd60e51b815260206004820152602760248201527f55736572732063616e6e6f7420616464207468656d73656c76657320617320666044820152667269656e64732160c81b60648201526084016102e6565b61044233846109a1565b1561048f5760405162461bcd60e51b815260206004820181905260248201527f54686573652075736572732061726520616c726561647920667269656e64732160448201526064016102e6565b6104d0338484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a7292505050565b336000818152602081905260409020805461035692869290916104f290610d57565b80601f016020809104026020016040519081016040528092919081815260200182805461051e90610d57565b801561056b5780601f106105405761010080835404028352916020019161056b565b820191906000526020600020905b81548152906001019060200180831161054e57829003601f168201915b5050505050610a72565b33600090815260208181526040808320600101805482518185028101850190935280835260609492939192909184015b8282101561067e576000848152602090819020604080518082019091526002850290910180546001600160a01b0316825260018101805492939192918401916105ed90610d57565b80601f016020809104026020016040519081016040528092919081815260200182805461061990610d57565b80156106665780601f1061063b57610100808354040283529160200191610666565b820191906000526020600020905b81548152906001019060200180831161064957829003601f168201915b505050505081525050815260200190600101906105a5565b50505050905090565b60606106928261013a565b6106ae5760405162461bcd60e51b81526004016102e690610eb6565b6001600160a01b038216600090815260208190526040902080546106d190610d57565b80601f01602080910402602001604051908101604052809291908181526020018280546106fd90610d57565b801561074a5780601f1061071f5761010080835404028352916020019161074a565b820191906000526020600020905b81548152906001019060200180831161072d57829003601f168201915b50505050509050919050565b61075f3361013a565b6107a65760405162461bcd60e51b815260206004820152601860248201527743726561746520616e206163636f756e742066697273742160401b60448201526064016102e6565b6107af8361013a565b6107cb5760405162461bcd60e51b81526004016102e690610eb6565b6107d533846109a1565b6108315760405162461bcd60e51b815260206004820152602760248201527f596f7520617265206e6f7420667269656e64732077697468207468652067697660448201526632b7103ab9b2b960c91b60648201526084016102e6565b600061083d338561090a565b905060006040518060600160405280336001600160a01b0316815260200142815260200185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250508481526001602081815260408084208054808501825590855293829020865160039095020180546001600160a01b0319166001600160a01b039095169490941784559085015191830191909155830151929350839290915060028201906109009082610eed565b5050505050505050565b6000816001600160a01b0316836001600160a01b0316101561096d576040516bffffffffffffffffffffffff19606085811b8216602084015284901b1660348201526048015b60405160208183030381529060405280519060200120905061099b565b6040516bffffffffffffffffffffffff19606084811b8216602084015285901b166034820152604801610950565b92915050565b6001600160a01b0380821660009081526020819052604080822060019081015493861683529082200154909110156109d7579091905b60005b6001600160a01b038416600090815260208190526040902060010154811015610a68576001600160a01b03848116600090815260208190526040902060010180549185169183908110610a2f57610a2f610fad565b60009182526020909120600290910201546001600160a01b031603610a5857600191505061099b565b610a6181610fc3565b90506109da565b5060009392505050565b6040805180820182526001600160a01b0384811682526020808301858152878316600090815280835294852060019081018054808301825590875292909520845160029093020180546001600160a01b03191692909316919091178255519192839290820190610ae29082610eed565b50505050505050565b80356001600160a01b0381168114610b0257600080fd5b919050565b600060208284031215610b1957600080fd5b610b2282610aeb565b9392505050565b6000815180845260005b81811015610b4f57602081850181015186830182015201610b33565b506000602082860101526020601f19601f83011685010191505092915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610be957888303603f19018552815180516001600160a01b0316845287810151888501528601516060878501819052610bd581860183610b29565b968901969450505090860190600101610b96565b509098975050505050505050565b60008083601f840112610c0957600080fd5b50813567ffffffffffffffff811115610c2157600080fd5b602083019150836020828501011115610c3957600080fd5b9250929050565b60008060208385031215610c5357600080fd5b823567ffffffffffffffff811115610c6a57600080fd5b610c7685828601610bf7565b90969095509350505050565b600080600060408486031215610c9757600080fd5b610ca084610aeb565b9250602084013567ffffffffffffffff811115610cbc57600080fd5b610cc886828701610bf7565b9497909650939450505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610be957888303603f19018552815180516001600160a01b03168452870151878401879052610d3187850182610b29565b9588019593505090860190600101610cfc565b602081526000610b226020830184610b29565b600181811c90821680610d6b57607f821691505b602082108103610d8b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b601f82111561035657600081815260208120601f850160051c81016020861015610dce5750805b601f850160051c820191505b81811015610ded57828155600101610dda565b505050505050565b67ffffffffffffffff831115610e0d57610e0d610d91565b610e2183610e1b8354610d57565b83610da7565b6000601f841160018114610e555760008515610e3d5750838201355b600019600387901b1c1916600186901b178355610eaf565b600083815260209020601f19861690835b82811015610e865786850135825560209485019460019092019101610e66565b5086821015610ea35760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b60208082526017908201527f55736572206973206e6f74207265676973746572656421000000000000000000604082015260600190565b815167ffffffffffffffff811115610f0757610f07610d91565b610f1b81610f158454610d57565b84610da7565b602080601f831160018114610f505760008415610f385750858301515b600019600386901b1c1916600185901b178555610ded565b600085815260208120601f198616915b82811015610f7f57888601518255948401946001909101908401610f60565b5085821015610f9d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b600060018201610fe357634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220b7dd71eae6c96142966a851b4e8bfb8f23adf04d568a63f6c70c13a7efac601064736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/Rabbits.sol:Rabbits",
        "label": "userList",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(user)8_storage)"
      },
      {
        "astId": 31,
        "contract": "contracts/Rabbits.sol:Rabbits",
        "label": "allMessages",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_array(t_struct(message)20_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(friend)13_storage)dyn_storage": {
        "base": "t_struct(friend)13_storage",
        "encoding": "dynamic_array",
        "label": "struct Rabbits.friend[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(message)20_storage)dyn_storage": {
        "base": "t_struct(message)20_storage",
        "encoding": "dynamic_array",
        "label": "struct Rabbits.message[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(user)8_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Rabbits.user)",
        "numberOfBytes": "32",
        "value": "t_struct(user)8_storage"
      },
      "t_mapping(t_bytes32,t_array(t_struct(message)20_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Rabbits.message[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(message)20_storage)dyn_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(friend)13_storage": {
        "encoding": "inplace",
        "label": "struct Rabbits.friend",
        "members": [
          {
            "astId": 10,
            "contract": "contracts/Rabbits.sol:Rabbits",
            "label": "pubkey",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12,
            "contract": "contracts/Rabbits.sol:Rabbits",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(message)20_storage": {
        "encoding": "inplace",
        "label": "struct Rabbits.message",
        "members": [
          {
            "astId": 15,
            "contract": "contracts/Rabbits.sol:Rabbits",
            "label": "sender",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 17,
            "contract": "contracts/Rabbits.sol:Rabbits",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19,
            "contract": "contracts/Rabbits.sol:Rabbits",
            "label": "msg",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(user)8_storage": {
        "encoding": "inplace",
        "label": "struct Rabbits.user",
        "members": [
          {
            "astId": 3,
            "contract": "contracts/Rabbits.sol:Rabbits",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 7,
            "contract": "contracts/Rabbits.sol:Rabbits",
            "label": "friendList",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(friend)13_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
