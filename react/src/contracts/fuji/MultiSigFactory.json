{
  "address": "0xE7147659587cc99306ADbA141bE013fd71b25cd3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "signaturesRequired",
          "type": "uint256"
        }
      ],
      "name": "Create",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "signaturesRequired",
          "type": "uint256"
        }
      ],
      "name": "Owners",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_signaturesRequired",
          "type": "uint256"
        }
      ],
      "name": "create",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_signaturesRequired",
          "type": "uint256"
        }
      ],
      "name": "emitOwners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getMultiSig",
      "outputs": [
        {
          "internalType": "address",
          "name": "multiSigAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "signaturesRequired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "multiSigs",
      "outputs": [
        {
          "internalType": "contract MultiSigWallet",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfMultiSigs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x894c19747463da086d53bbc5d0d1cbe6dba15fba51d0cfb26dc63bc9afc06d4a",
  "receipt": {
    "to": null,
    "from": "0x8406A51A0E1B5F52Ff61226773e6328e5Da5d964",
    "contractAddress": "0xE7147659587cc99306ADbA141bE013fd71b25cd3",
    "transactionIndex": 1,
    "gasUsed": "1781404",
    "logsBloom": "0x
    "blockHash": "0xd19785942fba2e819c3b15948cf665d892a23abed9a1d7a451f85faa5cc5cee8",
    "transactionHash": "0x894c19747463da086d53bbc5d0d1cbe6dba15fba51d0cfb26dc63bc9afc06d4a",
    "logs": [],
    "blockNumber": 17720283,
    "cumulativeGasUsed": "1827942",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "79e3fc060a00acc4a2712c36a917bdd1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"signaturesRequired\",\"type\":\"uint256\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"signaturesRequired\",\"type\":\"uint256\"}],\"name\":\"Owners\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_signaturesRequired\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_signaturesRequired\",\"type\":\"uint256\"}],\"name\":\"emitOwners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getMultiSig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"multiSigAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"signaturesRequired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"multiSigs\",\"outputs\":[{\"internalType\":\"contract MultiSigWallet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfMultiSigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MultiSigFactory.sol\":\"MultiSigFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"contracts/MultiSigFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./MultiSigWallet.sol\\\";\\n\\ncontract MultiSigFactory {\\n  MultiSigWallet[] public multiSigs;\\n  mapping(address => bool) existsMultiSig;\\n\\n  event Create(\\n    uint indexed contractId,\\n    address indexed contractAddress,\\n    address creator,\\n    address[] owners,\\n    uint signaturesRequired\\n  );\\n\\n  event Owners(\\n    address indexed contractAddress,\\n    address[] owners,\\n    uint256 indexed signaturesRequired\\n  );\\n\\n\\n  constructor() {}\\n\\n  modifier onlyRegistered() {\\n    require(existsMultiSig[msg.sender], \\\"caller not registered to use logger\\\");\\n    _;\\n  }\\n\\n  function emitOwners(\\n    address _contractAddress,\\n    address[] memory _owners,\\n    uint256 _signaturesRequired\\n  ) external onlyRegistered {\\n    emit Owners(_contractAddress, _owners, _signaturesRequired);\\n  }\\n\\n  function create(\\n    uint256 _chainId,\\n    address[] memory _owners,\\n    uint _signaturesRequired\\n  ) public payable {\\n    uint id = numberOfMultiSigs();\\n\\n    MultiSigWallet multiSig = (new MultiSigWallet){value: msg.value}(_chainId, _owners, _signaturesRequired, address(this));\\n    multiSigs.push(multiSig);\\n    existsMultiSig[address(multiSig)] = true;\\n\\n    emit Create(id, address(multiSig), msg.sender, _owners, _signaturesRequired);\\n    emit Owners(address(multiSig), _owners, _signaturesRequired);\\n  }\\n\\n  function numberOfMultiSigs() public view returns(uint) {\\n    return multiSigs.length;\\n  }\\n\\n  function getMultiSig(uint256 _index)\\n    public\\n    view\\n    returns (\\n      address multiSigAddress,\\n      uint signaturesRequired,\\n      uint balance\\n    ) {\\n      MultiSigWallet multiSig = multiSigs[_index];\\n      return (address(multiSig), multiSig.signaturesRequired(), address(multiSig).balance);\\n    }\\n}\",\"keccak256\":\"0x0c82b6c72bb34a26c82be63bbcc20817cd29a2c78d8622d37d2c48cd0d690fa3\",\"license\":\"MIT\"},\"contracts/MultiSigWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n// never forget the OG simple sig wallet: https://github.com/christianlundkvist/simple-multisig/blob/master/contracts/SimpleMultiSig.sol\\n\\npragma experimental ABIEncoderV2;\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./MultiSigFactory.sol\\\";\\n\\ncontract MultiSigWallet {\\n\\tusing ECDSA for bytes32;\\n  MultiSigFactory private multiSigFactory;\\n\\n\\tevent Deposit(address indexed sender, uint amount, uint balance);\\n\\tevent ExecuteTransaction( address indexed owner, address payable to, uint256 value, bytes data, uint256 nonce, bytes32 hash, bytes result);\\n\\tevent Owner( address indexed owner, bool added);\\n\\n\\tmapping(address => bool) public isOwner;\\n\\n  address[] public owners;\\n\\n\\tuint public signaturesRequired;\\n\\tuint public nonce;\\n\\tuint public chainId;\\n\\n  modifier onlyOwner() {\\n    require(isOwner[msg.sender], \\\"Not owner\\\");\\n    _;\\n  }\\n\\n  modifier onlySelf() {\\n    require(msg.sender == address(this), \\\"Not Self\\\");\\n    _;\\n  }\\n\\n  modifier requireNonZeroSignatures(uint _signaturesRequired) {\\n    require(_signaturesRequired > 0, \\\"Must be non-zero sigs required\\\");\\n    _;\\n  }\\n\\n  constructor(uint256 _chainId, address[] memory _owners, uint _signaturesRequired, address _factory) payable requireNonZeroSignatures(_signaturesRequired) {\\n    multiSigFactory = MultiSigFactory(_factory);\\n    signaturesRequired = _signaturesRequired;\\n    for (uint i = 0; i < _owners.length; i++) {\\n      address owner = _owners[i];\\n\\n      require(owner!=address(0), \\\"constructor: zero address\\\");\\n      require(!isOwner[owner], \\\"constructor: owner not unique\\\");\\n\\n      isOwner[owner] = true;\\n      owners.push(owner);\\n\\n      emit Owner(owner,isOwner[owner]);\\n    }\\n\\n    chainId = _chainId;\\n  }\\n\\n  function addSigner(address newSigner, uint256 newSignaturesRequired) public onlySelf requireNonZeroSignatures(newSignaturesRequired) {\\n    require(newSigner != address(0), \\\"addSigner: zero address\\\");\\n    require(!isOwner[newSigner], \\\"addSigner: owner not unique\\\");\\n\\n    isOwner[newSigner] = true;\\n    owners.push(newSigner);\\n    signaturesRequired = newSignaturesRequired;\\n\\n    emit Owner(newSigner, isOwner[newSigner]);\\n    multiSigFactory.emitOwners(address(this), owners, newSignaturesRequired);\\n  }\\n\\n  function removeSigner(address oldSigner, uint256 newSignaturesRequired) public onlySelf requireNonZeroSignatures(newSignaturesRequired) {\\n    require(isOwner[oldSigner], \\\"removeSigner: not owner\\\");\\n\\n     _removeOwner(oldSigner);\\n    signaturesRequired = newSignaturesRequired;\\n\\n    emit Owner(oldSigner, isOwner[oldSigner]);\\n    multiSigFactory.emitOwners(address(this), owners, newSignaturesRequired);\\n  }\\n\\n  function _removeOwner(address _oldSigner) private {\\n    isOwner[_oldSigner] = false;\\n    uint256 ownersLength = owners.length;\\n    address[] memory poppedOwners = new address[](owners.length);\\n    for (uint256 i = ownersLength - 1; i >= 0; i--) {\\n      if (owners[i] != _oldSigner) {\\n        poppedOwners[i] = owners[i];\\n        owners.pop();\\n      } else {\\n        owners.pop();\\n        for (uint256 j = i+1; j <= ownersLength - 1; j++) {\\n          owners.push(poppedOwners[j]);\\n        }\\n        return;\\n      }\\n    }\\n  }\\n\\n  function updateSignaturesRequired(uint256 newSignaturesRequired) public onlySelf requireNonZeroSignatures(newSignaturesRequired) {\\n    signaturesRequired = newSignaturesRequired;\\n  }\\n\\n  function executeTransaction( address payable to, uint256 value, bytes memory data, bytes[] memory signatures)\\n      public\\n      onlyOwner\\n      returns (bytes memory)\\n  {\\n    bytes32 _hash =  getTransactionHash(nonce, to, value, data);\\n\\n    nonce++;\\n\\n    uint256 validSignatures;\\n    address duplicateGuard;\\n    for (uint i = 0; i < signatures.length; i++) {\\n        address recovered = recover(_hash, signatures[i]);\\n        require(recovered > duplicateGuard, \\\"executeTransaction: duplicate or unordered signatures\\\");\\n        duplicateGuard = recovered;\\n\\n        if (isOwner[recovered]) {\\n          validSignatures++;\\n        }\\n    }\\n\\n    require(validSignatures >= signaturesRequired, \\\"executeTransaction: not enough valid signatures\\\");\\n\\n    (bool success, bytes memory result) = to.call{value: value}(data);\\n    require(success, \\\"executeTransaction: tx failed\\\");\\n\\n    emit ExecuteTransaction(msg.sender, to, value, data, nonce-1, _hash, result);\\n    return result;\\n  }\\n\\n  function getTransactionHash( uint256 _nonce, address to, uint256 value, bytes memory data ) public view returns (bytes32) {\\n    return keccak256(abi.encodePacked(address(this), chainId, _nonce, to, value, data));\\n  }\\n\\n  function recover(bytes32 _hash, bytes memory _signature) public pure returns (address) {\\n    return _hash.toEthSignedMessageHash().recover(_signature);\\n  }\\n\\n  receive() payable external {\\n    emit Deposit(msg.sender, msg.value, address(this).balance);\\n  }\\n}\\n\",\"keccak256\":\"0x938db2e9712f77bc5f77460d2fd68b15862227635e52d91ce0cf39a00ff1d5b9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611f4e806100206000396000f3fe608060405260043610620000505760003560e01c80632f1d8a2314620000555780639567e7ed1462000079578063bedf429414620000c4578063c67fdb9414620000eb578063f931486b1462000129575b600080fd5b3480156200006257600080fd5b506000546040519081526020015b60405180910390f35b3480156200008657600080fd5b506200009e6200009836600462000428565b62000140565b604080516001600160a01b03909416845260208401929092529082015260600162000070565b348015620000d157600080fd5b50620000e9620000e336600462000523565b620001fa565b005b348015620000f857600080fd5b50620001106200010a36600462000428565b620002b3565b6040516001600160a01b03909116815260200162000070565b620000e96200013a36600462000580565b620002de565b600080600080600085815481106200015c576200015c620005b5565b9060005260206000200160009054906101000a90046001600160a01b0316905080816001600160a01b031663ce757d296040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001bc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001e29190620005cb565b90945092506001600160a01b03163190509193909250565b3360009081526001602052604090205460ff166200026a5760405162461bcd60e51b815260206004820152602360248201527f63616c6c6572206e6f74207265676973746572656420746f20757365206c6f6760448201526233b2b960e91b606482015260840160405180910390fd5b80836001600160a01b03167f767d0acba39e4cf96349b168ed9d32211fb4940be0f3549d31154941785c9b6a84604051620002a691906200062b565b60405180910390a3505050565b60008181548110620002c457600080fd5b6000918252602090912001546001600160a01b0316905081565b60008054905060003485858530604051620002f9906200041a565b62000308949392919062000647565b6040518091039082f090508015801562000326573d6000803e3d6000fd5b5060008054600180820183557f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390910180546001600160a01b0319166001600160a01b0385169081179091558083526020829052604092839020805460ff191690921790915590519192509083907f8e7afa2cfd444b14c15f2c5a27041b913dfe206302b391e01c241cb58ade033790620003c79033908990899062000683565b60405180910390a382816001600160a01b03167f767d0acba39e4cf96349b168ed9d32211fb4940be0f3549d31154941785c9b6a866040516200040b91906200062b565b60405180910390a35050505050565b61185f80620006ba83390190565b6000602082840312156200043b57600080fd5b5035919050565b80356001600160a01b03811681146200045a57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200048757600080fd5b8135602067ffffffffffffffff80831115620004a757620004a76200045f565b8260051b604051601f19603f83011681018181108482111715620004cf57620004cf6200045f565b604052938452858101830193838101925087851115620004ee57600080fd5b83870191505b848210156200051857620005088262000442565b83529183019190830190620004f4565b979650505050505050565b6000806000606084860312156200053957600080fd5b620005448462000442565b9250602084013567ffffffffffffffff8111156200056157600080fd5b6200056f8682870162000475565b925050604084013590509250925092565b6000806000606084860312156200059657600080fd5b83359250602084013567ffffffffffffffff8111156200056157600080fd5b634e487b7160e01b600052603260045260246000fd5b600060208284031215620005de57600080fd5b5051919050565b600081518084526020808501945080840160005b83811015620006205781516001600160a01b031687529582019590820190600101620005f9565b509495945050505050565b602081526000620006406020830184620005e5565b9392505050565b848152608060208201526000620006626080830186620005e5565b6040830194909452506001600160a01b039190911660609091015292915050565b6001600160a01b0384168152606060208201819052600090620006a990830185620005e5565b905082604083015294935050505056fe60806040526040516200185f3803806200185f83398101604081905262000026916200028e565b81600081116200007d5760405162461bcd60e51b815260206004820152601e60248201527f4d757374206265206e6f6e2d7a65726f2073696773207265717569726564000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b03841617815560038490555b845181101562000249576000858281518110620000bf57620000bf6200038a565b6020026020010151905060006001600160a01b0316816001600160a01b0316036200012d5760405162461bcd60e51b815260206004820152601960248201527f636f6e7374727563746f723a207a65726f206164647265737300000000000000604482015260640162000074565b6001600160a01b03811660009081526001602052604090205460ff1615620001985760405162461bcd60e51b815260206004820152601d60248201527f636f6e7374727563746f723a206f776e6572206e6f7420756e69717565000000604482015260640162000074565b6001600160a01b038116600081815260016020818152604092839020805460ff1916831781556002805493840190557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90920180546001600160a01b031916851790559054915160ff909216151582527ffe545f48304051c4029eb2da9927daa59da0414b4b084fdceaf2955b609b899e910160405180910390a250806200024081620003a0565b9150506200009e565b50505060059290925550620003c89050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200028957600080fd5b919050565b60008060008060808587031215620002a557600080fd5b8451602080870151919550906001600160401b0380821115620002c757600080fd5b818801915088601f830112620002dc57600080fd5b815181811115620002f157620002f16200025b565b8060051b604051601f19603f830116810181811085821117156200031957620003196200025b565b60405291825284820192508381018501918b8311156200033857600080fd5b938501935b828510156200036157620003518562000271565b845293850193928501926200033d565b809850505050505050604085015191506200037f6060860162000271565b905092959194509250565b634e487b7160e01b600052603260045260246000fd5b600060018201620003c157634e487b7160e01b600052601160045260246000fd5b5060010190565b61148780620003d86000396000f3fe6080604052600436106100a05760003560e01c8063545a4a3c11610064578063545a4a3c146101c557806365af1bed146101f35780639a8a059214610213578063affed0e014610229578063ce757d291461023f578063d1fbffa01461025557600080fd5b8063025e7c27146100e657806319045a25146101235780632f54bf6e146101435780633034a742146101835780633bad5426146101a557600080fd5b366100e1576040805134815247602082015233917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a2005b600080fd5b3480156100f257600080fd5b50610106610101366004610ed3565b610282565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561012f57600080fd5b5061010661013e366004610fa3565b6102ac565b34801561014f57600080fd5b5061017361015e366004610fff565b60016020526000908152604090205460ff1681565b604051901515815260200161011a565b34801561018f57600080fd5b506101a361019e366004610ed3565b610318565b005b3480156101b157600080fd5b506101a36101c0366004611023565b610367565b3480156101d157600080fd5b506101e56101e036600461104f565b6104dd565b60405190815260200161011a565b3480156101ff57600080fd5b506101a361020e366004611023565b61051c565b34801561021f57600080fd5b506101e560055481565b34801561023557600080fd5b506101e560045481565b34801561024b57600080fd5b506101e560035481565b34801561026157600080fd5b506102756102703660046110b2565b6106b8565b60405161011a9190611206565b6002818154811061029257600080fd5b6000918252602090912001546001600160a01b0316905081565b600061030f82610309856040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b906109aa565b90505b92915050565b3330146103405760405162461bcd60e51b815260040161033790611219565b60405180910390fd5b80600081116103615760405162461bcd60e51b81526004016103379061123b565b50600355565b3330146103865760405162461bcd60e51b815260040161033790611219565b80600081116103a75760405162461bcd60e51b81526004016103379061123b565b6001600160a01b03831660009081526001602052604090205460ff1661040f5760405162461bcd60e51b815260206004820152601760248201527f72656d6f76655369676e65723a206e6f74206f776e65720000000000000000006044820152606401610337565b610418836109ce565b60038290556001600160a01b03831660008181526001602090815260409182902054915160ff909216151582527ffe545f48304051c4029eb2da9927daa59da0414b4b084fdceaf2955b609b899e91015b60405180910390a2600054604051632fb7d0a560e21b81526001600160a01b039091169063bedf4294906104a69030906002908790600401611272565b600060405180830381600087803b1580156104c057600080fd5b505af11580156104d4573d6000803e3d6000fd5b50505050505050565b600030600554868686866040516020016104fc969594939291906112da565b604051602081830303815290604052805190602001209050949350505050565b33301461053b5760405162461bcd60e51b815260040161033790611219565b806000811161055c5760405162461bcd60e51b81526004016103379061123b565b6001600160a01b0383166105b25760405162461bcd60e51b815260206004820152601760248201527f6164645369676e65723a207a65726f20616464726573730000000000000000006044820152606401610337565b6001600160a01b03831660009081526001602052604090205460ff161561061b5760405162461bcd60e51b815260206004820152601b60248201527f6164645369676e65723a206f776e6572206e6f7420756e6971756500000000006044820152606401610337565b6001600160a01b038316600081815260016020818152604092839020805460ff1916831781556002805493840190557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90920180546001600160a01b0319168517905560038690559054915160ff909216151582527ffe545f48304051c4029eb2da9927daa59da0414b4b084fdceaf2955b609b899e9101610469565b3360009081526001602052604090205460609060ff166107065760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b6044820152606401610337565b60006107166004548787876104dd565b6004805491925060006107288361134b565b919050555060008060005b85518110156108295760006107618588848151811061075457610754611364565b60200260200101516102ac565b9050826001600160a01b0316816001600160a01b0316116107e25760405162461bcd60e51b815260206004820152603560248201527f657865637574655472616e73616374696f6e3a206475706c6963617465206f7260448201527420756e6f726465726564207369676e61747572657360581b6064820152608401610337565b6001600160a01b038116600090815260016020526040902054909250829060ff161561081657836108128161134b565b9450505b50806108218161134b565b915050610733565b506003548210156108945760405162461bcd60e51b815260206004820152602f60248201527f657865637574655472616e73616374696f6e3a206e6f7420656e6f756768207660448201526e616c6964207369676e61747572657360881b6064820152608401610337565b600080896001600160a01b031689896040516108b0919061137a565b60006040518083038185875af1925050503d80600081146108ed576040519150601f19603f3d011682016040523d82523d6000602084013e6108f2565b606091505b5091509150816109445760405162461bcd60e51b815260206004820152601d60248201527f657865637574655472616e73616374696f6e3a207478206661696c65640000006044820152606401610337565b336001600160a01b03167f9053e9ec105157fac8c9308d63e6b22be5f50fe915a3e567419b624311a02d748b8b8b60016004546109819190611396565b8a87604051610995969594939291906113a9565b60405180910390a29998505050505050505050565b60008060006109b98585610be8565b915091506109c681610c2d565b509392505050565b6001600160a01b0381166000908152600160205260408120805460ff19169055600254908167ffffffffffffffff811115610a0b57610a0b610eec565b604051908082528060200260200182016040528015610a34578160200160208202803683370190505b5090506000610a44600184611396565b90505b836001600160a01b031660028281548110610a6457610a64611364565b6000918252602090912001546001600160a01b031614610b195760028181548110610a9157610a91611364565b9060005260206000200160009054906101000a90046001600160a01b0316828281518110610ac157610ac1611364565b60200260200101906001600160a01b031690816001600160a01b0316815250506002805480610af257610af26113fb565b600082815260209020810160001990810180546001600160a01b0319169055019055610bd6565b6002805480610b2a57610b2a6113fb565b600082815260208120820160001990810180546001600160a01b0319169055909101909155610b5a826001611411565b90505b610b68600185611396565b8111610bcf576002838281518110610b8257610b82611364565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580610bc78161134b565b915050610b5d565b5050505050565b80610be081611424565b915050610a47565b6000808251604103610c1e5760208301516040840151606085015160001a610c1287828585610de6565b94509450505050610c26565b506000905060025b9250929050565b6000816004811115610c4157610c4161143b565b03610c495750565b6001816004811115610c5d57610c5d61143b565b03610caa5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610337565b6002816004811115610cbe57610cbe61143b565b03610d0b5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610337565b6003816004811115610d1f57610d1f61143b565b03610d775760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610337565b6004816004811115610d8b57610d8b61143b565b03610de35760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610337565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610e1d5750600090506003610eca565b8460ff16601b14158015610e3557508460ff16601c14155b15610e465750600090506004610eca565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610e9a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610ec357600060019250925050610eca565b9150600090505b94509492505050565b600060208284031215610ee557600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610f2b57610f2b610eec565b604052919050565b600082601f830112610f4457600080fd5b813567ffffffffffffffff811115610f5e57610f5e610eec565b610f71601f8201601f1916602001610f02565b818152846020838601011115610f8657600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215610fb657600080fd5b82359150602083013567ffffffffffffffff811115610fd457600080fd5b610fe085828601610f33565b9150509250929050565b6001600160a01b0381168114610de357600080fd5b60006020828403121561101157600080fd5b813561101c81610fea565b9392505050565b6000806040838503121561103657600080fd5b823561104181610fea565b946020939093013593505050565b6000806000806080858703121561106557600080fd5b84359350602085013561107781610fea565b925060408501359150606085013567ffffffffffffffff81111561109a57600080fd5b6110a687828801610f33565b91505092959194509250565b600080600080608085870312156110c857600080fd5b84356110d381610fea565b93506020858101359350604086013567ffffffffffffffff808211156110f857600080fd5b61110489838a01610f33565b9450606088013591508082111561111a57600080fd5b818801915088601f83011261112e57600080fd5b81358181111561114057611140610eec565b8060051b61114f858201610f02565b918252838101850191858101908c84111561116957600080fd5b86860192505b838310156111a5578235858111156111875760008081fd5b6111958e89838a0101610f33565b835250918601919086019061116f565b999c989b5096995050505050505050565b60005b838110156111d15781810151838201526020016111b9565b50506000910152565b600081518084526111f28160208601602086016111b6565b601f01601f19169290920160200192915050565b60208152600061030f60208301846111da565b6020808252600890820152672737ba1029b2b63360c11b604082015260600190565b6020808252601e908201527f4d757374206265206e6f6e2d7a65726f20736967732072657175697265640000604082015260600190565b60006060820160018060a01b03808716845260206060818601528287548085526080870191508860005282600020945060005b818110156112c35785548516835260019586019592840192016112a5565b505080945050505050826040830152949350505050565b60006bffffffffffffffffffffffff19808960601b168352876014840152866034840152808660601b1660548401525083606883015282516113238160888501602087016111b6565b91909101608801979650505050505050565b634e487b7160e01b600052601160045260246000fd5b60006001820161135d5761135d611335565b5060010190565b634e487b7160e01b600052603260045260246000fd5b6000825161138c8184602087016111b6565b9190910192915050565b8181038181111561031257610312611335565b60018060a01b038716815285602082015260c0604082015260006113d060c08301876111da565b85606084015284608084015282810360a08401526113ee81856111da565b9998505050505050505050565b634e487b7160e01b600052603160045260246000fd5b8082018082111561031257610312611335565b60008161143357611433611335565b506000190190565b634e487b7160e01b600052602160045260246000fdfea26469706673582212202b2adb2d5bd2bfc6f9673b3d548f2b84f098ccb98b9054657bc6eaf22606466564736f6c63430008100033a2646970667358221220f3851fb1349f0c5dfb09ad1203376e8cd0dfc2346eb62c70ee9c0b04fdaf14f864736f6c63430008100033",
  "deployedBytecode": "0x608060405260043610620000505760003560e01c80632f1d8a2314620000555780639567e7ed1462000079578063bedf429414620000c4578063c67fdb9414620000eb578063f931486b1462000129575b600080fd5b3480156200006257600080fd5b506000546040519081526020015b60405180910390f35b3480156200008657600080fd5b506200009e6200009836600462000428565b62000140565b604080516001600160a01b03909416845260208401929092529082015260600162000070565b348015620000d157600080fd5b50620000e9620000e336600462000523565b620001fa565b005b348015620000f857600080fd5b50620001106200010a36600462000428565b620002b3565b6040516001600160a01b03909116815260200162000070565b620000e96200013a36600462000580565b620002de565b600080600080600085815481106200015c576200015c620005b5565b9060005260206000200160009054906101000a90046001600160a01b0316905080816001600160a01b031663ce757d296040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001bc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001e29190620005cb565b90945092506001600160a01b03163190509193909250565b3360009081526001602052604090205460ff166200026a5760405162461bcd60e51b815260206004820152602360248201527f63616c6c6572206e6f74207265676973746572656420746f20757365206c6f6760448201526233b2b960e91b606482015260840160405180910390fd5b80836001600160a01b03167f767d0acba39e4cf96349b168ed9d32211fb4940be0f3549d31154941785c9b6a84604051620002a691906200062b565b60405180910390a3505050565b60008181548110620002c457600080fd5b6000918252602090912001546001600160a01b0316905081565b60008054905060003485858530604051620002f9906200041a565b62000308949392919062000647565b6040518091039082f090508015801562000326573d6000803e3d6000fd5b5060008054600180820183557f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390910180546001600160a01b0319166001600160a01b0385169081179091558083526020829052604092839020805460ff191690921790915590519192509083907f8e7afa2cfd444b14c15f2c5a27041b913dfe206302b391e01c241cb58ade033790620003c79033908990899062000683565b60405180910390a382816001600160a01b03167f767d0acba39e4cf96349b168ed9d32211fb4940be0f3549d31154941785c9b6a866040516200040b91906200062b565b60405180910390a35050505050565b61185f80620006ba83390190565b6000602082840312156200043b57600080fd5b5035919050565b80356001600160a01b03811681146200045a57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200048757600080fd5b8135602067ffffffffffffffff80831115620004a757620004a76200045f565b8260051b604051601f19603f83011681018181108482111715620004cf57620004cf6200045f565b604052938452858101830193838101925087851115620004ee57600080fd5b83870191505b848210156200051857620005088262000442565b83529183019190830190620004f4565b979650505050505050565b6000806000606084860312156200053957600080fd5b620005448462000442565b9250602084013567ffffffffffffffff8111156200056157600080fd5b6200056f8682870162000475565b925050604084013590509250925092565b6000806000606084860312156200059657600080fd5b83359250602084013567ffffffffffffffff8111156200056157600080fd5b634e487b7160e01b600052603260045260246000fd5b600060208284031215620005de57600080fd5b5051919050565b600081518084526020808501945080840160005b83811015620006205781516001600160a01b031687529582019590820190600101620005f9565b509495945050505050565b602081526000620006406020830184620005e5565b9392505050565b848152608060208201526000620006626080830186620005e5565b6040830194909452506001600160a01b039190911660609091015292915050565b6001600160a01b0384168152606060208201819052600090620006a990830185620005e5565b905082604083015294935050505056fe60806040526040516200185f3803806200185f83398101604081905262000026916200028e565b81600081116200007d5760405162461bcd60e51b815260206004820152601e60248201527f4d757374206265206e6f6e2d7a65726f2073696773207265717569726564000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b03841617815560038490555b845181101562000249576000858281518110620000bf57620000bf6200038a565b6020026020010151905060006001600160a01b0316816001600160a01b0316036200012d5760405162461bcd60e51b815260206004820152601960248201527f636f6e7374727563746f723a207a65726f206164647265737300000000000000604482015260640162000074565b6001600160a01b03811660009081526001602052604090205460ff1615620001985760405162461bcd60e51b815260206004820152601d60248201527f636f6e7374727563746f723a206f776e6572206e6f7420756e69717565000000604482015260640162000074565b6001600160a01b038116600081815260016020818152604092839020805460ff1916831781556002805493840190557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90920180546001600160a01b031916851790559054915160ff909216151582527ffe545f48304051c4029eb2da9927daa59da0414b4b084fdceaf2955b609b899e910160405180910390a250806200024081620003a0565b9150506200009e565b50505060059290925550620003c89050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200028957600080fd5b919050565b60008060008060808587031215620002a557600080fd5b8451602080870151919550906001600160401b0380821115620002c757600080fd5b818801915088601f830112620002dc57600080fd5b815181811115620002f157620002f16200025b565b8060051b604051601f19603f830116810181811085821117156200031957620003196200025b565b60405291825284820192508381018501918b8311156200033857600080fd5b938501935b828510156200036157620003518562000271565b845293850193928501926200033d565b809850505050505050604085015191506200037f6060860162000271565b905092959194509250565b634e487b7160e01b600052603260045260246000fd5b600060018201620003c157634e487b7160e01b600052601160045260246000fd5b5060010190565b61148780620003d86000396000f3fe6080604052600436106100a05760003560e01c8063545a4a3c11610064578063545a4a3c146101c557806365af1bed146101f35780639a8a059214610213578063affed0e014610229578063ce757d291461023f578063d1fbffa01461025557600080fd5b8063025e7c27146100e657806319045a25146101235780632f54bf6e146101435780633034a742146101835780633bad5426146101a557600080fd5b366100e1576040805134815247602082015233917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a2005b600080fd5b3480156100f257600080fd5b50610106610101366004610ed3565b610282565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561012f57600080fd5b5061010661013e366004610fa3565b6102ac565b34801561014f57600080fd5b5061017361015e366004610fff565b60016020526000908152604090205460ff1681565b604051901515815260200161011a565b34801561018f57600080fd5b506101a361019e366004610ed3565b610318565b005b3480156101b157600080fd5b506101a36101c0366004611023565b610367565b3480156101d157600080fd5b506101e56101e036600461104f565b6104dd565b60405190815260200161011a565b3480156101ff57600080fd5b506101a361020e366004611023565b61051c565b34801561021f57600080fd5b506101e560055481565b34801561023557600080fd5b506101e560045481565b34801561024b57600080fd5b506101e560035481565b34801561026157600080fd5b506102756102703660046110b2565b6106b8565b60405161011a9190611206565b6002818154811061029257600080fd5b6000918252602090912001546001600160a01b0316905081565b600061030f82610309856040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b906109aa565b90505b92915050565b3330146103405760405162461bcd60e51b815260040161033790611219565b60405180910390fd5b80600081116103615760405162461bcd60e51b81526004016103379061123b565b50600355565b3330146103865760405162461bcd60e51b815260040161033790611219565b80600081116103a75760405162461bcd60e51b81526004016103379061123b565b6001600160a01b03831660009081526001602052604090205460ff1661040f5760405162461bcd60e51b815260206004820152601760248201527f72656d6f76655369676e65723a206e6f74206f776e65720000000000000000006044820152606401610337565b610418836109ce565b60038290556001600160a01b03831660008181526001602090815260409182902054915160ff909216151582527ffe545f48304051c4029eb2da9927daa59da0414b4b084fdceaf2955b609b899e91015b60405180910390a2600054604051632fb7d0a560e21b81526001600160a01b039091169063bedf4294906104a69030906002908790600401611272565b600060405180830381600087803b1580156104c057600080fd5b505af11580156104d4573d6000803e3d6000fd5b50505050505050565b600030600554868686866040516020016104fc969594939291906112da565b604051602081830303815290604052805190602001209050949350505050565b33301461053b5760405162461bcd60e51b815260040161033790611219565b806000811161055c5760405162461bcd60e51b81526004016103379061123b565b6001600160a01b0383166105b25760405162461bcd60e51b815260206004820152601760248201527f6164645369676e65723a207a65726f20616464726573730000000000000000006044820152606401610337565b6001600160a01b03831660009081526001602052604090205460ff161561061b5760405162461bcd60e51b815260206004820152601b60248201527f6164645369676e65723a206f776e6572206e6f7420756e6971756500000000006044820152606401610337565b6001600160a01b038316600081815260016020818152604092839020805460ff1916831781556002805493840190557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90920180546001600160a01b0319168517905560038690559054915160ff909216151582527ffe545f48304051c4029eb2da9927daa59da0414b4b084fdceaf2955b609b899e9101610469565b3360009081526001602052604090205460609060ff166107065760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b6044820152606401610337565b60006107166004548787876104dd565b6004805491925060006107288361134b565b919050555060008060005b85518110156108295760006107618588848151811061075457610754611364565b60200260200101516102ac565b9050826001600160a01b0316816001600160a01b0316116107e25760405162461bcd60e51b815260206004820152603560248201527f657865637574655472616e73616374696f6e3a206475706c6963617465206f7260448201527420756e6f726465726564207369676e61747572657360581b6064820152608401610337565b6001600160a01b038116600090815260016020526040902054909250829060ff161561081657836108128161134b565b9450505b50806108218161134b565b915050610733565b506003548210156108945760405162461bcd60e51b815260206004820152602f60248201527f657865637574655472616e73616374696f6e3a206e6f7420656e6f756768207660448201526e616c6964207369676e61747572657360881b6064820152608401610337565b600080896001600160a01b031689896040516108b0919061137a565b60006040518083038185875af1925050503d80600081146108ed576040519150601f19603f3d011682016040523d82523d6000602084013e6108f2565b606091505b5091509150816109445760405162461bcd60e51b815260206004820152601d60248201527f657865637574655472616e73616374696f6e3a207478206661696c65640000006044820152606401610337565b336001600160a01b03167f9053e9ec105157fac8c9308d63e6b22be5f50fe915a3e567419b624311a02d748b8b8b60016004546109819190611396565b8a87604051610995969594939291906113a9565b60405180910390a29998505050505050505050565b60008060006109b98585610be8565b915091506109c681610c2d565b509392505050565b6001600160a01b0381166000908152600160205260408120805460ff19169055600254908167ffffffffffffffff811115610a0b57610a0b610eec565b604051908082528060200260200182016040528015610a34578160200160208202803683370190505b5090506000610a44600184611396565b90505b836001600160a01b031660028281548110610a6457610a64611364565b6000918252602090912001546001600160a01b031614610b195760028181548110610a9157610a91611364565b9060005260206000200160009054906101000a90046001600160a01b0316828281518110610ac157610ac1611364565b60200260200101906001600160a01b031690816001600160a01b0316815250506002805480610af257610af26113fb565b600082815260209020810160001990810180546001600160a01b0319169055019055610bd6565b6002805480610b2a57610b2a6113fb565b600082815260208120820160001990810180546001600160a01b0319169055909101909155610b5a826001611411565b90505b610b68600185611396565b8111610bcf576002838281518110610b8257610b82611364565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580610bc78161134b565b915050610b5d565b5050505050565b80610be081611424565b915050610a47565b6000808251604103610c1e5760208301516040840151606085015160001a610c1287828585610de6565b94509450505050610c26565b506000905060025b9250929050565b6000816004811115610c4157610c4161143b565b03610c495750565b6001816004811115610c5d57610c5d61143b565b03610caa5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610337565b6002816004811115610cbe57610cbe61143b565b03610d0b5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610337565b6003816004811115610d1f57610d1f61143b565b03610d775760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610337565b6004816004811115610d8b57610d8b61143b565b03610de35760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610337565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610e1d5750600090506003610eca565b8460ff16601b14158015610e3557508460ff16601c14155b15610e465750600090506004610eca565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610e9a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610ec357600060019250925050610eca565b9150600090505b94509492505050565b600060208284031215610ee557600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610f2b57610f2b610eec565b604052919050565b600082601f830112610f4457600080fd5b813567ffffffffffffffff811115610f5e57610f5e610eec565b610f71601f8201601f1916602001610f02565b818152846020838601011115610f8657600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215610fb657600080fd5b82359150602083013567ffffffffffffffff811115610fd457600080fd5b610fe085828601610f33565b9150509250929050565b6001600160a01b0381168114610de357600080fd5b60006020828403121561101157600080fd5b813561101c81610fea565b9392505050565b6000806040838503121561103657600080fd5b823561104181610fea565b946020939093013593505050565b6000806000806080858703121561106557600080fd5b84359350602085013561107781610fea565b925060408501359150606085013567ffffffffffffffff81111561109a57600080fd5b6110a687828801610f33565b91505092959194509250565b600080600080608085870312156110c857600080fd5b84356110d381610fea565b93506020858101359350604086013567ffffffffffffffff808211156110f857600080fd5b61110489838a01610f33565b9450606088013591508082111561111a57600080fd5b818801915088601f83011261112e57600080fd5b81358181111561114057611140610eec565b8060051b61114f858201610f02565b918252838101850191858101908c84111561116957600080fd5b86860192505b838310156111a5578235858111156111875760008081fd5b6111958e89838a0101610f33565b835250918601919086019061116f565b999c989b5096995050505050505050565b60005b838110156111d15781810151838201526020016111b9565b50506000910152565b600081518084526111f28160208601602086016111b6565b601f01601f19169290920160200192915050565b60208152600061030f60208301846111da565b6020808252600890820152672737ba1029b2b63360c11b604082015260600190565b6020808252601e908201527f4d757374206265206e6f6e2d7a65726f20736967732072657175697265640000604082015260600190565b60006060820160018060a01b03808716845260206060818601528287548085526080870191508860005282600020945060005b818110156112c35785548516835260019586019592840192016112a5565b505080945050505050826040830152949350505050565b60006bffffffffffffffffffffffff19808960601b168352876014840152866034840152808660601b1660548401525083606883015282516113238160888501602087016111b6565b91909101608801979650505050505050565b634e487b7160e01b600052601160045260246000fd5b60006001820161135d5761135d611335565b5060010190565b634e487b7160e01b600052603260045260246000fd5b6000825161138c8184602087016111b6565b9190910192915050565b8181038181111561031257610312611335565b60018060a01b038716815285602082015260c0604082015260006113d060c08301876111da565b85606084015284608084015282810360a08401526113ee81856111da565b9998505050505050505050565b634e487b7160e01b600052603160045260246000fd5b8082018082111561031257610312611335565b60008161143357611433611335565b506000190190565b634e487b7160e01b600052602160045260246000fdfea26469706673582212202b2adb2d5bd2bfc6f9673b3d548f2b84f098ccb98b9054657bc6eaf22606466564736f6c63430008100033a2646970667358221220f3851fb1349f0c5dfb09ad1203376e8cd0dfc2346eb62c70ee9c0b04fdaf14f864736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5301,
        "contract": "contracts/MultiSigFactory.sol:MultiSigFactory",
        "label": "multiSigs",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_contract(MultiSigWallet)6053)dyn_storage"
      },
      {
        "astId": 5305,
        "contract": "contracts/MultiSigFactory.sol:MultiSigFactory",
        "label": "existsMultiSig",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(MultiSigWallet)6053)dyn_storage": {
        "base": "t_contract(MultiSigWallet)6053",
        "encoding": "dynamic_array",
        "label": "contract MultiSigWallet[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(MultiSigWallet)6053": {
        "encoding": "inplace",
        "label": "contract MultiSigWallet",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}
