diff --git a/node_modules/react-ipfs-uploader/dist/index.js b/node_modules/react-ipfs-uploader/dist/index.js
index e259a85..577b09b 100644
--- a/node_modules/react-ipfs-uploader/dist/index.js
+++ b/node_modules/react-ipfs-uploader/dist/index.js
@@ -12,6 +12,13 @@ const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== "undefined" ? (Symbol.it
 
 const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== "undefined" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol("Symbol.asyncIterator"))) : "@@asyncIterator";
 
+const projectId = "25aFLOpT6wwyHnAAvLlpH0oPodw";
+const projectSecret = "4c269229af2949eb44e23418406f1319";
+const auth =
+  "Basic " + Buffer.from(projectId + ":" + projectSecret).toString("base64");
+
+  
+
 // Asynchronously call a function and send errors to recovery continuation
 function _catch(body, recover) {
 	try {
@@ -24,8 +31,17 @@ function _catch(body, recover) {
 	}
 	return result;
 }
+var ipfs = ipfsHttpClient.create({
+  host: "ipfs.infura.io",
+  port: 5001,
+  protocol: "https",
+  apiPath: "/api/v0",
+  headers: {
+    authorization: auth,
+  },
+});
+
 
-var ipfs = ipfsHttpClient.create('https://ipfs.infura.io:5001/api/v0');
 var FileUpload = function FileUpload(_ref) {
   var setUrl = _ref.setUrl;
 
@@ -56,7 +72,7 @@ var FileUpload = function FileUpload(_ref) {
 
       var _temp4 = _catch(function () {
         return Promise.resolve(ipfs.add(file)).then(function (added) {
-          var url = "https://ipfs.infura.io/ipfs/" + added.path;
+          var url = "https://ipfs.infura.io/ipfs/"  added.path;
           setUrl(url);
           setFileUrl(url);
           setUploaded(true);
@@ -112,7 +128,15 @@ var FileUpload = function FileUpload(_ref) {
   }), fileAndUploadButton()));
 };
 
-var ipfs$1 = ipfsHttpClient.create('https://ipfs.infura.io:5001/api/v0');
+var ipfs$1 = ipfsHttpClient.create({
+  host: 'ipfs.infura.io',
+  port: 5001,
+  protocol: 'https',
+  apiPath: '/api/v0',
+  headers: {
+    authorization: auth
+  }
+});
 
 var all = require('it-all');
 
@@ -163,7 +187,7 @@ var MultipleFilesUpload = function MultipleFilesUpload(_ref) {
 
         var FilesHash = results[length - 1].cid._baseCache.get('z');
 
-        var FilesUrl = 'https://ipfs.infura.io/ipfs/' + FilesHash;
+        var FilesUrl = 'https://ipfs.infura.io/ipfs/'  FilesHash;
         setUrl(FilesUrl);
         setFilesUrl(FilesUrl);
         setLoading(false);
@@ -219,7 +243,15 @@ var MultipleFilesUpload = function MultipleFilesUpload(_ref) {
   }), filesAndUploadButton()));
 };
 
-var ipfs$2 = ipfsHttpClient.create('https://ipfs.infura.io:5001/api/v0');
+var ipfs$2 = ipfsHttpClient.create({
+  host: 'ipfs.infura.io',
+  port: 5001,
+  protocol: 'https',
+  apiPath: '/api/v0',
+  headers: {
+    authorization: auth
+  }
+});
 
 var all$1 = require('it-all');
 
@@ -270,7 +302,7 @@ var FolderUpload = function FolderUpload(_ref) {
 
         var FilesHash = results[length - 1].cid._baseCache.get('z');
 
-        var FilesUrl = 'https://ipfs.infura.io/ipfs/' + FilesHash;
+        var FilesUrl = 'https://ipfs.infura.io/ipfs/'  FilesHash;
         console.log(FilesUrl);
         setUrl(FilesUrl);
         setFolderUrl(FilesUrl);
@@ -327,7 +359,15 @@ var FolderUpload = function FolderUpload(_ref) {
   }), filesAndUploadButton()));
 };
 
-var ipfs$3 = ipfsHttpClient.create('https://ipfs.infura.io:5001/api/v0');
+var ipfs$3 = ipfsHttpClient.create({
+  host: 'ipfs.infura.io',
+  port: 5001,
+  protocol: 'https',
+  apiPath: '/api/v0',
+  headers: {
+    authorization: auth
+  }
+});
 var ImageUpload = function ImageUpload(_ref) {
   var setUrl = _ref.setUrl;
 
@@ -368,7 +408,7 @@ var ImageUpload = function ImageUpload(_ref) {
 
       var _temp4 = _catch(function () {
         return Promise.resolve(ipfs$3.add(image)).then(function (added) {
-          var url = "https://ipfs.infura.io/ipfs/" + added.path;
+          var url = "https://ipfs.infura.io/ipfs/"  added.path;
           setUrl(url);
           setImagePreview(url);
           setUploaded(true);
@@ -425,7 +465,15 @@ var ImageUpload = function ImageUpload(_ref) {
   }), previewAndUploadButton()));
 };
 
-var ipfs$4 = ipfsHttpClient.create('https://ipfs.infura.io:5001/api/v0');
+var ipfs$4 = ipfsHttpClient.create({
+  host: 'ipfs.infura.io',
+  port: 5001,
+  protocol: 'https',
+  apiPath: '/api/v0',
+  headers: {
+    authorization: auth
+  }
+});
 var PdfUpload = function PdfUpload(_ref) {
   var setUrl = _ref.setUrl;
 
@@ -466,7 +514,7 @@ var PdfUpload = function PdfUpload(_ref) {
 
       var _temp4 = _catch(function () {
         return Promise.resolve(ipfs$4.add(pdf)).then(function (added) {
-          var url = "https://ipfs.infura.io/ipfs/" + added.path;
+          var url = "https://ipfs.infura.io/ipfs/"  added.path;
           setPdfPreview(url);
           setUrl(url);
           setUploaded(true);
@@ -522,7 +570,15 @@ var PdfUpload = function PdfUpload(_ref) {
   }), previewAndUploadButton()));
 };
 
-var ipfs$5 = ipfsHttpClient.create('https://ipfs.infura.io:5001/api/v0');
+var ipfs$5 = ipfsHttpClient.create({
+  host: 'ipfs.infura.io',
+  port: 5001,
+  protocol: 'https',
+  apiPath: '/api/v0',
+  headers: {
+    authorization: auth
+  }
+});
 var TextUpload = function TextUpload(_ref) {
   var setUrl = _ref.setUrl;
 
@@ -553,7 +609,7 @@ var TextUpload = function TextUpload(_ref) {
 
       var _temp4 = _catch(function () {
         return Promise.resolve(ipfs$5.add(text)).then(function (added) {
-          var url = "https://ipfs.infura.io/ipfs/" + added.path;
+          var url = "https://ipfs.infura.io/ipfs/"  added.path;
           setTextUrl(url);
           setUrl(url);
           setUploaded(true);
diff --git a/node_modules/react-ipfs-uploader/dist/index.modern.js b/node_modules/react-ipfs-uploader/dist/index.modern.js
index 99967df..fe03875 100644
--- a/node_modules/react-ipfs-uploader/dist/index.modern.js
+++ b/node_modules/react-ipfs-uploader/dist/index.modern.js
@@ -9,6 +9,13 @@ const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== "undefined" ? (Symbol.it
 
 const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== "undefined" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol("Symbol.asyncIterator"))) : "@@asyncIterator";
 
+
+const projectId = "25aFLOpT6wwyHnAAvLlpH0oPodw";
+const projectSecret = "4c269229af2949eb44e23418406f1319";
+const auth =
+  "Basic " + Buffer.from(projectId + ":" + projectSecret).toString("base64");
+
+
 // Asynchronously call a function and send errors to recovery continuation
 function _catch(body, recover) {
 	try {
@@ -22,7 +29,15 @@ function _catch(body, recover) {
 	return result;
 }
 
-var ipfs = create('https://ipfs.infura.io:5001/api/v0');
+var ipfs = create({
+  host: 'ipfs.infura.io',
+  port: 5001,
+  protocol: 'https',
+  apiPath: '/api/v0',
+  headers: {
+    authorization: auth
+  }
+});
 var FileUpload = function FileUpload(_ref) {
   var setUrl = _ref.setUrl;
 
@@ -53,7 +68,7 @@ var FileUpload = function FileUpload(_ref) {
 
       var _temp4 = _catch(function () {
         return Promise.resolve(ipfs.add(file)).then(function (added) {
-          var url = "https://ipfs.infura.io/ipfs/" + added.path;
+          var url = "https://ipfs.io/ipfs/" + added.path;
           setUrl(url);
           setFileUrl(url);
           setUploaded(true);
@@ -79,9 +94,9 @@ var FileUpload = function FileUpload(_ref) {
   var fileAndUploadButton = function fileAndUploadButton() {
     if (file.name) {
       if (!loading) {
-        return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h5", null, file.name, " ", /*#__PURE__*/React.createElement(Badge, {
+        return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h6", null, file.name, " ", /*#__PURE__*/React.createElement(Badge, {
           pill: true
-        }, file.size, " kb")), uploaded ? /*#__PURE__*/React.createElement("h5", null, "\u2705", ' ', /*#__PURE__*/React.createElement("a", {
+        }, file.size, " kb")), uploaded ? /*#__PURE__*/React.createElement("h6", null, "\u2705", ' ', /*#__PURE__*/React.createElement("a", {
           href: fileUrl,
           target: "_blank",
           rel: "noopener noreferrer"
@@ -89,10 +104,10 @@ var FileUpload = function FileUpload(_ref) {
           type: "submit"
         }, "Upload File"));
       } else {
-        return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement("h4", null, "Uploading File"), /*#__PURE__*/React.createElement(ProgressBar, {
+        return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement("h5", null, "Uploading File"), /*#__PURE__*/React.createElement(ProgressBar, {
           animated: true,
           now: 100
-        }), /*#__PURE__*/React.createElement("h4", null, "Please Wait ..."));
+        }), /*#__PURE__*/React.createElement("h5", null, "Please Wait ..."));
       }
     }
   };
@@ -109,7 +124,15 @@ var FileUpload = function FileUpload(_ref) {
   }), fileAndUploadButton()));
 };
 
-var ipfs$1 = create('https://ipfs.infura.io:5001/api/v0');
+var ipfs$1 = create({
+  host: 'ipfs.infura.io',
+  port: 5001,
+  protocol: 'https',
+  apiPath: '/api/v0',
+  headers: {
+    authorization: auth
+  }
+});
 
 var all = require('it-all');
 
@@ -160,7 +183,7 @@ var MultipleFilesUpload = function MultipleFilesUpload(_ref) {
 
         var FilesHash = results[length - 1].cid._baseCache.get('z');
 
-        var FilesUrl = 'https://ipfs.infura.io/ipfs/' + FilesHash;
+        var FilesUrl = 'https://ipfs.io/ipfs/' + FilesHash;
         setUrl(FilesUrl);
         setFilesUrl(FilesUrl);
         setLoading(false);
@@ -174,7 +197,7 @@ var MultipleFilesUpload = function MultipleFilesUpload(_ref) {
   var filesAndUploadButton = function filesAndUploadButton() {
     if (files.length !== 0) {
       if (!loading) {
-        return /*#__PURE__*/React.createElement("div", null, uploaded ? /*#__PURE__*/React.createElement("h5", null, "\u2705", ' ', /*#__PURE__*/React.createElement("a", {
+        return /*#__PURE__*/React.createElement("div", null, uploaded ? /*#__PURE__*/React.createElement("h6", null, "\u2705", ' ', /*#__PURE__*/React.createElement("a", {
           href: filesUrl,
           target: "_blank",
           rel: "noopener noreferrer"
@@ -195,10 +218,10 @@ var MultipleFilesUpload = function MultipleFilesUpload(_ref) {
           }, file.size, " kb"));
         }))));
       } else {
-        return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement("h4", null, "Uploading Files"), /*#__PURE__*/React.createElement(ProgressBar, {
+        return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement("h5", null, "Uploading Files"), /*#__PURE__*/React.createElement(ProgressBar, {
           animated: true,
           now: 100
-        }), /*#__PURE__*/React.createElement("h4", null, "Please Wait ..."));
+        }), /*#__PURE__*/React.createElement("h5", null, "Please Wait ..."));
       }
     }
   };
@@ -216,7 +239,15 @@ var MultipleFilesUpload = function MultipleFilesUpload(_ref) {
   }), filesAndUploadButton()));
 };
 
-var ipfs$2 = create('https://ipfs.infura.io:5001/api/v0');
+var ipfs$2 = create({
+  host: 'ipfs.infura.io',
+  port: 5001,
+  protocol: 'https',
+  apiPath: '/api/v0',
+  headers: {
+    authorization: auth
+  }
+});
 
 var all$1 = require('it-all');
 
@@ -267,7 +298,7 @@ var FolderUpload = function FolderUpload(_ref) {
 
         var FilesHash = results[length - 1].cid._baseCache.get('z');
 
-        var FilesUrl = 'https://ipfs.infura.io/ipfs/' + FilesHash;
+        var FilesUrl = 'https://ipfs.io/ipfs/' + FilesHash;
         console.log(FilesUrl);
         setUrl(FilesUrl);
         setFolderUrl(FilesUrl);
@@ -282,7 +313,7 @@ var FolderUpload = function FolderUpload(_ref) {
   var filesAndUploadButton = function filesAndUploadButton() {
     if (files.length !== 0) {
       if (!loading) {
-        return /*#__PURE__*/React.createElement("div", null, uploaded ? /*#__PURE__*/React.createElement("h5", null, "\u2705", ' ', /*#__PURE__*/React.createElement("a", {
+        return /*#__PURE__*/React.createElement("div", null, uploaded ? /*#__PURE__*/React.createElement("h6", null, "\u2705", ' ', /*#__PURE__*/React.createElement("a", {
           href: folderUrl,
           target: "_blank",
           rel: "noopener noreferrer"
@@ -302,10 +333,10 @@ var FolderUpload = function FolderUpload(_ref) {
           }, file.size, " kb"));
         }))));
       } else {
-        return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement("h4", null, "Uploading Folder"), /*#__PURE__*/React.createElement(ProgressBar, {
+        return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement("h5", null, "Uploading Folder"), /*#__PURE__*/React.createElement(ProgressBar, {
           animated: true,
           now: 100
-        }), /*#__PURE__*/React.createElement("h4", null, "Please Wait ..."));
+        }), /*#__PURE__*/React.createElement("h5", null, "Please Wait ..."));
       }
     }
   };
@@ -324,7 +355,15 @@ var FolderUpload = function FolderUpload(_ref) {
   }), filesAndUploadButton()));
 };
 
-var ipfs$3 = create('https://ipfs.infura.io:5001/api/v0');
+var ipfs$3 = create({
+  host: 'ipfs.infura.io',
+  port: 5001,
+  protocol: 'https',
+  apiPath: '/api/v0',
+  headers: {
+    authorization: auth
+  }
+});
 var ImageUpload = function ImageUpload(_ref) {
   var setUrl = _ref.setUrl;
 
@@ -365,7 +404,7 @@ var ImageUpload = function ImageUpload(_ref) {
 
       var _temp4 = _catch(function () {
         return Promise.resolve(ipfs$3.add(image)).then(function (added) {
-          var url = "https://ipfs.infura.io/ipfs/" + added.path;
+          var url = "https://ipfs.io/ipfs/" + added.path;
           setUrl(url);
           setImagePreview(url);
           setUploaded(true);
@@ -383,28 +422,29 @@ var ImageUpload = function ImageUpload(_ref) {
   var previewAndUploadButton = function previewAndUploadButton() {
     if (imagePreview !== '') {
       if (!loading) {
-        return /*#__PURE__*/React.createElement("div", null, uploaded ? /*#__PURE__*/React.createElement("h5", null, "\u2705", ' ', /*#__PURE__*/React.createElement("a", {
+        return /*#__PURE__*/React.createElement("div", null, uploaded ? /*#__PURE__*/React.createElement("h6", null, "\u2705", ' ', /*#__PURE__*/React.createElement("a", {
           href: imagePreview,
           target: "_blank",
           rel: "noopener noreferrer"
         }, "Image"), ' ', "Uploaded Successfully \u2705", ' ') : /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Button, {
           type: "submit",
           className: "mb-3"
-        }, "Upload Image"), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("h5", null, image.name, ' ', /*#__PURE__*/React.createElement(Badge, {
+        }, "Upload Image"), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("h6", null, image.name, ' ', /*#__PURE__*/React.createElement(Badge, {
           pill: true
         }, image.size, " kb")), /*#__PURE__*/React.createElement(Image, {
           style: {
-            height: '300px'
+            height: '100px',
+            marginLeft:'100px',
           },
           className: "mb-3",
           src: imagePreview,
           thumbnail: true
         })));
       } else {
-        return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement("h4", null, "Uploading Image"), /*#__PURE__*/React.createElement(ProgressBar, {
+        return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement("h5", null, "Uploading Image"), /*#__PURE__*/React.createElement(ProgressBar, {
           animated: true,
           now: 100
-        }), /*#__PURE__*/React.createElement("h4", null, "Please Wait ..."));
+        }), /*#__PURE__*/React.createElement("h5", null, "Please Wait ..."));
       }
     }
   };
@@ -422,7 +462,15 @@ var ImageUpload = function ImageUpload(_ref) {
   }), previewAndUploadButton()));
 };
 
-var ipfs$4 = create('https://ipfs.infura.io:5001/api/v0');
+var ipfs$4 = create({
+  host: 'ipfs.infura.io',
+  port: 5001,
+  protocol: 'https',
+  apiPath: '/api/v0',
+  headers: {
+    authorization: auth
+  }
+});
 var PdfUpload = function PdfUpload(_ref) {
   var setUrl = _ref.setUrl;
 
@@ -463,7 +511,7 @@ var PdfUpload = function PdfUpload(_ref) {
 
       var _temp4 = _catch(function () {
         return Promise.resolve(ipfs$4.add(pdf)).then(function (added) {
-          var url = "https://ipfs.infura.io/ipfs/" + added.path;
+          var url = "https://ipfs.io/ipfs/" + added.path;
           setPdfPreview(url);
           setUrl(url);
           setUploaded(true);
@@ -481,7 +529,7 @@ var PdfUpload = function PdfUpload(_ref) {
   var previewAndUploadButton = function previewAndUploadButton() {
     if (pdfPreview !== '') {
       if (!loading) {
-        return /*#__PURE__*/React.createElement("div", null, uploaded ? /*#__PURE__*/React.createElement("h5", null, "\u2705", ' ', /*#__PURE__*/React.createElement("a", {
+        return /*#__PURE__*/React.createElement("div", null, uploaded ? /*#__PURE__*/React.createElement("h6", null, "\u2705", ' ', /*#__PURE__*/React.createElement("a", {
           href: pdfPreview,
           s: true,
           target: "_blank",
@@ -489,7 +537,7 @@ var PdfUpload = function PdfUpload(_ref) {
         }, "PDF"), ' ', "Uploaded Successfully \u2705") : /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Button, {
           type: "submit",
           className: "mb-3"
-        }, "Upload PDF"), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("h5", null, pdf.name, " ", /*#__PURE__*/React.createElement(Badge, {
+        }, "Upload PDF"), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("h6", null, pdf.name, " ", /*#__PURE__*/React.createElement(Badge, {
           pill: true
         }, pdf.size, " kb")), /*#__PURE__*/React.createElement("embed", {
           width: "75%",
@@ -498,10 +546,10 @@ var PdfUpload = function PdfUpload(_ref) {
           src: pdfPreview
         })));
       } else {
-        return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement("h4", null, "Uploading PDF"), /*#__PURE__*/React.createElement(ProgressBar, {
+        return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement("h5", null, "Uploading PDF"), /*#__PURE__*/React.createElement(ProgressBar, {
           animated: true,
           now: 100
-        }), /*#__PURE__*/React.createElement("h4", null, "Please Wait ..."));
+        }), /*#__PURE__*/React.createElement("h5", null, "Please Wait ..."));
       }
     }
   };
@@ -519,7 +567,15 @@ var PdfUpload = function PdfUpload(_ref) {
   }), previewAndUploadButton()));
 };
 
-var ipfs$5 = create('https://ipfs.infura.io:5001/api/v0');
+var ipfs$5 = create({
+  host: 'ipfs.infura.io',
+  port: 5001,
+  protocol: 'https',
+  apiPath: '/api/v0',
+  headers: {
+    authorization: auth
+  }
+});
 var TextUpload = function TextUpload(_ref) {
   var setUrl = _ref.setUrl;
 
@@ -550,7 +606,7 @@ var TextUpload = function TextUpload(_ref) {
 
       var _temp4 = _catch(function () {
         return Promise.resolve(ipfs$5.add(text)).then(function (added) {
-          var url = "https://ipfs.infura.io/ipfs/" + added.path;
+          var url = "https://ipfs.io/ipfs/" + added.path;
           setTextUrl(url);
           setUrl(url);
           setUploaded(true);
@@ -569,17 +625,17 @@ var TextUpload = function TextUpload(_ref) {
     if (text === '') return;
 
     if (uploaded) {
-      return /*#__PURE__*/React.createElement("h5", null, "\u2705", ' ', /*#__PURE__*/React.createElement("a", {
+      return /*#__PURE__*/React.createElement("h6", null, "\u2705", ' ', /*#__PURE__*/React.createElement("a", {
         href: textUrl,
         target: "_blank",
         rel: "noopener noreferrer"
       }, "Text"), ' ', "Uploaded Successfully \u2705");
     } else {
       if (loading) {
-        return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement("h4", null, "Uploading Text"), /*#__PURE__*/React.createElement(ProgressBar, {
+        return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement("h5", null, "Uploading Text"), /*#__PURE__*/React.createElement(ProgressBar, {
           animated: true,
           now: 100
-        }), /*#__PURE__*/React.createElement("h4", null, "Please Wait ..."));
+        }), /*#__PURE__*/React.createElement("h5", null, "Please Wait ..."));
       } else {
         return /*#__PURE__*/React.createElement(Button, {
           type: "submit"
